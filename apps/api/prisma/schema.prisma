// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pg_trgm, btree_gin, uuid_ossp]
}

// Enums für Typsicherheit
enum UserRole {
  ADMIN
  ORGANIZER
  ONSITE
  EXTERNAL_VENDOR
}

enum ProjectStatus {
  PLANNING
  APPROVAL_PENDING
  APPROVED
  ACTIVE
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  BLOCKED
  CANCELLED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
  ESCALATED
}

enum BOMItemType {
  MATERIAL
  EQUIPMENT
  SERVICE
  LABOR
  OVERHEAD
}

enum Currency {
  EUR
  USD
  CHF
  GBP
}

// Core Entities (Benutzer & Authentifizierung)
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String
  role         UserRole
  isActive     Boolean  @default(true)
  phone        String?
  department   String?
  position     String?
  avatar       String?
  lastLogin    DateTime?
  timezone     String   @default("Europe/Berlin")
  language     String   @default("de")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  ownedProjects     Project[] @relation("ProjectOwner")
  assignedProjects  Project[] @relation("ProjectMembers")
  comments          Comment[]
  auditLogs         AuditLog[]
  uploadedFiles     File[] @relation("FileUploader")
  bomChanges        BOMChange[]
  supplierRatings   SupplierRating[]
  expenseApprovals  ProjectExpense[] @relation("ExpenseApprover")
  assignedTasks     Task[] @relation("TaskAssignee")
  timeLogs          TimeLog[]
  taskComments      TaskComment[]
  slotReservations  SlotReservation[]
  responsiblePermits Permit[] @relation("PermitResponsible")
  permits           Permit[] @relation("PermitRequestor")

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([isActive])
}

// Rollen und Berechtigungen
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Permission[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String   // z.B. "project", "bom", "supplier"
  action      String   // z.B. "create", "read", "update", "delete"
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permissions")
  @@unique([resource, action])
}

// Audit & Logging
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource  String   // Welche Ressource wurde geändert
  resourceId String? // ID der geänderten Ressource
  oldValues Json?    // Vorherige Werte
  newValues Json?    // Neue Werte
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

// Offline-Aktionen für mobile Nutzung
model OfflineAction {
  id        String   @id @default(cuid())
  userId    String
  action    String   // API-Endpoint
  payload   Json     // Request-Daten
  timestamp DateTime @default(now())
  synced    Boolean  @default(false)
  error     String?
  
  user      User     @relation(fields: [userId], references: [id])

  @@map("offline_actions")
  @@index([userId])
  @@index([synced])
  @@index([timestamp])
}

// Business Logic Entities

// Event-Projekte
model Project {
  id             String        @id @default(cuid())
  name           String
  description   String?
  status         ProjectStatus @default(PLANNING)
  dateFrom       DateTime
  dateTo         DateTime
  startDate      DateTime      // Für Kompatibilität
  locationName   String
  address        String?
  lat            Float?
  lng            Float?
  ownerId        String
  budgetEstimate Float?
  budget         Float?
  currency       Currency      @default(EUR)
  priority       String?       // LOW, MEDIUM, HIGH, CRITICAL
  manager        String?
  client         String?
  notes          String?
  tags           String[]      // Für Kategorisierung
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  owner              User                    @relation("ProjectOwner", fields: [ownerId], references: [id])
  members            User[]                  @relation("ProjectMembers")
  bomItems          BomItem[]
  suppliers         ProjectSupplier[]
  tasks             Task[]
  slots             Slot[]
  permits           Permit[]
  expenses          ProjectExpense[]
  comments          Comment[]
  files             File[]

  @@map("projects")
  @@index([ownerId])
  @@index([status])
  @@index([dateFrom])
  @@index([dateTo])
  @@index([locationName])
  @@index([tags])
}

// Bill-of-Materials Items
model BomItem {
  id          String      @id @default(cuid())
  projectId   String
  parentId    String?     // Für hierarchische Struktur
  name        String
  description String?
  type        BOMItemType
  quantity    Float
  unit        String
  cost        Float?
  supplierId  String?
  categoryId  String?
  sku         String?     // Stock Keeping Unit
  weight      Float?
  dimensions  Json?        // {length, width, height}
  notes       String?
  version     Int          @default(1)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  project    Project     @relation(fields: [projectId], references: [id])
  parent     BomItem?    @relation("BOMHierarchy", fields: [parentId], references: [id])
  children   BomItem[]   @relation("BOMHierarchy")
  supplier   Supplier?   @relation(fields: [supplierId], references: [id])
  category   Category?   @relation(fields: [categoryId], references: [id])
  changes    BOMChange[]

  @@map("bom_items")
  @@index([projectId])
  @@index([parentId])
  @@index([type])
  @@index([categoryId])
  @@index([supplierId])
  @@index([sku])
}

// BOM-Kategorien
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  color       String?  // Für UI-Darstellung
  icon        String?  // Für UI-Darstellung
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  bomItems   BomItem[]
  materials  Material[]

  @@map("categories")
  @@index([parentId])
  @@index([name])
}

// BOM-Änderungen für Versionsverwaltung
model BOMChange {
  id        String   @id @default(cuid())
  bomItemId String
  changeType String  // ADD, UPDATE, DELETE, QUANTITY_CHANGE
  oldValues Json?
  newValues Json?
  reason    String?
  userId    String
  timestamp DateTime @default(now())

  bomItem BomItem @relation(fields: [bomItemId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("bom_changes")
  @@index([bomItemId])
  @@index([changeType])
  @@index([timestamp])
}

// Lieferanten
model Supplier {
  id            String   @id @default(cuid())
  name          String
  description   String?
  contactPerson String?
  email         String
  phone         String?
  website       String?
  address       String?
  city          String?
  country       String?
  postalCode    String?
  taxId         String?
  rating        Float?   // Durchschnittsbewertung 1-5
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  categories       SupplierCategory[]
  projects        ProjectSupplier[]
  bomItems        BomItem[]
  ratings         SupplierRating[]
  availability    SupplierAvailability[]

  @@map("suppliers")
  @@index([name])
  @@index([email])
  @@index([rating])
  @@index([isActive])
}

// Lieferanten-Kategorien
model SupplierCategory {
  id         String   @id @default(cuid())
  supplierId String
  categoryId String
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())

  supplier Supplier @relation(fields: [supplierId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("supplier_categories")
  @@unique([supplierId, categoryId])
  @@index([supplierId])
  @@index([categoryId])
}

// Lieferanten-Bewertungen
model SupplierRating {
  id         String   @id @default(cuid())
  supplierId String
  userId     String
  rating     Int      // 1-5 Sterne
  comment    String?
  category   String?  // Qualität, Pünktlichkeit, etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  supplier Supplier @relation(fields: [supplierId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("supplier_ratings")
  @@unique([supplierId, userId, category])
  @@index([supplierId])
  @@index([rating])
  @@index([category])
}

// Lieferanten-Verfügbarkeit
model SupplierAvailability {
  id         String   @id @default(cuid())
  supplierId String
  dateFrom   DateTime
  dateTo     DateTime
  isAvailable Boolean @default(true)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  supplier Supplier @relation(fields: [supplierId], references: [id])

  @@map("supplier_availability")
  @@index([supplierId])
  @@index([dateFrom])
  @@index([dateTo])
}

// Projekt-Lieferanten
model ProjectSupplier {
  id         String   @id @default(cuid())
  projectId  String
  supplierId String
  role       String   // Hauptlieferant, Backup, etc.
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project   Project   @relation(fields: [projectId], references: [id])
  supplier  Supplier  @relation(fields: [supplierId], references: [id])

  @@map("project_suppliers")
  @@unique([projectId, supplierId])
  @@index([projectId])
  @@index([supplierId])
}

// Aufgaben
model Task {
  id          String     @id @default(cuid())
  projectId   String
  name        String
  description String?
  status      TaskStatus @default(TODO)
  priority    String?    // LOW, MEDIUM, HIGH, CRITICAL
  assigneeId  String?
  dueDate     DateTime?
  startDate   DateTime?
  endDate     DateTime?
  estimatedHours Float?
  actualHours   Float?
  dependencies  String[]  // IDs abhängiger Tasks
  tags         String[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  project       Project        @relation(fields: [projectId], references: [id])
  assignee      User?          @relation("TaskAssignee", fields: [assigneeId], references: [id])
  comments      TaskComment[]
  timeLogs      TimeLog[]
  slotReservations SlotReservation[]

  @@map("tasks")
  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueDate])
  @@index([priority])
  @@index([tags])
}

// Task-Kommentare
model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("task_comments")
  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
}

// Zeiterfassung
model TimeLog {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  startTime DateTime
  endTime   DateTime?
  duration  Float?   // In Stunden
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("time_logs")
  @@index([taskId])
  @@index([userId])
  @@index([startTime])
  @@index([endTime])
}

// Logistik-Slots
model Slot {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  type        String   // SETUP, EVENT, TEARDOWN
  dateFrom    DateTime
  dateTo      DateTime
  location    String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project         Project            @relation(fields: [projectId], references: [id])
  reservations    SlotReservation[]

  @@map("slots")
  @@index([projectId])
  @@index([type])
  @@index([dateFrom])
  @@index([dateTo])
}

// Slot-Reservierungen
model SlotReservation {
  id        String   @id @default(cuid())
  slotId    String
  userId    String?
  taskId    String?
  resource  String?  // Welche Ressource wird reserviert
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slot Slot @relation(fields: [slotId], references: [id])
  user User? @relation(fields: [userId], references: [id])
  task Task? @relation(fields: [taskId], references: [id])

  @@map("slot_reservations")
  @@index([slotId])
  @@index([userId])
  @@index([taskId])
}

// Genehmigungen
model Permit {
  id          String        @id @default(cuid())
  projectId   String
  name        String
  description String?
  status      ApprovalStatus @default(PENDING)
  type        String        // BUILDING, SAFETY, ENVIRONMENTAL, etc.
  requestDate DateTime      @default(now())
  dueDate     DateTime?
  approvedDate DateTime?
  rejectedDate DateTime?
  requestorId String
  approverId  String?
  responsibleId String?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  project      Project      @relation(fields: [projectId], references: [id])
  requestor    User         @relation("PermitRequestor", fields: [requestorId], references: [id])
  approver     User?        @relation("PermitApprover", fields: [approverId], references: [id])
  responsible  User?        @relation("PermitResponsible", fields: [responsibleId], references: [id])
  documents    PermitDoc[]
  comments     Comment[]

  @@map("permits")
  @@index([projectId])
  @@index([status])
  @@index([type])
  @@index([requestorId])
  @@index([approverId])
  @@index([dueDate])
}

// Genehmigungs-Dokumente
model PermitDoc {
  id        String   @id @default(cuid())
  permitId  String
  userId    String
  filename  String
  filepath  String
  fileSize  Int
  mimeType  String
  uploadedAt DateTime @default(now())

  permit Permit @relation(fields: [permitId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("permit_docs")
  @@index([permitId])
  @@index([userId])
  @@index([uploadedAt])
}

// Projekt-Ausgaben
model ProjectExpense {
  id          String   @id @default(cuid())
  projectId   String
  category    String   // MATERIAL, LABOR, EQUIPMENT, etc.
  description String
  amount      Float
  currency    Currency @default(EUR)
  date        DateTime
  supplierId  String?
  invoiceNumber String?
  approved    Boolean  @default(false)
  approverId  String?
  approvedAt  DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project   Project  @relation(fields: [projectId], references: [id])
  supplier  Supplier? @relation(fields: [supplierId], references: [id])
  approver  User?     @relation("ExpenseApprover", fields: [approverId], references: [id])

  @@map("project_expenses")
  @@index([projectId])
  @@index([category])
  @@index([date])
  @@index([approved])
  @@index([supplierId])
}

// Dateien
model File {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  filepath    String
  fileSize    Int
  mimeType    String
  uploadedBy  String
  projectId   String?
  tags        String[]
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  uploader User    @relation("FileUploader", fields: [uploadedBy], references: [id])
  project  Project? @relation(fields: [projectId], references: [id])

  @@map("files")
  @@index([uploadedBy])
  @@index([projectId])
  @@index([mimeType])
  @@index([tags])
  @@index([isPublic])
}

// Kommentare
model Comment {
  id        String   @id @default(cuid())
  projectId String?
  permitId  String?
  userId    String
  content   String
  parentId  String?  // Für verschachtelte Kommentare
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project   Project?  @relation(fields: [projectId], references: [id])
  permit    Permit?   @relation(fields: [permitId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  parent    Comment?  @relation("CommentHierarchy", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentHierarchy")

  @@map("comments")
  @@index([projectId])
  @@index([permitId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
}

// Materialien
model Material {
  id          String   @id @default(cuid())
  name        String
  description String?
  categoryId  String?
  sku         String?  // Stock Keeping Unit
  unit        String   // Stück, Meter, kg, etc.
  cost        Float?
  weight      Float?
  dimensions  Json?    // {length, width, height}
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category        @relation(fields: [categoryId], references: [id])

  @@map("materials")
  @@index([name])
  @@index([sku])
  @@index([categoryId])
  @@index([isActive])
}
