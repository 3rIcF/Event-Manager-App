// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER") // ADMIN, MANAGER, USER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects         Project[]
  comments         Comment[]
  projectMembers   ProjectMember[]
  createdMaterials GlobalMaterial[]
  
  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String
  status      String        @default("IDEA") // IDEA, PLANNING, APPROVAL, SETUP, LIVE, TEARDOWN, CLOSED
  budget      Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Foreign Keys
  responsibleId String
  responsible   User   @relation(fields: [responsibleId], references: [id])
  
  // Relations
  materials        ProjectMaterial[]
  suppliers        ProjectSupplier[]
  members          ProjectMember[]
  comments         Comment[]
  diffNotifications DiffNotification[]

  @@map("projects")
}

model ProjectMember {
  id        String           @id @default(cuid())
  role      String            @default("MEMBER") // OWNER, MANAGER, MEMBER
  createdAt DateTime         @default(now())
  
  // Foreign Keys
  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@map("project_members")
}

model GlobalMaterial {
  id               String   @id @default(cuid())
  name             String
  category         String
  unit             String
  specs            String?
  portfolio        String?  // JSON array as string
  standardLeadTime Int?
  version          Int      @default(1)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Foreign Keys
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])
  
  // Relations
  projectMaterials  ProjectMaterial[]
  comments          Comment[]
  diffNotifications DiffNotification[]

  @@map("global_materials")
}

model ProjectMaterial {
  id               String            @id @default(cuid())
  quantity         Int
  phase            String            @default("SETUP") // SETUP, SHOW, TEARDOWN
  location         String?
  deliveryTime     DateTime?
  pickupTime       DateTime?
  needs            String?           // JSON array as string
  specialPrice     Float?
  notes            String?
  hasOverride      Boolean           @default(false)
  overriddenFields String?           // JSON array as string
  lastSyncVersion  Int               @default(1)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Foreign Keys
  projectId        String
  globalMaterialId String
  project          Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  globalMaterial   GlobalMaterial @relation(fields: [globalMaterialId], references: [id])
  
  // Relations
  comments Comment[]

  @@unique([projectId, globalMaterialId])
  @@map("project_materials")
}

model GlobalSupplier {
  id          String   @id @default(cuid())
  name        String
  portfolio   String?  // JSON array as string
  regions     String?  // JSON array as string
  email       String
  phone       String
  address     String
  qualityScore     Float    @default(0)
  punctualityScore Float    @default(0)
  priceScore       Float    @default(0)
  overallScore     Float    @default(0)
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectSuppliers  ProjectSupplier[]
  comments          Comment[]
  diffNotifications DiffNotification[]

  @@map("global_suppliers")
}

model ProjectSupplier {
  id                String    @id @default(cuid())
  arrivalTime       DateTime?
  setupTime         DateTime?
  operationTime     DateTime?
  teardownTime      DateTime?
  needs             String?   // JSON array as string
  personnel         Int       @default(0)
  vehicles          String?   // JSON array as string
  onsiteContact     String?
  briefingGenerated Boolean   @default(false)
  hasOverride       Boolean   @default(false)
  overriddenFields  String?   // JSON array as string
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Foreign Keys
  projectId        String
  globalSupplierId String
  project          Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  globalSupplier   GlobalSupplier @relation(fields: [globalSupplierId], references: [id])
  
  // Relations
  comments Comment[]

  @@unique([projectId, globalSupplierId])
  @@map("project_suppliers")
}

model Comment {
  id         String      @id @default(cuid())
  entityType String      // MATERIAL, SUPPLIER, PROJECT
  entityId   String
  scope      String      // GLOBAL, PROJECT
  content    String
  createdAt  DateTime    @default(now())
  
  // Foreign Keys
  authorId  String
  projectId String?
  author    User     @relation(fields: [authorId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Polymorphic relations (handled in application logic)
  globalMaterial  GlobalMaterial?  @relation(fields: [entityId], references: [id])
  projectMaterial ProjectMaterial? @relation(fields: [entityId], references: [id])
  globalSupplier  GlobalSupplier?  @relation(fields: [entityId], references: [id])
  projectSupplier ProjectSupplier? @relation(fields: [entityId], references: [id])

  @@map("comments")
}

model DiffNotification {
  id        String                   @id @default(cuid())
  entityType String                  // MATERIAL, SUPPLIER, PROJECT
  entityId   String
  changes    String                  // JSON string of changes
  status     String                  @default("PENDING") // PENDING, IGNORED, ACCEPTED
  createdAt  DateTime                @default(now())
  
  // Foreign Keys
  projectId        String
  globalEntityId   String
  project          Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  globalMaterial   GlobalMaterial?  @relation(fields: [globalEntityId], references: [id])
  globalSupplier   GlobalSupplier?  @relation(fields: [globalEntityId], references: [id])

  @@map("diff_notifications")
}

// Enums are represented as String constants:
// UserRole: "ADMIN" | "MANAGER" | "USER"
// ProjectStatus: "IDEA" | "PLANNING" | "APPROVAL" | "SETUP" | "LIVE" | "TEARDOWN" | "CLOSED"
// ProjectMemberRole: "OWNER" | "MANAGER" | "MEMBER"
// MaterialPhase: "SETUP" | "SHOW" | "TEARDOWN"
// EntityType: "MATERIAL" | "SUPPLIER" | "PROJECT"
// CommentScope: "GLOBAL" | "PROJECT"
// DiffNotificationStatus: "PENDING" | "IGNORED" | "ACCEPTED"