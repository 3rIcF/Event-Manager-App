
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatarUrl: 'avatarUrl',
  timezone: 'timezone',
  language: 'language',
  isActive: 'isActive',
  isVerified: 'isVerified',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  roleId: 'roleId'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  isSystemRole: 'isSystemRole',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  permissions: 'permissions',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  refreshToken: 'refreshToken',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  lastActivityAt: 'lastActivityAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  logoUrl: 'logoUrl',
  website: 'website',
  industry: 'industry',
  size: 'size',
  foundedYear: 'foundedYear',
  address: 'address',
  contactInfo: 'contactInfo',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  contactPerson: 'contactPerson',
  email: 'email',
  phone: 'phone',
  address: 'address',
  billingInfo: 'billingInfo',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  priority: 'priority',
  startDate: 'startDate',
  endDate: 'endDate',
  budget: 'budget',
  actualCost: 'actualCost',
  managerId: 'managerId',
  clientId: 'clientId',
  organizationId: 'organizationId',
  tags: 'tags',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  role: 'role',
  permissions: 'permissions',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isActive: 'isActive'
};

exports.Prisma.ProjectPhaseScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  description: 'description',
  orderIndex: 'orderIndex',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  progressPercentage: 'progressPercentage',
  dependencies: 'dependencies',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BOMItemScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  parentId: 'parentId',
  name: 'name',
  description: 'description',
  sku: 'sku',
  category: 'category',
  quantity: 'quantity',
  unit: 'unit',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  supplierId: 'supplierId',
  status: 'status',
  priority: 'priority',
  deliveryDate: 'deliveryDate',
  notes: 'notes',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactPerson: 'contactPerson',
  email: 'email',
  phone: 'phone',
  website: 'website',
  address: 'address',
  taxId: 'taxId',
  paymentTerms: 'paymentTerms',
  rating: 'rating',
  category: 'category',
  specialties: 'specialties',
  certifications: 'certifications',
  performanceMetrics: 'performanceMetrics',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierContractScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  projectId: 'projectId',
  contractNumber: 'contractNumber',
  contractType: 'contractType',
  startDate: 'startDate',
  endDate: 'endDate',
  totalValue: 'totalValue',
  paymentTerms: 'paymentTerms',
  termsConditions: 'termsConditions',
  status: 'status',
  documents: 'documents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermitScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  description: 'description',
  type: 'type',
  category: 'category',
  status: 'status',
  priority: 'priority',
  applicationDate: 'applicationDate',
  submissionDate: 'submissionDate',
  approvalDate: 'approvalDate',
  expiryDate: 'expiryDate',
  cost: 'cost',
  issuingAuthority: 'issuingAuthority',
  referenceNumber: 'referenceNumber',
  requirements: 'requirements',
  documents: 'documents',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LogisticScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  type: 'type',
  name: 'name',
  description: 'description',
  fromLocation: 'fromLocation',
  toLocation: 'toLocation',
  scheduledDate: 'scheduledDate',
  actualDate: 'actualDate',
  status: 'status',
  priority: 'priority',
  cost: 'cost',
  carrier: 'carrier',
  trackingNumber: 'trackingNumber',
  specialRequirements: 'specialRequirements',
  documents: 'documents',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  parentTaskId: 'parentTaskId',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  type: 'type',
  assignedTo: 'assignedTo',
  createdBy: 'createdBy',
  dueDate: 'dueDate',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  progressPercentage: 'progressPercentage',
  dependencies: 'dependencies',
  tags: 'tags',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskCommentScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId',
  content: 'content',
  parentCommentId: 'parentCommentId',
  isInternal: 'isInternal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskAttachmentScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  fileId: 'fileId',
  uploadedBy: 'uploadedBy',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.KanbanBoardScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  description: 'description',
  boardType: 'boardType',
  settings: 'settings',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KanbanColumnScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  name: 'name',
  description: 'description',
  orderIndex: 'orderIndex',
  color: 'color',
  wipLimit: 'wipLimit',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KanbanCardScalarFieldEnum = {
  id: 'id',
  columnId: 'columnId',
  title: 'title',
  description: 'description',
  content: 'content',
  assignedTo: 'assignedTo',
  priority: 'priority',
  dueDate: 'dueDate',
  orderIndex: 'orderIndex',
  size: 'size',
  tags: 'tags',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  originalName: 'originalName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  extension: 'extension',
  category: 'category',
  tags: 'tags',
  metadata: 'metadata',
  uploadedBy: 'uploadedBy',
  isPublic: 'isPublic',
  downloadCount: 'downloadCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileVersionScalarFieldEnum = {
  id: 'id',
  fileId: 'fileId',
  versionNumber: 'versionNumber',
  filePath: 'filePath',
  fileSize: 'fileSize',
  changeDescription: 'changeDescription',
  uploadedBy: 'uploadedBy',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  recordId: 'recordId',
  action: 'action',
  oldValues: 'oldValues',
  newValues: 'newValues',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.SystemLogScalarFieldEnum = {
  id: 'id',
  level: 'level',
  message: 'message',
  context: 'context',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  UserRole: 'UserRole',
  UserPermission: 'UserPermission',
  UserSession: 'UserSession',
  Organization: 'Organization',
  Client: 'Client',
  Project: 'Project',
  ProjectMember: 'ProjectMember',
  ProjectPhase: 'ProjectPhase',
  BOMItem: 'BOMItem',
  Supplier: 'Supplier',
  SupplierContract: 'SupplierContract',
  Permit: 'Permit',
  Logistic: 'Logistic',
  Task: 'Task',
  TaskComment: 'TaskComment',
  TaskAttachment: 'TaskAttachment',
  KanbanBoard: 'KanbanBoard',
  KanbanColumn: 'KanbanColumn',
  KanbanCard: 'KanbanCard',
  File: 'File',
  FileVersion: 'FileVersion',
  AuditLog: 'AuditLog',
  SystemLog: 'SystemLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
