
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model ProjectMember
 * 
 */
export type ProjectMember = $Result.DefaultSelection<Prisma.$ProjectMemberPayload>
/**
 * Model GlobalMaterial
 * 
 */
export type GlobalMaterial = $Result.DefaultSelection<Prisma.$GlobalMaterialPayload>
/**
 * Model ProjectMaterial
 * 
 */
export type ProjectMaterial = $Result.DefaultSelection<Prisma.$ProjectMaterialPayload>
/**
 * Model GlobalSupplier
 * 
 */
export type GlobalSupplier = $Result.DefaultSelection<Prisma.$GlobalSupplierPayload>
/**
 * Model ProjectSupplier
 * 
 */
export type ProjectSupplier = $Result.DefaultSelection<Prisma.$ProjectSupplierPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model DiffNotification
 * 
 */
export type DiffNotification = $Result.DefaultSelection<Prisma.$DiffNotificationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.projectMember`: Exposes CRUD operations for the **ProjectMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectMembers
    * const projectMembers = await prisma.projectMember.findMany()
    * ```
    */
  get projectMember(): Prisma.ProjectMemberDelegate<ExtArgs>;

  /**
   * `prisma.globalMaterial`: Exposes CRUD operations for the **GlobalMaterial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GlobalMaterials
    * const globalMaterials = await prisma.globalMaterial.findMany()
    * ```
    */
  get globalMaterial(): Prisma.GlobalMaterialDelegate<ExtArgs>;

  /**
   * `prisma.projectMaterial`: Exposes CRUD operations for the **ProjectMaterial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectMaterials
    * const projectMaterials = await prisma.projectMaterial.findMany()
    * ```
    */
  get projectMaterial(): Prisma.ProjectMaterialDelegate<ExtArgs>;

  /**
   * `prisma.globalSupplier`: Exposes CRUD operations for the **GlobalSupplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GlobalSuppliers
    * const globalSuppliers = await prisma.globalSupplier.findMany()
    * ```
    */
  get globalSupplier(): Prisma.GlobalSupplierDelegate<ExtArgs>;

  /**
   * `prisma.projectSupplier`: Exposes CRUD operations for the **ProjectSupplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectSuppliers
    * const projectSuppliers = await prisma.projectSupplier.findMany()
    * ```
    */
  get projectSupplier(): Prisma.ProjectSupplierDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.diffNotification`: Exposes CRUD operations for the **DiffNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiffNotifications
    * const diffNotifications = await prisma.diffNotification.findMany()
    * ```
    */
  get diffNotification(): Prisma.DiffNotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Project: 'Project',
    ProjectMember: 'ProjectMember',
    GlobalMaterial: 'GlobalMaterial',
    ProjectMaterial: 'ProjectMaterial',
    GlobalSupplier: 'GlobalSupplier',
    ProjectSupplier: 'ProjectSupplier',
    Comment: 'Comment',
    DiffNotification: 'DiffNotification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "project" | "projectMember" | "globalMaterial" | "projectMaterial" | "globalSupplier" | "projectSupplier" | "comment" | "diffNotification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      ProjectMember: {
        payload: Prisma.$ProjectMemberPayload<ExtArgs>
        fields: Prisma.ProjectMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          findFirst: {
            args: Prisma.ProjectMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          findMany: {
            args: Prisma.ProjectMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>[]
          }
          create: {
            args: Prisma.ProjectMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          createMany: {
            args: Prisma.ProjectMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>[]
          }
          delete: {
            args: Prisma.ProjectMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          update: {
            args: Prisma.ProjectMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          deleteMany: {
            args: Prisma.ProjectMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          aggregate: {
            args: Prisma.ProjectMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectMember>
          }
          groupBy: {
            args: Prisma.ProjectMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectMemberCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectMemberCountAggregateOutputType> | number
          }
        }
      }
      GlobalMaterial: {
        payload: Prisma.$GlobalMaterialPayload<ExtArgs>
        fields: Prisma.GlobalMaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlobalMaterialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlobalMaterialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload>
          }
          findFirst: {
            args: Prisma.GlobalMaterialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlobalMaterialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload>
          }
          findMany: {
            args: Prisma.GlobalMaterialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload>[]
          }
          create: {
            args: Prisma.GlobalMaterialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload>
          }
          createMany: {
            args: Prisma.GlobalMaterialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GlobalMaterialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload>[]
          }
          delete: {
            args: Prisma.GlobalMaterialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload>
          }
          update: {
            args: Prisma.GlobalMaterialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload>
          }
          deleteMany: {
            args: Prisma.GlobalMaterialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GlobalMaterialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GlobalMaterialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalMaterialPayload>
          }
          aggregate: {
            args: Prisma.GlobalMaterialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGlobalMaterial>
          }
          groupBy: {
            args: Prisma.GlobalMaterialGroupByArgs<ExtArgs>
            result: $Utils.Optional<GlobalMaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlobalMaterialCountArgs<ExtArgs>
            result: $Utils.Optional<GlobalMaterialCountAggregateOutputType> | number
          }
        }
      }
      ProjectMaterial: {
        payload: Prisma.$ProjectMaterialPayload<ExtArgs>
        fields: Prisma.ProjectMaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectMaterialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectMaterialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload>
          }
          findFirst: {
            args: Prisma.ProjectMaterialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectMaterialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload>
          }
          findMany: {
            args: Prisma.ProjectMaterialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload>[]
          }
          create: {
            args: Prisma.ProjectMaterialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload>
          }
          createMany: {
            args: Prisma.ProjectMaterialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectMaterialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload>[]
          }
          delete: {
            args: Prisma.ProjectMaterialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload>
          }
          update: {
            args: Prisma.ProjectMaterialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload>
          }
          deleteMany: {
            args: Prisma.ProjectMaterialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectMaterialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectMaterialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMaterialPayload>
          }
          aggregate: {
            args: Prisma.ProjectMaterialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectMaterial>
          }
          groupBy: {
            args: Prisma.ProjectMaterialGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectMaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectMaterialCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectMaterialCountAggregateOutputType> | number
          }
        }
      }
      GlobalSupplier: {
        payload: Prisma.$GlobalSupplierPayload<ExtArgs>
        fields: Prisma.GlobalSupplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlobalSupplierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlobalSupplierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload>
          }
          findFirst: {
            args: Prisma.GlobalSupplierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlobalSupplierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload>
          }
          findMany: {
            args: Prisma.GlobalSupplierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload>[]
          }
          create: {
            args: Prisma.GlobalSupplierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload>
          }
          createMany: {
            args: Prisma.GlobalSupplierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GlobalSupplierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload>[]
          }
          delete: {
            args: Prisma.GlobalSupplierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload>
          }
          update: {
            args: Prisma.GlobalSupplierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload>
          }
          deleteMany: {
            args: Prisma.GlobalSupplierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GlobalSupplierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GlobalSupplierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalSupplierPayload>
          }
          aggregate: {
            args: Prisma.GlobalSupplierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGlobalSupplier>
          }
          groupBy: {
            args: Prisma.GlobalSupplierGroupByArgs<ExtArgs>
            result: $Utils.Optional<GlobalSupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlobalSupplierCountArgs<ExtArgs>
            result: $Utils.Optional<GlobalSupplierCountAggregateOutputType> | number
          }
        }
      }
      ProjectSupplier: {
        payload: Prisma.$ProjectSupplierPayload<ExtArgs>
        fields: Prisma.ProjectSupplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectSupplierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectSupplierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload>
          }
          findFirst: {
            args: Prisma.ProjectSupplierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectSupplierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload>
          }
          findMany: {
            args: Prisma.ProjectSupplierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload>[]
          }
          create: {
            args: Prisma.ProjectSupplierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload>
          }
          createMany: {
            args: Prisma.ProjectSupplierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectSupplierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload>[]
          }
          delete: {
            args: Prisma.ProjectSupplierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload>
          }
          update: {
            args: Prisma.ProjectSupplierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload>
          }
          deleteMany: {
            args: Prisma.ProjectSupplierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectSupplierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectSupplierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectSupplierPayload>
          }
          aggregate: {
            args: Prisma.ProjectSupplierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectSupplier>
          }
          groupBy: {
            args: Prisma.ProjectSupplierGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectSupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectSupplierCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectSupplierCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      DiffNotification: {
        payload: Prisma.$DiffNotificationPayload<ExtArgs>
        fields: Prisma.DiffNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiffNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiffNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload>
          }
          findFirst: {
            args: Prisma.DiffNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiffNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload>
          }
          findMany: {
            args: Prisma.DiffNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload>[]
          }
          create: {
            args: Prisma.DiffNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload>
          }
          createMany: {
            args: Prisma.DiffNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiffNotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload>[]
          }
          delete: {
            args: Prisma.DiffNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload>
          }
          update: {
            args: Prisma.DiffNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload>
          }
          deleteMany: {
            args: Prisma.DiffNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiffNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DiffNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiffNotificationPayload>
          }
          aggregate: {
            args: Prisma.DiffNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiffNotification>
          }
          groupBy: {
            args: Prisma.DiffNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiffNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiffNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<DiffNotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    projects: number
    comments: number
    projectMembers: number
    createdMaterials: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    projectMembers?: boolean | UserCountOutputTypeCountProjectMembersArgs
    createdMaterials?: boolean | UserCountOutputTypeCountCreatedMaterialsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlobalMaterialWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    materials: number
    suppliers: number
    members: number
    comments: number
    diffNotifications: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    materials?: boolean | ProjectCountOutputTypeCountMaterialsArgs
    suppliers?: boolean | ProjectCountOutputTypeCountSuppliersArgs
    members?: boolean | ProjectCountOutputTypeCountMembersArgs
    comments?: boolean | ProjectCountOutputTypeCountCommentsArgs
    diffNotifications?: boolean | ProjectCountOutputTypeCountDiffNotificationsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMaterialWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountSuppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectSupplierWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDiffNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiffNotificationWhereInput
  }


  /**
   * Count Type GlobalMaterialCountOutputType
   */

  export type GlobalMaterialCountOutputType = {
    projectMaterials: number
    comments: number
    diffNotifications: number
  }

  export type GlobalMaterialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectMaterials?: boolean | GlobalMaterialCountOutputTypeCountProjectMaterialsArgs
    comments?: boolean | GlobalMaterialCountOutputTypeCountCommentsArgs
    diffNotifications?: boolean | GlobalMaterialCountOutputTypeCountDiffNotificationsArgs
  }

  // Custom InputTypes
  /**
   * GlobalMaterialCountOutputType without action
   */
  export type GlobalMaterialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterialCountOutputType
     */
    select?: GlobalMaterialCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GlobalMaterialCountOutputType without action
   */
  export type GlobalMaterialCountOutputTypeCountProjectMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMaterialWhereInput
  }

  /**
   * GlobalMaterialCountOutputType without action
   */
  export type GlobalMaterialCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * GlobalMaterialCountOutputType without action
   */
  export type GlobalMaterialCountOutputTypeCountDiffNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiffNotificationWhereInput
  }


  /**
   * Count Type ProjectMaterialCountOutputType
   */

  export type ProjectMaterialCountOutputType = {
    comments: number
  }

  export type ProjectMaterialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | ProjectMaterialCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * ProjectMaterialCountOutputType without action
   */
  export type ProjectMaterialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterialCountOutputType
     */
    select?: ProjectMaterialCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectMaterialCountOutputType without action
   */
  export type ProjectMaterialCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type GlobalSupplierCountOutputType
   */

  export type GlobalSupplierCountOutputType = {
    projectSuppliers: number
    comments: number
    diffNotifications: number
  }

  export type GlobalSupplierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectSuppliers?: boolean | GlobalSupplierCountOutputTypeCountProjectSuppliersArgs
    comments?: boolean | GlobalSupplierCountOutputTypeCountCommentsArgs
    diffNotifications?: boolean | GlobalSupplierCountOutputTypeCountDiffNotificationsArgs
  }

  // Custom InputTypes
  /**
   * GlobalSupplierCountOutputType without action
   */
  export type GlobalSupplierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplierCountOutputType
     */
    select?: GlobalSupplierCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GlobalSupplierCountOutputType without action
   */
  export type GlobalSupplierCountOutputTypeCountProjectSuppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectSupplierWhereInput
  }

  /**
   * GlobalSupplierCountOutputType without action
   */
  export type GlobalSupplierCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * GlobalSupplierCountOutputType without action
   */
  export type GlobalSupplierCountOutputTypeCountDiffNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiffNotificationWhereInput
  }


  /**
   * Count Type ProjectSupplierCountOutputType
   */

  export type ProjectSupplierCountOutputType = {
    comments: number
  }

  export type ProjectSupplierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | ProjectSupplierCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * ProjectSupplierCountOutputType without action
   */
  export type ProjectSupplierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplierCountOutputType
     */
    select?: ProjectSupplierCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectSupplierCountOutputType without action
   */
  export type ProjectSupplierCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projects?: boolean | User$projectsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    projectMembers?: boolean | User$projectMembersArgs<ExtArgs>
    createdMaterials?: boolean | User$createdMaterialsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | User$projectsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    projectMembers?: boolean | User$projectMembersArgs<ExtArgs>
    createdMaterials?: boolean | User$createdMaterialsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      projectMembers: Prisma.$ProjectMemberPayload<ExtArgs>[]
      createdMaterials: Prisma.$GlobalMaterialPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    projectMembers<T extends User$projectMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$projectMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany"> | Null>
    createdMaterials<T extends User$createdMaterialsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdMaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.projectMembers
   */
  export type User$projectMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    cursor?: ProjectMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * User.createdMaterials
   */
  export type User$createdMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    where?: GlobalMaterialWhereInput
    orderBy?: GlobalMaterialOrderByWithRelationInput | GlobalMaterialOrderByWithRelationInput[]
    cursor?: GlobalMaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GlobalMaterialScalarFieldEnum | GlobalMaterialScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    budget: number | null
  }

  export type ProjectSumAggregateOutputType = {
    budget: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    location: string | null
    status: string | null
    budget: number | null
    createdAt: Date | null
    updatedAt: Date | null
    responsibleId: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    location: string | null
    status: string | null
    budget: number | null
    createdAt: Date | null
    updatedAt: Date | null
    responsibleId: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    startDate: number
    endDate: number
    location: number
    status: number
    budget: number
    createdAt: number
    updatedAt: number
    responsibleId: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    budget?: true
  }

  export type ProjectSumAggregateInputType = {
    budget?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    location?: true
    status?: true
    budget?: true
    createdAt?: true
    updatedAt?: true
    responsibleId?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    location?: true
    status?: true
    budget?: true
    createdAt?: true
    updatedAt?: true
    responsibleId?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    location?: true
    status?: true
    budget?: true
    createdAt?: true
    updatedAt?: true
    responsibleId?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    startDate: Date
    endDate: Date
    location: string
    status: string
    budget: number | null
    createdAt: Date
    updatedAt: Date
    responsibleId: string
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    status?: boolean
    budget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    responsibleId?: boolean
    responsible?: boolean | UserDefaultArgs<ExtArgs>
    materials?: boolean | Project$materialsArgs<ExtArgs>
    suppliers?: boolean | Project$suppliersArgs<ExtArgs>
    members?: boolean | Project$membersArgs<ExtArgs>
    comments?: boolean | Project$commentsArgs<ExtArgs>
    diffNotifications?: boolean | Project$diffNotificationsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    status?: boolean
    budget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    responsibleId?: boolean
    responsible?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    location?: boolean
    status?: boolean
    budget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    responsibleId?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    responsible?: boolean | UserDefaultArgs<ExtArgs>
    materials?: boolean | Project$materialsArgs<ExtArgs>
    suppliers?: boolean | Project$suppliersArgs<ExtArgs>
    members?: boolean | Project$membersArgs<ExtArgs>
    comments?: boolean | Project$commentsArgs<ExtArgs>
    diffNotifications?: boolean | Project$diffNotificationsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    responsible?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      responsible: Prisma.$UserPayload<ExtArgs>
      materials: Prisma.$ProjectMaterialPayload<ExtArgs>[]
      suppliers: Prisma.$ProjectSupplierPayload<ExtArgs>[]
      members: Prisma.$ProjectMemberPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      diffNotifications: Prisma.$DiffNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      startDate: Date
      endDate: Date
      location: string
      status: string
      budget: number | null
      createdAt: Date
      updatedAt: Date
      responsibleId: string
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    responsible<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    materials<T extends Project$materialsArgs<ExtArgs> = {}>(args?: Subset<T, Project$materialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "findMany"> | Null>
    suppliers<T extends Project$suppliersArgs<ExtArgs> = {}>(args?: Subset<T, Project$suppliersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "findMany"> | Null>
    members<T extends Project$membersArgs<ExtArgs> = {}>(args?: Subset<T, Project$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Project$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    diffNotifications<T extends Project$diffNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, Project$diffNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly endDate: FieldRef<"Project", 'DateTime'>
    readonly location: FieldRef<"Project", 'String'>
    readonly status: FieldRef<"Project", 'String'>
    readonly budget: FieldRef<"Project", 'Float'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly responsibleId: FieldRef<"Project", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.materials
   */
  export type Project$materialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    where?: ProjectMaterialWhereInput
    orderBy?: ProjectMaterialOrderByWithRelationInput | ProjectMaterialOrderByWithRelationInput[]
    cursor?: ProjectMaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMaterialScalarFieldEnum | ProjectMaterialScalarFieldEnum[]
  }

  /**
   * Project.suppliers
   */
  export type Project$suppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    where?: ProjectSupplierWhereInput
    orderBy?: ProjectSupplierOrderByWithRelationInput | ProjectSupplierOrderByWithRelationInput[]
    cursor?: ProjectSupplierWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectSupplierScalarFieldEnum | ProjectSupplierScalarFieldEnum[]
  }

  /**
   * Project.members
   */
  export type Project$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    cursor?: ProjectMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * Project.comments
   */
  export type Project$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Project.diffNotifications
   */
  export type Project$diffNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    where?: DiffNotificationWhereInput
    orderBy?: DiffNotificationOrderByWithRelationInput | DiffNotificationOrderByWithRelationInput[]
    cursor?: DiffNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiffNotificationScalarFieldEnum | DiffNotificationScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model ProjectMember
   */

  export type AggregateProjectMember = {
    _count: ProjectMemberCountAggregateOutputType | null
    _min: ProjectMemberMinAggregateOutputType | null
    _max: ProjectMemberMaxAggregateOutputType | null
  }

  export type ProjectMemberMinAggregateOutputType = {
    id: string | null
    role: string | null
    createdAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectMemberMaxAggregateOutputType = {
    id: string | null
    role: string | null
    createdAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectMemberCountAggregateOutputType = {
    id: number
    role: number
    createdAt: number
    userId: number
    projectId: number
    _all: number
  }


  export type ProjectMemberMinAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    userId?: true
    projectId?: true
  }

  export type ProjectMemberMaxAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    userId?: true
    projectId?: true
  }

  export type ProjectMemberCountAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    userId?: true
    projectId?: true
    _all?: true
  }

  export type ProjectMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMember to aggregate.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectMembers
    **/
    _count?: true | ProjectMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMemberMaxAggregateInputType
  }

  export type GetProjectMemberAggregateType<T extends ProjectMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectMember[P]>
      : GetScalarType<T[P], AggregateProjectMember[P]>
  }




  export type ProjectMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithAggregationInput | ProjectMemberOrderByWithAggregationInput[]
    by: ProjectMemberScalarFieldEnum[] | ProjectMemberScalarFieldEnum
    having?: ProjectMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectMemberCountAggregateInputType | true
    _min?: ProjectMemberMinAggregateInputType
    _max?: ProjectMemberMaxAggregateInputType
  }

  export type ProjectMemberGroupByOutputType = {
    id: string
    role: string
    createdAt: Date
    userId: string
    projectId: string
    _count: ProjectMemberCountAggregateOutputType | null
    _min: ProjectMemberMinAggregateOutputType | null
    _max: ProjectMemberMaxAggregateOutputType | null
  }

  type GetProjectMemberGroupByPayload<T extends ProjectMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>
        }
      >
    >


  export type ProjectMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMember"]>

  export type ProjectMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMember"]>

  export type ProjectMemberSelectScalar = {
    id?: boolean
    role?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
  }

  export type ProjectMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: string
      createdAt: Date
      userId: string
      projectId: string
    }, ExtArgs["result"]["projectMember"]>
    composites: {}
  }

  type ProjectMemberGetPayload<S extends boolean | null | undefined | ProjectMemberDefaultArgs> = $Result.GetResult<Prisma.$ProjectMemberPayload, S>

  type ProjectMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectMemberCountAggregateInputType | true
    }

  export interface ProjectMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectMember'], meta: { name: 'ProjectMember' } }
    /**
     * Find zero or one ProjectMember that matches the filter.
     * @param {ProjectMemberFindUniqueArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectMemberFindUniqueArgs>(args: SelectSubset<T, ProjectMemberFindUniqueArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectMemberFindUniqueOrThrowArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindFirstArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectMemberFindFirstArgs>(args?: SelectSubset<T, ProjectMemberFindFirstArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindFirstOrThrowArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectMembers
     * const projectMembers = await prisma.projectMember.findMany()
     * 
     * // Get first 10 ProjectMembers
     * const projectMembers = await prisma.projectMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectMemberWithIdOnly = await prisma.projectMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectMemberFindManyArgs>(args?: SelectSubset<T, ProjectMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectMember.
     * @param {ProjectMemberCreateArgs} args - Arguments to create a ProjectMember.
     * @example
     * // Create one ProjectMember
     * const ProjectMember = await prisma.projectMember.create({
     *   data: {
     *     // ... data to create a ProjectMember
     *   }
     * })
     * 
     */
    create<T extends ProjectMemberCreateArgs>(args: SelectSubset<T, ProjectMemberCreateArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectMembers.
     * @param {ProjectMemberCreateManyArgs} args - Arguments to create many ProjectMembers.
     * @example
     * // Create many ProjectMembers
     * const projectMember = await prisma.projectMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectMemberCreateManyArgs>(args?: SelectSubset<T, ProjectMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectMembers and returns the data saved in the database.
     * @param {ProjectMemberCreateManyAndReturnArgs} args - Arguments to create many ProjectMembers.
     * @example
     * // Create many ProjectMembers
     * const projectMember = await prisma.projectMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectMembers and only return the `id`
     * const projectMemberWithIdOnly = await prisma.projectMember.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectMember.
     * @param {ProjectMemberDeleteArgs} args - Arguments to delete one ProjectMember.
     * @example
     * // Delete one ProjectMember
     * const ProjectMember = await prisma.projectMember.delete({
     *   where: {
     *     // ... filter to delete one ProjectMember
     *   }
     * })
     * 
     */
    delete<T extends ProjectMemberDeleteArgs>(args: SelectSubset<T, ProjectMemberDeleteArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectMember.
     * @param {ProjectMemberUpdateArgs} args - Arguments to update one ProjectMember.
     * @example
     * // Update one ProjectMember
     * const projectMember = await prisma.projectMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectMemberUpdateArgs>(args: SelectSubset<T, ProjectMemberUpdateArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectMembers.
     * @param {ProjectMemberDeleteManyArgs} args - Arguments to filter ProjectMembers to delete.
     * @example
     * // Delete a few ProjectMembers
     * const { count } = await prisma.projectMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectMemberDeleteManyArgs>(args?: SelectSubset<T, ProjectMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectMembers
     * const projectMember = await prisma.projectMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectMemberUpdateManyArgs>(args: SelectSubset<T, ProjectMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectMember.
     * @param {ProjectMemberUpsertArgs} args - Arguments to update or create a ProjectMember.
     * @example
     * // Update or create a ProjectMember
     * const projectMember = await prisma.projectMember.upsert({
     *   create: {
     *     // ... data to create a ProjectMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectMember we want to update
     *   }
     * })
     */
    upsert<T extends ProjectMemberUpsertArgs>(args: SelectSubset<T, ProjectMemberUpsertArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberCountArgs} args - Arguments to filter ProjectMembers to count.
     * @example
     * // Count the number of ProjectMembers
     * const count = await prisma.projectMember.count({
     *   where: {
     *     // ... the filter for the ProjectMembers we want to count
     *   }
     * })
    **/
    count<T extends ProjectMemberCountArgs>(
      args?: Subset<T, ProjectMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectMemberAggregateArgs>(args: Subset<T, ProjectMemberAggregateArgs>): Prisma.PrismaPromise<GetProjectMemberAggregateType<T>>

    /**
     * Group by ProjectMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectMemberGroupByArgs['orderBy'] }
        : { orderBy?: ProjectMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectMember model
   */
  readonly fields: ProjectMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectMember model
   */ 
  interface ProjectMemberFieldRefs {
    readonly id: FieldRef<"ProjectMember", 'String'>
    readonly role: FieldRef<"ProjectMember", 'String'>
    readonly createdAt: FieldRef<"ProjectMember", 'DateTime'>
    readonly userId: FieldRef<"ProjectMember", 'String'>
    readonly projectId: FieldRef<"ProjectMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectMember findUnique
   */
  export type ProjectMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember findUniqueOrThrow
   */
  export type ProjectMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember findFirst
   */
  export type ProjectMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMembers.
     */
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember findFirstOrThrow
   */
  export type ProjectMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMembers.
     */
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember findMany
   */
  export type ProjectMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMembers to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember create
   */
  export type ProjectMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectMember.
     */
    data: XOR<ProjectMemberCreateInput, ProjectMemberUncheckedCreateInput>
  }

  /**
   * ProjectMember createMany
   */
  export type ProjectMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectMembers.
     */
    data: ProjectMemberCreateManyInput | ProjectMemberCreateManyInput[]
  }

  /**
   * ProjectMember createManyAndReturn
   */
  export type ProjectMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectMembers.
     */
    data: ProjectMemberCreateManyInput | ProjectMemberCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectMember update
   */
  export type ProjectMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectMember.
     */
    data: XOR<ProjectMemberUpdateInput, ProjectMemberUncheckedUpdateInput>
    /**
     * Choose, which ProjectMember to update.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember updateMany
   */
  export type ProjectMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectMembers.
     */
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyInput>
    /**
     * Filter which ProjectMembers to update
     */
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectMember upsert
   */
  export type ProjectMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectMember to update in case it exists.
     */
    where: ProjectMemberWhereUniqueInput
    /**
     * In case the ProjectMember found by the `where` argument doesn't exist, create a new ProjectMember with this data.
     */
    create: XOR<ProjectMemberCreateInput, ProjectMemberUncheckedCreateInput>
    /**
     * In case the ProjectMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectMemberUpdateInput, ProjectMemberUncheckedUpdateInput>
  }

  /**
   * ProjectMember delete
   */
  export type ProjectMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter which ProjectMember to delete.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember deleteMany
   */
  export type ProjectMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMembers to delete
     */
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectMember without action
   */
  export type ProjectMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
  }


  /**
   * Model GlobalMaterial
   */

  export type AggregateGlobalMaterial = {
    _count: GlobalMaterialCountAggregateOutputType | null
    _avg: GlobalMaterialAvgAggregateOutputType | null
    _sum: GlobalMaterialSumAggregateOutputType | null
    _min: GlobalMaterialMinAggregateOutputType | null
    _max: GlobalMaterialMaxAggregateOutputType | null
  }

  export type GlobalMaterialAvgAggregateOutputType = {
    standardLeadTime: number | null
    version: number | null
  }

  export type GlobalMaterialSumAggregateOutputType = {
    standardLeadTime: number | null
    version: number | null
  }

  export type GlobalMaterialMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    unit: string | null
    specs: string | null
    portfolio: string | null
    standardLeadTime: number | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type GlobalMaterialMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    unit: string | null
    specs: string | null
    portfolio: string | null
    standardLeadTime: number | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type GlobalMaterialCountAggregateOutputType = {
    id: number
    name: number
    category: number
    unit: number
    specs: number
    portfolio: number
    standardLeadTime: number
    version: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type GlobalMaterialAvgAggregateInputType = {
    standardLeadTime?: true
    version?: true
  }

  export type GlobalMaterialSumAggregateInputType = {
    standardLeadTime?: true
    version?: true
  }

  export type GlobalMaterialMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    unit?: true
    specs?: true
    portfolio?: true
    standardLeadTime?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type GlobalMaterialMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    unit?: true
    specs?: true
    portfolio?: true
    standardLeadTime?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type GlobalMaterialCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    unit?: true
    specs?: true
    portfolio?: true
    standardLeadTime?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type GlobalMaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalMaterial to aggregate.
     */
    where?: GlobalMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalMaterials to fetch.
     */
    orderBy?: GlobalMaterialOrderByWithRelationInput | GlobalMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlobalMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GlobalMaterials
    **/
    _count?: true | GlobalMaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GlobalMaterialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GlobalMaterialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlobalMaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlobalMaterialMaxAggregateInputType
  }

  export type GetGlobalMaterialAggregateType<T extends GlobalMaterialAggregateArgs> = {
        [P in keyof T & keyof AggregateGlobalMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlobalMaterial[P]>
      : GetScalarType<T[P], AggregateGlobalMaterial[P]>
  }




  export type GlobalMaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlobalMaterialWhereInput
    orderBy?: GlobalMaterialOrderByWithAggregationInput | GlobalMaterialOrderByWithAggregationInput[]
    by: GlobalMaterialScalarFieldEnum[] | GlobalMaterialScalarFieldEnum
    having?: GlobalMaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlobalMaterialCountAggregateInputType | true
    _avg?: GlobalMaterialAvgAggregateInputType
    _sum?: GlobalMaterialSumAggregateInputType
    _min?: GlobalMaterialMinAggregateInputType
    _max?: GlobalMaterialMaxAggregateInputType
  }

  export type GlobalMaterialGroupByOutputType = {
    id: string
    name: string
    category: string
    unit: string
    specs: string | null
    portfolio: string | null
    standardLeadTime: number | null
    version: number
    createdAt: Date
    updatedAt: Date
    createdById: string
    _count: GlobalMaterialCountAggregateOutputType | null
    _avg: GlobalMaterialAvgAggregateOutputType | null
    _sum: GlobalMaterialSumAggregateOutputType | null
    _min: GlobalMaterialMinAggregateOutputType | null
    _max: GlobalMaterialMaxAggregateOutputType | null
  }

  type GetGlobalMaterialGroupByPayload<T extends GlobalMaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlobalMaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlobalMaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlobalMaterialGroupByOutputType[P]>
            : GetScalarType<T[P], GlobalMaterialGroupByOutputType[P]>
        }
      >
    >


  export type GlobalMaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    unit?: boolean
    specs?: boolean
    portfolio?: boolean
    standardLeadTime?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    projectMaterials?: boolean | GlobalMaterial$projectMaterialsArgs<ExtArgs>
    comments?: boolean | GlobalMaterial$commentsArgs<ExtArgs>
    diffNotifications?: boolean | GlobalMaterial$diffNotificationsArgs<ExtArgs>
    _count?: boolean | GlobalMaterialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["globalMaterial"]>

  export type GlobalMaterialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    unit?: boolean
    specs?: boolean
    portfolio?: boolean
    standardLeadTime?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["globalMaterial"]>

  export type GlobalMaterialSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    unit?: boolean
    specs?: boolean
    portfolio?: boolean
    standardLeadTime?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type GlobalMaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    projectMaterials?: boolean | GlobalMaterial$projectMaterialsArgs<ExtArgs>
    comments?: boolean | GlobalMaterial$commentsArgs<ExtArgs>
    diffNotifications?: boolean | GlobalMaterial$diffNotificationsArgs<ExtArgs>
    _count?: boolean | GlobalMaterialCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GlobalMaterialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GlobalMaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GlobalMaterial"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      projectMaterials: Prisma.$ProjectMaterialPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      diffNotifications: Prisma.$DiffNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string
      unit: string
      specs: string | null
      portfolio: string | null
      standardLeadTime: number | null
      version: number
      createdAt: Date
      updatedAt: Date
      createdById: string
    }, ExtArgs["result"]["globalMaterial"]>
    composites: {}
  }

  type GlobalMaterialGetPayload<S extends boolean | null | undefined | GlobalMaterialDefaultArgs> = $Result.GetResult<Prisma.$GlobalMaterialPayload, S>

  type GlobalMaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GlobalMaterialFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GlobalMaterialCountAggregateInputType | true
    }

  export interface GlobalMaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GlobalMaterial'], meta: { name: 'GlobalMaterial' } }
    /**
     * Find zero or one GlobalMaterial that matches the filter.
     * @param {GlobalMaterialFindUniqueArgs} args - Arguments to find a GlobalMaterial
     * @example
     * // Get one GlobalMaterial
     * const globalMaterial = await prisma.globalMaterial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GlobalMaterialFindUniqueArgs>(args: SelectSubset<T, GlobalMaterialFindUniqueArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GlobalMaterial that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GlobalMaterialFindUniqueOrThrowArgs} args - Arguments to find a GlobalMaterial
     * @example
     * // Get one GlobalMaterial
     * const globalMaterial = await prisma.globalMaterial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GlobalMaterialFindUniqueOrThrowArgs>(args: SelectSubset<T, GlobalMaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GlobalMaterial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalMaterialFindFirstArgs} args - Arguments to find a GlobalMaterial
     * @example
     * // Get one GlobalMaterial
     * const globalMaterial = await prisma.globalMaterial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GlobalMaterialFindFirstArgs>(args?: SelectSubset<T, GlobalMaterialFindFirstArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GlobalMaterial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalMaterialFindFirstOrThrowArgs} args - Arguments to find a GlobalMaterial
     * @example
     * // Get one GlobalMaterial
     * const globalMaterial = await prisma.globalMaterial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GlobalMaterialFindFirstOrThrowArgs>(args?: SelectSubset<T, GlobalMaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GlobalMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalMaterialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GlobalMaterials
     * const globalMaterials = await prisma.globalMaterial.findMany()
     * 
     * // Get first 10 GlobalMaterials
     * const globalMaterials = await prisma.globalMaterial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const globalMaterialWithIdOnly = await prisma.globalMaterial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GlobalMaterialFindManyArgs>(args?: SelectSubset<T, GlobalMaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GlobalMaterial.
     * @param {GlobalMaterialCreateArgs} args - Arguments to create a GlobalMaterial.
     * @example
     * // Create one GlobalMaterial
     * const GlobalMaterial = await prisma.globalMaterial.create({
     *   data: {
     *     // ... data to create a GlobalMaterial
     *   }
     * })
     * 
     */
    create<T extends GlobalMaterialCreateArgs>(args: SelectSubset<T, GlobalMaterialCreateArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GlobalMaterials.
     * @param {GlobalMaterialCreateManyArgs} args - Arguments to create many GlobalMaterials.
     * @example
     * // Create many GlobalMaterials
     * const globalMaterial = await prisma.globalMaterial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GlobalMaterialCreateManyArgs>(args?: SelectSubset<T, GlobalMaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GlobalMaterials and returns the data saved in the database.
     * @param {GlobalMaterialCreateManyAndReturnArgs} args - Arguments to create many GlobalMaterials.
     * @example
     * // Create many GlobalMaterials
     * const globalMaterial = await prisma.globalMaterial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GlobalMaterials and only return the `id`
     * const globalMaterialWithIdOnly = await prisma.globalMaterial.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GlobalMaterialCreateManyAndReturnArgs>(args?: SelectSubset<T, GlobalMaterialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GlobalMaterial.
     * @param {GlobalMaterialDeleteArgs} args - Arguments to delete one GlobalMaterial.
     * @example
     * // Delete one GlobalMaterial
     * const GlobalMaterial = await prisma.globalMaterial.delete({
     *   where: {
     *     // ... filter to delete one GlobalMaterial
     *   }
     * })
     * 
     */
    delete<T extends GlobalMaterialDeleteArgs>(args: SelectSubset<T, GlobalMaterialDeleteArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GlobalMaterial.
     * @param {GlobalMaterialUpdateArgs} args - Arguments to update one GlobalMaterial.
     * @example
     * // Update one GlobalMaterial
     * const globalMaterial = await prisma.globalMaterial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GlobalMaterialUpdateArgs>(args: SelectSubset<T, GlobalMaterialUpdateArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GlobalMaterials.
     * @param {GlobalMaterialDeleteManyArgs} args - Arguments to filter GlobalMaterials to delete.
     * @example
     * // Delete a few GlobalMaterials
     * const { count } = await prisma.globalMaterial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GlobalMaterialDeleteManyArgs>(args?: SelectSubset<T, GlobalMaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlobalMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalMaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GlobalMaterials
     * const globalMaterial = await prisma.globalMaterial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GlobalMaterialUpdateManyArgs>(args: SelectSubset<T, GlobalMaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GlobalMaterial.
     * @param {GlobalMaterialUpsertArgs} args - Arguments to update or create a GlobalMaterial.
     * @example
     * // Update or create a GlobalMaterial
     * const globalMaterial = await prisma.globalMaterial.upsert({
     *   create: {
     *     // ... data to create a GlobalMaterial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GlobalMaterial we want to update
     *   }
     * })
     */
    upsert<T extends GlobalMaterialUpsertArgs>(args: SelectSubset<T, GlobalMaterialUpsertArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GlobalMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalMaterialCountArgs} args - Arguments to filter GlobalMaterials to count.
     * @example
     * // Count the number of GlobalMaterials
     * const count = await prisma.globalMaterial.count({
     *   where: {
     *     // ... the filter for the GlobalMaterials we want to count
     *   }
     * })
    **/
    count<T extends GlobalMaterialCountArgs>(
      args?: Subset<T, GlobalMaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlobalMaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GlobalMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalMaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlobalMaterialAggregateArgs>(args: Subset<T, GlobalMaterialAggregateArgs>): Prisma.PrismaPromise<GetGlobalMaterialAggregateType<T>>

    /**
     * Group by GlobalMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalMaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlobalMaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlobalMaterialGroupByArgs['orderBy'] }
        : { orderBy?: GlobalMaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlobalMaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlobalMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GlobalMaterial model
   */
  readonly fields: GlobalMaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GlobalMaterial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlobalMaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    projectMaterials<T extends GlobalMaterial$projectMaterialsArgs<ExtArgs> = {}>(args?: Subset<T, GlobalMaterial$projectMaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends GlobalMaterial$commentsArgs<ExtArgs> = {}>(args?: Subset<T, GlobalMaterial$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    diffNotifications<T extends GlobalMaterial$diffNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, GlobalMaterial$diffNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GlobalMaterial model
   */ 
  interface GlobalMaterialFieldRefs {
    readonly id: FieldRef<"GlobalMaterial", 'String'>
    readonly name: FieldRef<"GlobalMaterial", 'String'>
    readonly category: FieldRef<"GlobalMaterial", 'String'>
    readonly unit: FieldRef<"GlobalMaterial", 'String'>
    readonly specs: FieldRef<"GlobalMaterial", 'String'>
    readonly portfolio: FieldRef<"GlobalMaterial", 'String'>
    readonly standardLeadTime: FieldRef<"GlobalMaterial", 'Int'>
    readonly version: FieldRef<"GlobalMaterial", 'Int'>
    readonly createdAt: FieldRef<"GlobalMaterial", 'DateTime'>
    readonly updatedAt: FieldRef<"GlobalMaterial", 'DateTime'>
    readonly createdById: FieldRef<"GlobalMaterial", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GlobalMaterial findUnique
   */
  export type GlobalMaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    /**
     * Filter, which GlobalMaterial to fetch.
     */
    where: GlobalMaterialWhereUniqueInput
  }

  /**
   * GlobalMaterial findUniqueOrThrow
   */
  export type GlobalMaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    /**
     * Filter, which GlobalMaterial to fetch.
     */
    where: GlobalMaterialWhereUniqueInput
  }

  /**
   * GlobalMaterial findFirst
   */
  export type GlobalMaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    /**
     * Filter, which GlobalMaterial to fetch.
     */
    where?: GlobalMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalMaterials to fetch.
     */
    orderBy?: GlobalMaterialOrderByWithRelationInput | GlobalMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalMaterials.
     */
    cursor?: GlobalMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalMaterials.
     */
    distinct?: GlobalMaterialScalarFieldEnum | GlobalMaterialScalarFieldEnum[]
  }

  /**
   * GlobalMaterial findFirstOrThrow
   */
  export type GlobalMaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    /**
     * Filter, which GlobalMaterial to fetch.
     */
    where?: GlobalMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalMaterials to fetch.
     */
    orderBy?: GlobalMaterialOrderByWithRelationInput | GlobalMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalMaterials.
     */
    cursor?: GlobalMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalMaterials.
     */
    distinct?: GlobalMaterialScalarFieldEnum | GlobalMaterialScalarFieldEnum[]
  }

  /**
   * GlobalMaterial findMany
   */
  export type GlobalMaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    /**
     * Filter, which GlobalMaterials to fetch.
     */
    where?: GlobalMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalMaterials to fetch.
     */
    orderBy?: GlobalMaterialOrderByWithRelationInput | GlobalMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GlobalMaterials.
     */
    cursor?: GlobalMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalMaterials.
     */
    skip?: number
    distinct?: GlobalMaterialScalarFieldEnum | GlobalMaterialScalarFieldEnum[]
  }

  /**
   * GlobalMaterial create
   */
  export type GlobalMaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a GlobalMaterial.
     */
    data: XOR<GlobalMaterialCreateInput, GlobalMaterialUncheckedCreateInput>
  }

  /**
   * GlobalMaterial createMany
   */
  export type GlobalMaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GlobalMaterials.
     */
    data: GlobalMaterialCreateManyInput | GlobalMaterialCreateManyInput[]
  }

  /**
   * GlobalMaterial createManyAndReturn
   */
  export type GlobalMaterialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GlobalMaterials.
     */
    data: GlobalMaterialCreateManyInput | GlobalMaterialCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GlobalMaterial update
   */
  export type GlobalMaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a GlobalMaterial.
     */
    data: XOR<GlobalMaterialUpdateInput, GlobalMaterialUncheckedUpdateInput>
    /**
     * Choose, which GlobalMaterial to update.
     */
    where: GlobalMaterialWhereUniqueInput
  }

  /**
   * GlobalMaterial updateMany
   */
  export type GlobalMaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GlobalMaterials.
     */
    data: XOR<GlobalMaterialUpdateManyMutationInput, GlobalMaterialUncheckedUpdateManyInput>
    /**
     * Filter which GlobalMaterials to update
     */
    where?: GlobalMaterialWhereInput
  }

  /**
   * GlobalMaterial upsert
   */
  export type GlobalMaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the GlobalMaterial to update in case it exists.
     */
    where: GlobalMaterialWhereUniqueInput
    /**
     * In case the GlobalMaterial found by the `where` argument doesn't exist, create a new GlobalMaterial with this data.
     */
    create: XOR<GlobalMaterialCreateInput, GlobalMaterialUncheckedCreateInput>
    /**
     * In case the GlobalMaterial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlobalMaterialUpdateInput, GlobalMaterialUncheckedUpdateInput>
  }

  /**
   * GlobalMaterial delete
   */
  export type GlobalMaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    /**
     * Filter which GlobalMaterial to delete.
     */
    where: GlobalMaterialWhereUniqueInput
  }

  /**
   * GlobalMaterial deleteMany
   */
  export type GlobalMaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalMaterials to delete
     */
    where?: GlobalMaterialWhereInput
  }

  /**
   * GlobalMaterial.projectMaterials
   */
  export type GlobalMaterial$projectMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    where?: ProjectMaterialWhereInput
    orderBy?: ProjectMaterialOrderByWithRelationInput | ProjectMaterialOrderByWithRelationInput[]
    cursor?: ProjectMaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMaterialScalarFieldEnum | ProjectMaterialScalarFieldEnum[]
  }

  /**
   * GlobalMaterial.comments
   */
  export type GlobalMaterial$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * GlobalMaterial.diffNotifications
   */
  export type GlobalMaterial$diffNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    where?: DiffNotificationWhereInput
    orderBy?: DiffNotificationOrderByWithRelationInput | DiffNotificationOrderByWithRelationInput[]
    cursor?: DiffNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiffNotificationScalarFieldEnum | DiffNotificationScalarFieldEnum[]
  }

  /**
   * GlobalMaterial without action
   */
  export type GlobalMaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
  }


  /**
   * Model ProjectMaterial
   */

  export type AggregateProjectMaterial = {
    _count: ProjectMaterialCountAggregateOutputType | null
    _avg: ProjectMaterialAvgAggregateOutputType | null
    _sum: ProjectMaterialSumAggregateOutputType | null
    _min: ProjectMaterialMinAggregateOutputType | null
    _max: ProjectMaterialMaxAggregateOutputType | null
  }

  export type ProjectMaterialAvgAggregateOutputType = {
    quantity: number | null
    specialPrice: number | null
    lastSyncVersion: number | null
  }

  export type ProjectMaterialSumAggregateOutputType = {
    quantity: number | null
    specialPrice: number | null
    lastSyncVersion: number | null
  }

  export type ProjectMaterialMinAggregateOutputType = {
    id: string | null
    quantity: number | null
    phase: string | null
    location: string | null
    deliveryTime: Date | null
    pickupTime: Date | null
    needs: string | null
    specialPrice: number | null
    notes: string | null
    hasOverride: boolean | null
    overriddenFields: string | null
    lastSyncVersion: number | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    globalMaterialId: string | null
  }

  export type ProjectMaterialMaxAggregateOutputType = {
    id: string | null
    quantity: number | null
    phase: string | null
    location: string | null
    deliveryTime: Date | null
    pickupTime: Date | null
    needs: string | null
    specialPrice: number | null
    notes: string | null
    hasOverride: boolean | null
    overriddenFields: string | null
    lastSyncVersion: number | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    globalMaterialId: string | null
  }

  export type ProjectMaterialCountAggregateOutputType = {
    id: number
    quantity: number
    phase: number
    location: number
    deliveryTime: number
    pickupTime: number
    needs: number
    specialPrice: number
    notes: number
    hasOverride: number
    overriddenFields: number
    lastSyncVersion: number
    createdAt: number
    updatedAt: number
    projectId: number
    globalMaterialId: number
    _all: number
  }


  export type ProjectMaterialAvgAggregateInputType = {
    quantity?: true
    specialPrice?: true
    lastSyncVersion?: true
  }

  export type ProjectMaterialSumAggregateInputType = {
    quantity?: true
    specialPrice?: true
    lastSyncVersion?: true
  }

  export type ProjectMaterialMinAggregateInputType = {
    id?: true
    quantity?: true
    phase?: true
    location?: true
    deliveryTime?: true
    pickupTime?: true
    needs?: true
    specialPrice?: true
    notes?: true
    hasOverride?: true
    overriddenFields?: true
    lastSyncVersion?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    globalMaterialId?: true
  }

  export type ProjectMaterialMaxAggregateInputType = {
    id?: true
    quantity?: true
    phase?: true
    location?: true
    deliveryTime?: true
    pickupTime?: true
    needs?: true
    specialPrice?: true
    notes?: true
    hasOverride?: true
    overriddenFields?: true
    lastSyncVersion?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    globalMaterialId?: true
  }

  export type ProjectMaterialCountAggregateInputType = {
    id?: true
    quantity?: true
    phase?: true
    location?: true
    deliveryTime?: true
    pickupTime?: true
    needs?: true
    specialPrice?: true
    notes?: true
    hasOverride?: true
    overriddenFields?: true
    lastSyncVersion?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    globalMaterialId?: true
    _all?: true
  }

  export type ProjectMaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMaterial to aggregate.
     */
    where?: ProjectMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMaterials to fetch.
     */
    orderBy?: ProjectMaterialOrderByWithRelationInput | ProjectMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectMaterials
    **/
    _count?: true | ProjectMaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectMaterialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectMaterialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaterialMaxAggregateInputType
  }

  export type GetProjectMaterialAggregateType<T extends ProjectMaterialAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectMaterial[P]>
      : GetScalarType<T[P], AggregateProjectMaterial[P]>
  }




  export type ProjectMaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMaterialWhereInput
    orderBy?: ProjectMaterialOrderByWithAggregationInput | ProjectMaterialOrderByWithAggregationInput[]
    by: ProjectMaterialScalarFieldEnum[] | ProjectMaterialScalarFieldEnum
    having?: ProjectMaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectMaterialCountAggregateInputType | true
    _avg?: ProjectMaterialAvgAggregateInputType
    _sum?: ProjectMaterialSumAggregateInputType
    _min?: ProjectMaterialMinAggregateInputType
    _max?: ProjectMaterialMaxAggregateInputType
  }

  export type ProjectMaterialGroupByOutputType = {
    id: string
    quantity: number
    phase: string
    location: string | null
    deliveryTime: Date | null
    pickupTime: Date | null
    needs: string | null
    specialPrice: number | null
    notes: string | null
    hasOverride: boolean
    overriddenFields: string | null
    lastSyncVersion: number
    createdAt: Date
    updatedAt: Date
    projectId: string
    globalMaterialId: string
    _count: ProjectMaterialCountAggregateOutputType | null
    _avg: ProjectMaterialAvgAggregateOutputType | null
    _sum: ProjectMaterialSumAggregateOutputType | null
    _min: ProjectMaterialMinAggregateOutputType | null
    _max: ProjectMaterialMaxAggregateOutputType | null
  }

  type GetProjectMaterialGroupByPayload<T extends ProjectMaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectMaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectMaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectMaterialGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectMaterialGroupByOutputType[P]>
        }
      >
    >


  export type ProjectMaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    phase?: boolean
    location?: boolean
    deliveryTime?: boolean
    pickupTime?: boolean
    needs?: boolean
    specialPrice?: boolean
    notes?: boolean
    hasOverride?: boolean
    overriddenFields?: boolean
    lastSyncVersion?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    globalMaterialId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalMaterial?: boolean | GlobalMaterialDefaultArgs<ExtArgs>
    comments?: boolean | ProjectMaterial$commentsArgs<ExtArgs>
    _count?: boolean | ProjectMaterialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMaterial"]>

  export type ProjectMaterialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    phase?: boolean
    location?: boolean
    deliveryTime?: boolean
    pickupTime?: boolean
    needs?: boolean
    specialPrice?: boolean
    notes?: boolean
    hasOverride?: boolean
    overriddenFields?: boolean
    lastSyncVersion?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    globalMaterialId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalMaterial?: boolean | GlobalMaterialDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMaterial"]>

  export type ProjectMaterialSelectScalar = {
    id?: boolean
    quantity?: boolean
    phase?: boolean
    location?: boolean
    deliveryTime?: boolean
    pickupTime?: boolean
    needs?: boolean
    specialPrice?: boolean
    notes?: boolean
    hasOverride?: boolean
    overriddenFields?: boolean
    lastSyncVersion?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    globalMaterialId?: boolean
  }

  export type ProjectMaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalMaterial?: boolean | GlobalMaterialDefaultArgs<ExtArgs>
    comments?: boolean | ProjectMaterial$commentsArgs<ExtArgs>
    _count?: boolean | ProjectMaterialCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectMaterialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalMaterial?: boolean | GlobalMaterialDefaultArgs<ExtArgs>
  }

  export type $ProjectMaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectMaterial"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      globalMaterial: Prisma.$GlobalMaterialPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quantity: number
      phase: string
      location: string | null
      deliveryTime: Date | null
      pickupTime: Date | null
      needs: string | null
      specialPrice: number | null
      notes: string | null
      hasOverride: boolean
      overriddenFields: string | null
      lastSyncVersion: number
      createdAt: Date
      updatedAt: Date
      projectId: string
      globalMaterialId: string
    }, ExtArgs["result"]["projectMaterial"]>
    composites: {}
  }

  type ProjectMaterialGetPayload<S extends boolean | null | undefined | ProjectMaterialDefaultArgs> = $Result.GetResult<Prisma.$ProjectMaterialPayload, S>

  type ProjectMaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectMaterialFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectMaterialCountAggregateInputType | true
    }

  export interface ProjectMaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectMaterial'], meta: { name: 'ProjectMaterial' } }
    /**
     * Find zero or one ProjectMaterial that matches the filter.
     * @param {ProjectMaterialFindUniqueArgs} args - Arguments to find a ProjectMaterial
     * @example
     * // Get one ProjectMaterial
     * const projectMaterial = await prisma.projectMaterial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectMaterialFindUniqueArgs>(args: SelectSubset<T, ProjectMaterialFindUniqueArgs<ExtArgs>>): Prisma__ProjectMaterialClient<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectMaterial that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectMaterialFindUniqueOrThrowArgs} args - Arguments to find a ProjectMaterial
     * @example
     * // Get one ProjectMaterial
     * const projectMaterial = await prisma.projectMaterial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectMaterialFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectMaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectMaterialClient<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectMaterial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMaterialFindFirstArgs} args - Arguments to find a ProjectMaterial
     * @example
     * // Get one ProjectMaterial
     * const projectMaterial = await prisma.projectMaterial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectMaterialFindFirstArgs>(args?: SelectSubset<T, ProjectMaterialFindFirstArgs<ExtArgs>>): Prisma__ProjectMaterialClient<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectMaterial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMaterialFindFirstOrThrowArgs} args - Arguments to find a ProjectMaterial
     * @example
     * // Get one ProjectMaterial
     * const projectMaterial = await prisma.projectMaterial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectMaterialFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectMaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectMaterialClient<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMaterialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectMaterials
     * const projectMaterials = await prisma.projectMaterial.findMany()
     * 
     * // Get first 10 ProjectMaterials
     * const projectMaterials = await prisma.projectMaterial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectMaterialWithIdOnly = await prisma.projectMaterial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectMaterialFindManyArgs>(args?: SelectSubset<T, ProjectMaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectMaterial.
     * @param {ProjectMaterialCreateArgs} args - Arguments to create a ProjectMaterial.
     * @example
     * // Create one ProjectMaterial
     * const ProjectMaterial = await prisma.projectMaterial.create({
     *   data: {
     *     // ... data to create a ProjectMaterial
     *   }
     * })
     * 
     */
    create<T extends ProjectMaterialCreateArgs>(args: SelectSubset<T, ProjectMaterialCreateArgs<ExtArgs>>): Prisma__ProjectMaterialClient<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectMaterials.
     * @param {ProjectMaterialCreateManyArgs} args - Arguments to create many ProjectMaterials.
     * @example
     * // Create many ProjectMaterials
     * const projectMaterial = await prisma.projectMaterial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectMaterialCreateManyArgs>(args?: SelectSubset<T, ProjectMaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectMaterials and returns the data saved in the database.
     * @param {ProjectMaterialCreateManyAndReturnArgs} args - Arguments to create many ProjectMaterials.
     * @example
     * // Create many ProjectMaterials
     * const projectMaterial = await prisma.projectMaterial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectMaterials and only return the `id`
     * const projectMaterialWithIdOnly = await prisma.projectMaterial.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectMaterialCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectMaterialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectMaterial.
     * @param {ProjectMaterialDeleteArgs} args - Arguments to delete one ProjectMaterial.
     * @example
     * // Delete one ProjectMaterial
     * const ProjectMaterial = await prisma.projectMaterial.delete({
     *   where: {
     *     // ... filter to delete one ProjectMaterial
     *   }
     * })
     * 
     */
    delete<T extends ProjectMaterialDeleteArgs>(args: SelectSubset<T, ProjectMaterialDeleteArgs<ExtArgs>>): Prisma__ProjectMaterialClient<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectMaterial.
     * @param {ProjectMaterialUpdateArgs} args - Arguments to update one ProjectMaterial.
     * @example
     * // Update one ProjectMaterial
     * const projectMaterial = await prisma.projectMaterial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectMaterialUpdateArgs>(args: SelectSubset<T, ProjectMaterialUpdateArgs<ExtArgs>>): Prisma__ProjectMaterialClient<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectMaterials.
     * @param {ProjectMaterialDeleteManyArgs} args - Arguments to filter ProjectMaterials to delete.
     * @example
     * // Delete a few ProjectMaterials
     * const { count } = await prisma.projectMaterial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectMaterialDeleteManyArgs>(args?: SelectSubset<T, ProjectMaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectMaterials
     * const projectMaterial = await prisma.projectMaterial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectMaterialUpdateManyArgs>(args: SelectSubset<T, ProjectMaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectMaterial.
     * @param {ProjectMaterialUpsertArgs} args - Arguments to update or create a ProjectMaterial.
     * @example
     * // Update or create a ProjectMaterial
     * const projectMaterial = await prisma.projectMaterial.upsert({
     *   create: {
     *     // ... data to create a ProjectMaterial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectMaterial we want to update
     *   }
     * })
     */
    upsert<T extends ProjectMaterialUpsertArgs>(args: SelectSubset<T, ProjectMaterialUpsertArgs<ExtArgs>>): Prisma__ProjectMaterialClient<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMaterialCountArgs} args - Arguments to filter ProjectMaterials to count.
     * @example
     * // Count the number of ProjectMaterials
     * const count = await prisma.projectMaterial.count({
     *   where: {
     *     // ... the filter for the ProjectMaterials we want to count
     *   }
     * })
    **/
    count<T extends ProjectMaterialCountArgs>(
      args?: Subset<T, ProjectMaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectMaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectMaterialAggregateArgs>(args: Subset<T, ProjectMaterialAggregateArgs>): Prisma.PrismaPromise<GetProjectMaterialAggregateType<T>>

    /**
     * Group by ProjectMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectMaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectMaterialGroupByArgs['orderBy'] }
        : { orderBy?: ProjectMaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectMaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectMaterial model
   */
  readonly fields: ProjectMaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectMaterial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectMaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    globalMaterial<T extends GlobalMaterialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GlobalMaterialDefaultArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends ProjectMaterial$commentsArgs<ExtArgs> = {}>(args?: Subset<T, ProjectMaterial$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectMaterial model
   */ 
  interface ProjectMaterialFieldRefs {
    readonly id: FieldRef<"ProjectMaterial", 'String'>
    readonly quantity: FieldRef<"ProjectMaterial", 'Int'>
    readonly phase: FieldRef<"ProjectMaterial", 'String'>
    readonly location: FieldRef<"ProjectMaterial", 'String'>
    readonly deliveryTime: FieldRef<"ProjectMaterial", 'DateTime'>
    readonly pickupTime: FieldRef<"ProjectMaterial", 'DateTime'>
    readonly needs: FieldRef<"ProjectMaterial", 'String'>
    readonly specialPrice: FieldRef<"ProjectMaterial", 'Float'>
    readonly notes: FieldRef<"ProjectMaterial", 'String'>
    readonly hasOverride: FieldRef<"ProjectMaterial", 'Boolean'>
    readonly overriddenFields: FieldRef<"ProjectMaterial", 'String'>
    readonly lastSyncVersion: FieldRef<"ProjectMaterial", 'Int'>
    readonly createdAt: FieldRef<"ProjectMaterial", 'DateTime'>
    readonly updatedAt: FieldRef<"ProjectMaterial", 'DateTime'>
    readonly projectId: FieldRef<"ProjectMaterial", 'String'>
    readonly globalMaterialId: FieldRef<"ProjectMaterial", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectMaterial findUnique
   */
  export type ProjectMaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMaterial to fetch.
     */
    where: ProjectMaterialWhereUniqueInput
  }

  /**
   * ProjectMaterial findUniqueOrThrow
   */
  export type ProjectMaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMaterial to fetch.
     */
    where: ProjectMaterialWhereUniqueInput
  }

  /**
   * ProjectMaterial findFirst
   */
  export type ProjectMaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMaterial to fetch.
     */
    where?: ProjectMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMaterials to fetch.
     */
    orderBy?: ProjectMaterialOrderByWithRelationInput | ProjectMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMaterials.
     */
    cursor?: ProjectMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMaterials.
     */
    distinct?: ProjectMaterialScalarFieldEnum | ProjectMaterialScalarFieldEnum[]
  }

  /**
   * ProjectMaterial findFirstOrThrow
   */
  export type ProjectMaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMaterial to fetch.
     */
    where?: ProjectMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMaterials to fetch.
     */
    orderBy?: ProjectMaterialOrderByWithRelationInput | ProjectMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMaterials.
     */
    cursor?: ProjectMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMaterials.
     */
    distinct?: ProjectMaterialScalarFieldEnum | ProjectMaterialScalarFieldEnum[]
  }

  /**
   * ProjectMaterial findMany
   */
  export type ProjectMaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMaterials to fetch.
     */
    where?: ProjectMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMaterials to fetch.
     */
    orderBy?: ProjectMaterialOrderByWithRelationInput | ProjectMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectMaterials.
     */
    cursor?: ProjectMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMaterials.
     */
    skip?: number
    distinct?: ProjectMaterialScalarFieldEnum | ProjectMaterialScalarFieldEnum[]
  }

  /**
   * ProjectMaterial create
   */
  export type ProjectMaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectMaterial.
     */
    data: XOR<ProjectMaterialCreateInput, ProjectMaterialUncheckedCreateInput>
  }

  /**
   * ProjectMaterial createMany
   */
  export type ProjectMaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectMaterials.
     */
    data: ProjectMaterialCreateManyInput | ProjectMaterialCreateManyInput[]
  }

  /**
   * ProjectMaterial createManyAndReturn
   */
  export type ProjectMaterialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectMaterials.
     */
    data: ProjectMaterialCreateManyInput | ProjectMaterialCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectMaterial update
   */
  export type ProjectMaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectMaterial.
     */
    data: XOR<ProjectMaterialUpdateInput, ProjectMaterialUncheckedUpdateInput>
    /**
     * Choose, which ProjectMaterial to update.
     */
    where: ProjectMaterialWhereUniqueInput
  }

  /**
   * ProjectMaterial updateMany
   */
  export type ProjectMaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectMaterials.
     */
    data: XOR<ProjectMaterialUpdateManyMutationInput, ProjectMaterialUncheckedUpdateManyInput>
    /**
     * Filter which ProjectMaterials to update
     */
    where?: ProjectMaterialWhereInput
  }

  /**
   * ProjectMaterial upsert
   */
  export type ProjectMaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectMaterial to update in case it exists.
     */
    where: ProjectMaterialWhereUniqueInput
    /**
     * In case the ProjectMaterial found by the `where` argument doesn't exist, create a new ProjectMaterial with this data.
     */
    create: XOR<ProjectMaterialCreateInput, ProjectMaterialUncheckedCreateInput>
    /**
     * In case the ProjectMaterial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectMaterialUpdateInput, ProjectMaterialUncheckedUpdateInput>
  }

  /**
   * ProjectMaterial delete
   */
  export type ProjectMaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    /**
     * Filter which ProjectMaterial to delete.
     */
    where: ProjectMaterialWhereUniqueInput
  }

  /**
   * ProjectMaterial deleteMany
   */
  export type ProjectMaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMaterials to delete
     */
    where?: ProjectMaterialWhereInput
  }

  /**
   * ProjectMaterial.comments
   */
  export type ProjectMaterial$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * ProjectMaterial without action
   */
  export type ProjectMaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
  }


  /**
   * Model GlobalSupplier
   */

  export type AggregateGlobalSupplier = {
    _count: GlobalSupplierCountAggregateOutputType | null
    _avg: GlobalSupplierAvgAggregateOutputType | null
    _sum: GlobalSupplierSumAggregateOutputType | null
    _min: GlobalSupplierMinAggregateOutputType | null
    _max: GlobalSupplierMaxAggregateOutputType | null
  }

  export type GlobalSupplierAvgAggregateOutputType = {
    qualityScore: number | null
    punctualityScore: number | null
    priceScore: number | null
    overallScore: number | null
    version: number | null
  }

  export type GlobalSupplierSumAggregateOutputType = {
    qualityScore: number | null
    punctualityScore: number | null
    priceScore: number | null
    overallScore: number | null
    version: number | null
  }

  export type GlobalSupplierMinAggregateOutputType = {
    id: string | null
    name: string | null
    portfolio: string | null
    regions: string | null
    email: string | null
    phone: string | null
    address: string | null
    qualityScore: number | null
    punctualityScore: number | null
    priceScore: number | null
    overallScore: number | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GlobalSupplierMaxAggregateOutputType = {
    id: string | null
    name: string | null
    portfolio: string | null
    regions: string | null
    email: string | null
    phone: string | null
    address: string | null
    qualityScore: number | null
    punctualityScore: number | null
    priceScore: number | null
    overallScore: number | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GlobalSupplierCountAggregateOutputType = {
    id: number
    name: number
    portfolio: number
    regions: number
    email: number
    phone: number
    address: number
    qualityScore: number
    punctualityScore: number
    priceScore: number
    overallScore: number
    version: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GlobalSupplierAvgAggregateInputType = {
    qualityScore?: true
    punctualityScore?: true
    priceScore?: true
    overallScore?: true
    version?: true
  }

  export type GlobalSupplierSumAggregateInputType = {
    qualityScore?: true
    punctualityScore?: true
    priceScore?: true
    overallScore?: true
    version?: true
  }

  export type GlobalSupplierMinAggregateInputType = {
    id?: true
    name?: true
    portfolio?: true
    regions?: true
    email?: true
    phone?: true
    address?: true
    qualityScore?: true
    punctualityScore?: true
    priceScore?: true
    overallScore?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GlobalSupplierMaxAggregateInputType = {
    id?: true
    name?: true
    portfolio?: true
    regions?: true
    email?: true
    phone?: true
    address?: true
    qualityScore?: true
    punctualityScore?: true
    priceScore?: true
    overallScore?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GlobalSupplierCountAggregateInputType = {
    id?: true
    name?: true
    portfolio?: true
    regions?: true
    email?: true
    phone?: true
    address?: true
    qualityScore?: true
    punctualityScore?: true
    priceScore?: true
    overallScore?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GlobalSupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalSupplier to aggregate.
     */
    where?: GlobalSupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalSuppliers to fetch.
     */
    orderBy?: GlobalSupplierOrderByWithRelationInput | GlobalSupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlobalSupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalSuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalSuppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GlobalSuppliers
    **/
    _count?: true | GlobalSupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GlobalSupplierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GlobalSupplierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlobalSupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlobalSupplierMaxAggregateInputType
  }

  export type GetGlobalSupplierAggregateType<T extends GlobalSupplierAggregateArgs> = {
        [P in keyof T & keyof AggregateGlobalSupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlobalSupplier[P]>
      : GetScalarType<T[P], AggregateGlobalSupplier[P]>
  }




  export type GlobalSupplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlobalSupplierWhereInput
    orderBy?: GlobalSupplierOrderByWithAggregationInput | GlobalSupplierOrderByWithAggregationInput[]
    by: GlobalSupplierScalarFieldEnum[] | GlobalSupplierScalarFieldEnum
    having?: GlobalSupplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlobalSupplierCountAggregateInputType | true
    _avg?: GlobalSupplierAvgAggregateInputType
    _sum?: GlobalSupplierSumAggregateInputType
    _min?: GlobalSupplierMinAggregateInputType
    _max?: GlobalSupplierMaxAggregateInputType
  }

  export type GlobalSupplierGroupByOutputType = {
    id: string
    name: string
    portfolio: string | null
    regions: string | null
    email: string
    phone: string
    address: string
    qualityScore: number
    punctualityScore: number
    priceScore: number
    overallScore: number
    version: number
    createdAt: Date
    updatedAt: Date
    _count: GlobalSupplierCountAggregateOutputType | null
    _avg: GlobalSupplierAvgAggregateOutputType | null
    _sum: GlobalSupplierSumAggregateOutputType | null
    _min: GlobalSupplierMinAggregateOutputType | null
    _max: GlobalSupplierMaxAggregateOutputType | null
  }

  type GetGlobalSupplierGroupByPayload<T extends GlobalSupplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlobalSupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlobalSupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlobalSupplierGroupByOutputType[P]>
            : GetScalarType<T[P], GlobalSupplierGroupByOutputType[P]>
        }
      >
    >


  export type GlobalSupplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    portfolio?: boolean
    regions?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    qualityScore?: boolean
    punctualityScore?: boolean
    priceScore?: boolean
    overallScore?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectSuppliers?: boolean | GlobalSupplier$projectSuppliersArgs<ExtArgs>
    comments?: boolean | GlobalSupplier$commentsArgs<ExtArgs>
    diffNotifications?: boolean | GlobalSupplier$diffNotificationsArgs<ExtArgs>
    _count?: boolean | GlobalSupplierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["globalSupplier"]>

  export type GlobalSupplierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    portfolio?: boolean
    regions?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    qualityScore?: boolean
    punctualityScore?: boolean
    priceScore?: boolean
    overallScore?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["globalSupplier"]>

  export type GlobalSupplierSelectScalar = {
    id?: boolean
    name?: boolean
    portfolio?: boolean
    regions?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    qualityScore?: boolean
    punctualityScore?: boolean
    priceScore?: boolean
    overallScore?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GlobalSupplierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectSuppliers?: boolean | GlobalSupplier$projectSuppliersArgs<ExtArgs>
    comments?: boolean | GlobalSupplier$commentsArgs<ExtArgs>
    diffNotifications?: boolean | GlobalSupplier$diffNotificationsArgs<ExtArgs>
    _count?: boolean | GlobalSupplierCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GlobalSupplierIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GlobalSupplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GlobalSupplier"
    objects: {
      projectSuppliers: Prisma.$ProjectSupplierPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      diffNotifications: Prisma.$DiffNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      portfolio: string | null
      regions: string | null
      email: string
      phone: string
      address: string
      qualityScore: number
      punctualityScore: number
      priceScore: number
      overallScore: number
      version: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["globalSupplier"]>
    composites: {}
  }

  type GlobalSupplierGetPayload<S extends boolean | null | undefined | GlobalSupplierDefaultArgs> = $Result.GetResult<Prisma.$GlobalSupplierPayload, S>

  type GlobalSupplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GlobalSupplierFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GlobalSupplierCountAggregateInputType | true
    }

  export interface GlobalSupplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GlobalSupplier'], meta: { name: 'GlobalSupplier' } }
    /**
     * Find zero or one GlobalSupplier that matches the filter.
     * @param {GlobalSupplierFindUniqueArgs} args - Arguments to find a GlobalSupplier
     * @example
     * // Get one GlobalSupplier
     * const globalSupplier = await prisma.globalSupplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GlobalSupplierFindUniqueArgs>(args: SelectSubset<T, GlobalSupplierFindUniqueArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GlobalSupplier that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GlobalSupplierFindUniqueOrThrowArgs} args - Arguments to find a GlobalSupplier
     * @example
     * // Get one GlobalSupplier
     * const globalSupplier = await prisma.globalSupplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GlobalSupplierFindUniqueOrThrowArgs>(args: SelectSubset<T, GlobalSupplierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GlobalSupplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalSupplierFindFirstArgs} args - Arguments to find a GlobalSupplier
     * @example
     * // Get one GlobalSupplier
     * const globalSupplier = await prisma.globalSupplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GlobalSupplierFindFirstArgs>(args?: SelectSubset<T, GlobalSupplierFindFirstArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GlobalSupplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalSupplierFindFirstOrThrowArgs} args - Arguments to find a GlobalSupplier
     * @example
     * // Get one GlobalSupplier
     * const globalSupplier = await prisma.globalSupplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GlobalSupplierFindFirstOrThrowArgs>(args?: SelectSubset<T, GlobalSupplierFindFirstOrThrowArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GlobalSuppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalSupplierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GlobalSuppliers
     * const globalSuppliers = await prisma.globalSupplier.findMany()
     * 
     * // Get first 10 GlobalSuppliers
     * const globalSuppliers = await prisma.globalSupplier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const globalSupplierWithIdOnly = await prisma.globalSupplier.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GlobalSupplierFindManyArgs>(args?: SelectSubset<T, GlobalSupplierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GlobalSupplier.
     * @param {GlobalSupplierCreateArgs} args - Arguments to create a GlobalSupplier.
     * @example
     * // Create one GlobalSupplier
     * const GlobalSupplier = await prisma.globalSupplier.create({
     *   data: {
     *     // ... data to create a GlobalSupplier
     *   }
     * })
     * 
     */
    create<T extends GlobalSupplierCreateArgs>(args: SelectSubset<T, GlobalSupplierCreateArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GlobalSuppliers.
     * @param {GlobalSupplierCreateManyArgs} args - Arguments to create many GlobalSuppliers.
     * @example
     * // Create many GlobalSuppliers
     * const globalSupplier = await prisma.globalSupplier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GlobalSupplierCreateManyArgs>(args?: SelectSubset<T, GlobalSupplierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GlobalSuppliers and returns the data saved in the database.
     * @param {GlobalSupplierCreateManyAndReturnArgs} args - Arguments to create many GlobalSuppliers.
     * @example
     * // Create many GlobalSuppliers
     * const globalSupplier = await prisma.globalSupplier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GlobalSuppliers and only return the `id`
     * const globalSupplierWithIdOnly = await prisma.globalSupplier.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GlobalSupplierCreateManyAndReturnArgs>(args?: SelectSubset<T, GlobalSupplierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GlobalSupplier.
     * @param {GlobalSupplierDeleteArgs} args - Arguments to delete one GlobalSupplier.
     * @example
     * // Delete one GlobalSupplier
     * const GlobalSupplier = await prisma.globalSupplier.delete({
     *   where: {
     *     // ... filter to delete one GlobalSupplier
     *   }
     * })
     * 
     */
    delete<T extends GlobalSupplierDeleteArgs>(args: SelectSubset<T, GlobalSupplierDeleteArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GlobalSupplier.
     * @param {GlobalSupplierUpdateArgs} args - Arguments to update one GlobalSupplier.
     * @example
     * // Update one GlobalSupplier
     * const globalSupplier = await prisma.globalSupplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GlobalSupplierUpdateArgs>(args: SelectSubset<T, GlobalSupplierUpdateArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GlobalSuppliers.
     * @param {GlobalSupplierDeleteManyArgs} args - Arguments to filter GlobalSuppliers to delete.
     * @example
     * // Delete a few GlobalSuppliers
     * const { count } = await prisma.globalSupplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GlobalSupplierDeleteManyArgs>(args?: SelectSubset<T, GlobalSupplierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlobalSuppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalSupplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GlobalSuppliers
     * const globalSupplier = await prisma.globalSupplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GlobalSupplierUpdateManyArgs>(args: SelectSubset<T, GlobalSupplierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GlobalSupplier.
     * @param {GlobalSupplierUpsertArgs} args - Arguments to update or create a GlobalSupplier.
     * @example
     * // Update or create a GlobalSupplier
     * const globalSupplier = await prisma.globalSupplier.upsert({
     *   create: {
     *     // ... data to create a GlobalSupplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GlobalSupplier we want to update
     *   }
     * })
     */
    upsert<T extends GlobalSupplierUpsertArgs>(args: SelectSubset<T, GlobalSupplierUpsertArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GlobalSuppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalSupplierCountArgs} args - Arguments to filter GlobalSuppliers to count.
     * @example
     * // Count the number of GlobalSuppliers
     * const count = await prisma.globalSupplier.count({
     *   where: {
     *     // ... the filter for the GlobalSuppliers we want to count
     *   }
     * })
    **/
    count<T extends GlobalSupplierCountArgs>(
      args?: Subset<T, GlobalSupplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlobalSupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GlobalSupplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalSupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlobalSupplierAggregateArgs>(args: Subset<T, GlobalSupplierAggregateArgs>): Prisma.PrismaPromise<GetGlobalSupplierAggregateType<T>>

    /**
     * Group by GlobalSupplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalSupplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlobalSupplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlobalSupplierGroupByArgs['orderBy'] }
        : { orderBy?: GlobalSupplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlobalSupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlobalSupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GlobalSupplier model
   */
  readonly fields: GlobalSupplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GlobalSupplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlobalSupplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projectSuppliers<T extends GlobalSupplier$projectSuppliersArgs<ExtArgs> = {}>(args?: Subset<T, GlobalSupplier$projectSuppliersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends GlobalSupplier$commentsArgs<ExtArgs> = {}>(args?: Subset<T, GlobalSupplier$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    diffNotifications<T extends GlobalSupplier$diffNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, GlobalSupplier$diffNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GlobalSupplier model
   */ 
  interface GlobalSupplierFieldRefs {
    readonly id: FieldRef<"GlobalSupplier", 'String'>
    readonly name: FieldRef<"GlobalSupplier", 'String'>
    readonly portfolio: FieldRef<"GlobalSupplier", 'String'>
    readonly regions: FieldRef<"GlobalSupplier", 'String'>
    readonly email: FieldRef<"GlobalSupplier", 'String'>
    readonly phone: FieldRef<"GlobalSupplier", 'String'>
    readonly address: FieldRef<"GlobalSupplier", 'String'>
    readonly qualityScore: FieldRef<"GlobalSupplier", 'Float'>
    readonly punctualityScore: FieldRef<"GlobalSupplier", 'Float'>
    readonly priceScore: FieldRef<"GlobalSupplier", 'Float'>
    readonly overallScore: FieldRef<"GlobalSupplier", 'Float'>
    readonly version: FieldRef<"GlobalSupplier", 'Int'>
    readonly createdAt: FieldRef<"GlobalSupplier", 'DateTime'>
    readonly updatedAt: FieldRef<"GlobalSupplier", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GlobalSupplier findUnique
   */
  export type GlobalSupplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    /**
     * Filter, which GlobalSupplier to fetch.
     */
    where: GlobalSupplierWhereUniqueInput
  }

  /**
   * GlobalSupplier findUniqueOrThrow
   */
  export type GlobalSupplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    /**
     * Filter, which GlobalSupplier to fetch.
     */
    where: GlobalSupplierWhereUniqueInput
  }

  /**
   * GlobalSupplier findFirst
   */
  export type GlobalSupplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    /**
     * Filter, which GlobalSupplier to fetch.
     */
    where?: GlobalSupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalSuppliers to fetch.
     */
    orderBy?: GlobalSupplierOrderByWithRelationInput | GlobalSupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalSuppliers.
     */
    cursor?: GlobalSupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalSuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalSuppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalSuppliers.
     */
    distinct?: GlobalSupplierScalarFieldEnum | GlobalSupplierScalarFieldEnum[]
  }

  /**
   * GlobalSupplier findFirstOrThrow
   */
  export type GlobalSupplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    /**
     * Filter, which GlobalSupplier to fetch.
     */
    where?: GlobalSupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalSuppliers to fetch.
     */
    orderBy?: GlobalSupplierOrderByWithRelationInput | GlobalSupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalSuppliers.
     */
    cursor?: GlobalSupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalSuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalSuppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalSuppliers.
     */
    distinct?: GlobalSupplierScalarFieldEnum | GlobalSupplierScalarFieldEnum[]
  }

  /**
   * GlobalSupplier findMany
   */
  export type GlobalSupplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    /**
     * Filter, which GlobalSuppliers to fetch.
     */
    where?: GlobalSupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalSuppliers to fetch.
     */
    orderBy?: GlobalSupplierOrderByWithRelationInput | GlobalSupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GlobalSuppliers.
     */
    cursor?: GlobalSupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalSuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalSuppliers.
     */
    skip?: number
    distinct?: GlobalSupplierScalarFieldEnum | GlobalSupplierScalarFieldEnum[]
  }

  /**
   * GlobalSupplier create
   */
  export type GlobalSupplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    /**
     * The data needed to create a GlobalSupplier.
     */
    data: XOR<GlobalSupplierCreateInput, GlobalSupplierUncheckedCreateInput>
  }

  /**
   * GlobalSupplier createMany
   */
  export type GlobalSupplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GlobalSuppliers.
     */
    data: GlobalSupplierCreateManyInput | GlobalSupplierCreateManyInput[]
  }

  /**
   * GlobalSupplier createManyAndReturn
   */
  export type GlobalSupplierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GlobalSuppliers.
     */
    data: GlobalSupplierCreateManyInput | GlobalSupplierCreateManyInput[]
  }

  /**
   * GlobalSupplier update
   */
  export type GlobalSupplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    /**
     * The data needed to update a GlobalSupplier.
     */
    data: XOR<GlobalSupplierUpdateInput, GlobalSupplierUncheckedUpdateInput>
    /**
     * Choose, which GlobalSupplier to update.
     */
    where: GlobalSupplierWhereUniqueInput
  }

  /**
   * GlobalSupplier updateMany
   */
  export type GlobalSupplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GlobalSuppliers.
     */
    data: XOR<GlobalSupplierUpdateManyMutationInput, GlobalSupplierUncheckedUpdateManyInput>
    /**
     * Filter which GlobalSuppliers to update
     */
    where?: GlobalSupplierWhereInput
  }

  /**
   * GlobalSupplier upsert
   */
  export type GlobalSupplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    /**
     * The filter to search for the GlobalSupplier to update in case it exists.
     */
    where: GlobalSupplierWhereUniqueInput
    /**
     * In case the GlobalSupplier found by the `where` argument doesn't exist, create a new GlobalSupplier with this data.
     */
    create: XOR<GlobalSupplierCreateInput, GlobalSupplierUncheckedCreateInput>
    /**
     * In case the GlobalSupplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlobalSupplierUpdateInput, GlobalSupplierUncheckedUpdateInput>
  }

  /**
   * GlobalSupplier delete
   */
  export type GlobalSupplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    /**
     * Filter which GlobalSupplier to delete.
     */
    where: GlobalSupplierWhereUniqueInput
  }

  /**
   * GlobalSupplier deleteMany
   */
  export type GlobalSupplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalSuppliers to delete
     */
    where?: GlobalSupplierWhereInput
  }

  /**
   * GlobalSupplier.projectSuppliers
   */
  export type GlobalSupplier$projectSuppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    where?: ProjectSupplierWhereInput
    orderBy?: ProjectSupplierOrderByWithRelationInput | ProjectSupplierOrderByWithRelationInput[]
    cursor?: ProjectSupplierWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectSupplierScalarFieldEnum | ProjectSupplierScalarFieldEnum[]
  }

  /**
   * GlobalSupplier.comments
   */
  export type GlobalSupplier$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * GlobalSupplier.diffNotifications
   */
  export type GlobalSupplier$diffNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    where?: DiffNotificationWhereInput
    orderBy?: DiffNotificationOrderByWithRelationInput | DiffNotificationOrderByWithRelationInput[]
    cursor?: DiffNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiffNotificationScalarFieldEnum | DiffNotificationScalarFieldEnum[]
  }

  /**
   * GlobalSupplier without action
   */
  export type GlobalSupplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
  }


  /**
   * Model ProjectSupplier
   */

  export type AggregateProjectSupplier = {
    _count: ProjectSupplierCountAggregateOutputType | null
    _avg: ProjectSupplierAvgAggregateOutputType | null
    _sum: ProjectSupplierSumAggregateOutputType | null
    _min: ProjectSupplierMinAggregateOutputType | null
    _max: ProjectSupplierMaxAggregateOutputType | null
  }

  export type ProjectSupplierAvgAggregateOutputType = {
    personnel: number | null
  }

  export type ProjectSupplierSumAggregateOutputType = {
    personnel: number | null
  }

  export type ProjectSupplierMinAggregateOutputType = {
    id: string | null
    arrivalTime: Date | null
    setupTime: Date | null
    operationTime: Date | null
    teardownTime: Date | null
    needs: string | null
    personnel: number | null
    vehicles: string | null
    onsiteContact: string | null
    briefingGenerated: boolean | null
    hasOverride: boolean | null
    overriddenFields: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    globalSupplierId: string | null
  }

  export type ProjectSupplierMaxAggregateOutputType = {
    id: string | null
    arrivalTime: Date | null
    setupTime: Date | null
    operationTime: Date | null
    teardownTime: Date | null
    needs: string | null
    personnel: number | null
    vehicles: string | null
    onsiteContact: string | null
    briefingGenerated: boolean | null
    hasOverride: boolean | null
    overriddenFields: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    globalSupplierId: string | null
  }

  export type ProjectSupplierCountAggregateOutputType = {
    id: number
    arrivalTime: number
    setupTime: number
    operationTime: number
    teardownTime: number
    needs: number
    personnel: number
    vehicles: number
    onsiteContact: number
    briefingGenerated: number
    hasOverride: number
    overriddenFields: number
    createdAt: number
    updatedAt: number
    projectId: number
    globalSupplierId: number
    _all: number
  }


  export type ProjectSupplierAvgAggregateInputType = {
    personnel?: true
  }

  export type ProjectSupplierSumAggregateInputType = {
    personnel?: true
  }

  export type ProjectSupplierMinAggregateInputType = {
    id?: true
    arrivalTime?: true
    setupTime?: true
    operationTime?: true
    teardownTime?: true
    needs?: true
    personnel?: true
    vehicles?: true
    onsiteContact?: true
    briefingGenerated?: true
    hasOverride?: true
    overriddenFields?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    globalSupplierId?: true
  }

  export type ProjectSupplierMaxAggregateInputType = {
    id?: true
    arrivalTime?: true
    setupTime?: true
    operationTime?: true
    teardownTime?: true
    needs?: true
    personnel?: true
    vehicles?: true
    onsiteContact?: true
    briefingGenerated?: true
    hasOverride?: true
    overriddenFields?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    globalSupplierId?: true
  }

  export type ProjectSupplierCountAggregateInputType = {
    id?: true
    arrivalTime?: true
    setupTime?: true
    operationTime?: true
    teardownTime?: true
    needs?: true
    personnel?: true
    vehicles?: true
    onsiteContact?: true
    briefingGenerated?: true
    hasOverride?: true
    overriddenFields?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    globalSupplierId?: true
    _all?: true
  }

  export type ProjectSupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectSupplier to aggregate.
     */
    where?: ProjectSupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectSuppliers to fetch.
     */
    orderBy?: ProjectSupplierOrderByWithRelationInput | ProjectSupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectSupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectSuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectSuppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectSuppliers
    **/
    _count?: true | ProjectSupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectSupplierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSupplierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectSupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectSupplierMaxAggregateInputType
  }

  export type GetProjectSupplierAggregateType<T extends ProjectSupplierAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectSupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectSupplier[P]>
      : GetScalarType<T[P], AggregateProjectSupplier[P]>
  }




  export type ProjectSupplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectSupplierWhereInput
    orderBy?: ProjectSupplierOrderByWithAggregationInput | ProjectSupplierOrderByWithAggregationInput[]
    by: ProjectSupplierScalarFieldEnum[] | ProjectSupplierScalarFieldEnum
    having?: ProjectSupplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectSupplierCountAggregateInputType | true
    _avg?: ProjectSupplierAvgAggregateInputType
    _sum?: ProjectSupplierSumAggregateInputType
    _min?: ProjectSupplierMinAggregateInputType
    _max?: ProjectSupplierMaxAggregateInputType
  }

  export type ProjectSupplierGroupByOutputType = {
    id: string
    arrivalTime: Date | null
    setupTime: Date | null
    operationTime: Date | null
    teardownTime: Date | null
    needs: string | null
    personnel: number
    vehicles: string | null
    onsiteContact: string | null
    briefingGenerated: boolean
    hasOverride: boolean
    overriddenFields: string | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    globalSupplierId: string
    _count: ProjectSupplierCountAggregateOutputType | null
    _avg: ProjectSupplierAvgAggregateOutputType | null
    _sum: ProjectSupplierSumAggregateOutputType | null
    _min: ProjectSupplierMinAggregateOutputType | null
    _max: ProjectSupplierMaxAggregateOutputType | null
  }

  type GetProjectSupplierGroupByPayload<T extends ProjectSupplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectSupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectSupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectSupplierGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectSupplierGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSupplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arrivalTime?: boolean
    setupTime?: boolean
    operationTime?: boolean
    teardownTime?: boolean
    needs?: boolean
    personnel?: boolean
    vehicles?: boolean
    onsiteContact?: boolean
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    globalSupplierId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalSupplier?: boolean | GlobalSupplierDefaultArgs<ExtArgs>
    comments?: boolean | ProjectSupplier$commentsArgs<ExtArgs>
    _count?: boolean | ProjectSupplierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectSupplier"]>

  export type ProjectSupplierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arrivalTime?: boolean
    setupTime?: boolean
    operationTime?: boolean
    teardownTime?: boolean
    needs?: boolean
    personnel?: boolean
    vehicles?: boolean
    onsiteContact?: boolean
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    globalSupplierId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalSupplier?: boolean | GlobalSupplierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectSupplier"]>

  export type ProjectSupplierSelectScalar = {
    id?: boolean
    arrivalTime?: boolean
    setupTime?: boolean
    operationTime?: boolean
    teardownTime?: boolean
    needs?: boolean
    personnel?: boolean
    vehicles?: boolean
    onsiteContact?: boolean
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    globalSupplierId?: boolean
  }

  export type ProjectSupplierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalSupplier?: boolean | GlobalSupplierDefaultArgs<ExtArgs>
    comments?: boolean | ProjectSupplier$commentsArgs<ExtArgs>
    _count?: boolean | ProjectSupplierCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectSupplierIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalSupplier?: boolean | GlobalSupplierDefaultArgs<ExtArgs>
  }

  export type $ProjectSupplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectSupplier"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      globalSupplier: Prisma.$GlobalSupplierPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      arrivalTime: Date | null
      setupTime: Date | null
      operationTime: Date | null
      teardownTime: Date | null
      needs: string | null
      personnel: number
      vehicles: string | null
      onsiteContact: string | null
      briefingGenerated: boolean
      hasOverride: boolean
      overriddenFields: string | null
      createdAt: Date
      updatedAt: Date
      projectId: string
      globalSupplierId: string
    }, ExtArgs["result"]["projectSupplier"]>
    composites: {}
  }

  type ProjectSupplierGetPayload<S extends boolean | null | undefined | ProjectSupplierDefaultArgs> = $Result.GetResult<Prisma.$ProjectSupplierPayload, S>

  type ProjectSupplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectSupplierFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectSupplierCountAggregateInputType | true
    }

  export interface ProjectSupplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectSupplier'], meta: { name: 'ProjectSupplier' } }
    /**
     * Find zero or one ProjectSupplier that matches the filter.
     * @param {ProjectSupplierFindUniqueArgs} args - Arguments to find a ProjectSupplier
     * @example
     * // Get one ProjectSupplier
     * const projectSupplier = await prisma.projectSupplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectSupplierFindUniqueArgs>(args: SelectSubset<T, ProjectSupplierFindUniqueArgs<ExtArgs>>): Prisma__ProjectSupplierClient<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectSupplier that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectSupplierFindUniqueOrThrowArgs} args - Arguments to find a ProjectSupplier
     * @example
     * // Get one ProjectSupplier
     * const projectSupplier = await prisma.projectSupplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectSupplierFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectSupplierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectSupplierClient<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectSupplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSupplierFindFirstArgs} args - Arguments to find a ProjectSupplier
     * @example
     * // Get one ProjectSupplier
     * const projectSupplier = await prisma.projectSupplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectSupplierFindFirstArgs>(args?: SelectSubset<T, ProjectSupplierFindFirstArgs<ExtArgs>>): Prisma__ProjectSupplierClient<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectSupplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSupplierFindFirstOrThrowArgs} args - Arguments to find a ProjectSupplier
     * @example
     * // Get one ProjectSupplier
     * const projectSupplier = await prisma.projectSupplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectSupplierFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectSupplierFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectSupplierClient<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectSuppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSupplierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectSuppliers
     * const projectSuppliers = await prisma.projectSupplier.findMany()
     * 
     * // Get first 10 ProjectSuppliers
     * const projectSuppliers = await prisma.projectSupplier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectSupplierWithIdOnly = await prisma.projectSupplier.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectSupplierFindManyArgs>(args?: SelectSubset<T, ProjectSupplierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectSupplier.
     * @param {ProjectSupplierCreateArgs} args - Arguments to create a ProjectSupplier.
     * @example
     * // Create one ProjectSupplier
     * const ProjectSupplier = await prisma.projectSupplier.create({
     *   data: {
     *     // ... data to create a ProjectSupplier
     *   }
     * })
     * 
     */
    create<T extends ProjectSupplierCreateArgs>(args: SelectSubset<T, ProjectSupplierCreateArgs<ExtArgs>>): Prisma__ProjectSupplierClient<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectSuppliers.
     * @param {ProjectSupplierCreateManyArgs} args - Arguments to create many ProjectSuppliers.
     * @example
     * // Create many ProjectSuppliers
     * const projectSupplier = await prisma.projectSupplier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectSupplierCreateManyArgs>(args?: SelectSubset<T, ProjectSupplierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectSuppliers and returns the data saved in the database.
     * @param {ProjectSupplierCreateManyAndReturnArgs} args - Arguments to create many ProjectSuppliers.
     * @example
     * // Create many ProjectSuppliers
     * const projectSupplier = await prisma.projectSupplier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectSuppliers and only return the `id`
     * const projectSupplierWithIdOnly = await prisma.projectSupplier.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectSupplierCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectSupplierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectSupplier.
     * @param {ProjectSupplierDeleteArgs} args - Arguments to delete one ProjectSupplier.
     * @example
     * // Delete one ProjectSupplier
     * const ProjectSupplier = await prisma.projectSupplier.delete({
     *   where: {
     *     // ... filter to delete one ProjectSupplier
     *   }
     * })
     * 
     */
    delete<T extends ProjectSupplierDeleteArgs>(args: SelectSubset<T, ProjectSupplierDeleteArgs<ExtArgs>>): Prisma__ProjectSupplierClient<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectSupplier.
     * @param {ProjectSupplierUpdateArgs} args - Arguments to update one ProjectSupplier.
     * @example
     * // Update one ProjectSupplier
     * const projectSupplier = await prisma.projectSupplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectSupplierUpdateArgs>(args: SelectSubset<T, ProjectSupplierUpdateArgs<ExtArgs>>): Prisma__ProjectSupplierClient<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectSuppliers.
     * @param {ProjectSupplierDeleteManyArgs} args - Arguments to filter ProjectSuppliers to delete.
     * @example
     * // Delete a few ProjectSuppliers
     * const { count } = await prisma.projectSupplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectSupplierDeleteManyArgs>(args?: SelectSubset<T, ProjectSupplierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectSuppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSupplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectSuppliers
     * const projectSupplier = await prisma.projectSupplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectSupplierUpdateManyArgs>(args: SelectSubset<T, ProjectSupplierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectSupplier.
     * @param {ProjectSupplierUpsertArgs} args - Arguments to update or create a ProjectSupplier.
     * @example
     * // Update or create a ProjectSupplier
     * const projectSupplier = await prisma.projectSupplier.upsert({
     *   create: {
     *     // ... data to create a ProjectSupplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectSupplier we want to update
     *   }
     * })
     */
    upsert<T extends ProjectSupplierUpsertArgs>(args: SelectSubset<T, ProjectSupplierUpsertArgs<ExtArgs>>): Prisma__ProjectSupplierClient<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectSuppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSupplierCountArgs} args - Arguments to filter ProjectSuppliers to count.
     * @example
     * // Count the number of ProjectSuppliers
     * const count = await prisma.projectSupplier.count({
     *   where: {
     *     // ... the filter for the ProjectSuppliers we want to count
     *   }
     * })
    **/
    count<T extends ProjectSupplierCountArgs>(
      args?: Subset<T, ProjectSupplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectSupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectSupplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectSupplierAggregateArgs>(args: Subset<T, ProjectSupplierAggregateArgs>): Prisma.PrismaPromise<GetProjectSupplierAggregateType<T>>

    /**
     * Group by ProjectSupplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectSupplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectSupplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectSupplierGroupByArgs['orderBy'] }
        : { orderBy?: ProjectSupplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectSupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectSupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectSupplier model
   */
  readonly fields: ProjectSupplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectSupplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectSupplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    globalSupplier<T extends GlobalSupplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GlobalSupplierDefaultArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends ProjectSupplier$commentsArgs<ExtArgs> = {}>(args?: Subset<T, ProjectSupplier$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectSupplier model
   */ 
  interface ProjectSupplierFieldRefs {
    readonly id: FieldRef<"ProjectSupplier", 'String'>
    readonly arrivalTime: FieldRef<"ProjectSupplier", 'DateTime'>
    readonly setupTime: FieldRef<"ProjectSupplier", 'DateTime'>
    readonly operationTime: FieldRef<"ProjectSupplier", 'DateTime'>
    readonly teardownTime: FieldRef<"ProjectSupplier", 'DateTime'>
    readonly needs: FieldRef<"ProjectSupplier", 'String'>
    readonly personnel: FieldRef<"ProjectSupplier", 'Int'>
    readonly vehicles: FieldRef<"ProjectSupplier", 'String'>
    readonly onsiteContact: FieldRef<"ProjectSupplier", 'String'>
    readonly briefingGenerated: FieldRef<"ProjectSupplier", 'Boolean'>
    readonly hasOverride: FieldRef<"ProjectSupplier", 'Boolean'>
    readonly overriddenFields: FieldRef<"ProjectSupplier", 'String'>
    readonly createdAt: FieldRef<"ProjectSupplier", 'DateTime'>
    readonly updatedAt: FieldRef<"ProjectSupplier", 'DateTime'>
    readonly projectId: FieldRef<"ProjectSupplier", 'String'>
    readonly globalSupplierId: FieldRef<"ProjectSupplier", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectSupplier findUnique
   */
  export type ProjectSupplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSupplier to fetch.
     */
    where: ProjectSupplierWhereUniqueInput
  }

  /**
   * ProjectSupplier findUniqueOrThrow
   */
  export type ProjectSupplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSupplier to fetch.
     */
    where: ProjectSupplierWhereUniqueInput
  }

  /**
   * ProjectSupplier findFirst
   */
  export type ProjectSupplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSupplier to fetch.
     */
    where?: ProjectSupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectSuppliers to fetch.
     */
    orderBy?: ProjectSupplierOrderByWithRelationInput | ProjectSupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectSuppliers.
     */
    cursor?: ProjectSupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectSuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectSuppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectSuppliers.
     */
    distinct?: ProjectSupplierScalarFieldEnum | ProjectSupplierScalarFieldEnum[]
  }

  /**
   * ProjectSupplier findFirstOrThrow
   */
  export type ProjectSupplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSupplier to fetch.
     */
    where?: ProjectSupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectSuppliers to fetch.
     */
    orderBy?: ProjectSupplierOrderByWithRelationInput | ProjectSupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectSuppliers.
     */
    cursor?: ProjectSupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectSuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectSuppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectSuppliers.
     */
    distinct?: ProjectSupplierScalarFieldEnum | ProjectSupplierScalarFieldEnum[]
  }

  /**
   * ProjectSupplier findMany
   */
  export type ProjectSupplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    /**
     * Filter, which ProjectSuppliers to fetch.
     */
    where?: ProjectSupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectSuppliers to fetch.
     */
    orderBy?: ProjectSupplierOrderByWithRelationInput | ProjectSupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectSuppliers.
     */
    cursor?: ProjectSupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectSuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectSuppliers.
     */
    skip?: number
    distinct?: ProjectSupplierScalarFieldEnum | ProjectSupplierScalarFieldEnum[]
  }

  /**
   * ProjectSupplier create
   */
  export type ProjectSupplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectSupplier.
     */
    data: XOR<ProjectSupplierCreateInput, ProjectSupplierUncheckedCreateInput>
  }

  /**
   * ProjectSupplier createMany
   */
  export type ProjectSupplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectSuppliers.
     */
    data: ProjectSupplierCreateManyInput | ProjectSupplierCreateManyInput[]
  }

  /**
   * ProjectSupplier createManyAndReturn
   */
  export type ProjectSupplierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectSuppliers.
     */
    data: ProjectSupplierCreateManyInput | ProjectSupplierCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectSupplier update
   */
  export type ProjectSupplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectSupplier.
     */
    data: XOR<ProjectSupplierUpdateInput, ProjectSupplierUncheckedUpdateInput>
    /**
     * Choose, which ProjectSupplier to update.
     */
    where: ProjectSupplierWhereUniqueInput
  }

  /**
   * ProjectSupplier updateMany
   */
  export type ProjectSupplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectSuppliers.
     */
    data: XOR<ProjectSupplierUpdateManyMutationInput, ProjectSupplierUncheckedUpdateManyInput>
    /**
     * Filter which ProjectSuppliers to update
     */
    where?: ProjectSupplierWhereInput
  }

  /**
   * ProjectSupplier upsert
   */
  export type ProjectSupplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectSupplier to update in case it exists.
     */
    where: ProjectSupplierWhereUniqueInput
    /**
     * In case the ProjectSupplier found by the `where` argument doesn't exist, create a new ProjectSupplier with this data.
     */
    create: XOR<ProjectSupplierCreateInput, ProjectSupplierUncheckedCreateInput>
    /**
     * In case the ProjectSupplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectSupplierUpdateInput, ProjectSupplierUncheckedUpdateInput>
  }

  /**
   * ProjectSupplier delete
   */
  export type ProjectSupplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    /**
     * Filter which ProjectSupplier to delete.
     */
    where: ProjectSupplierWhereUniqueInput
  }

  /**
   * ProjectSupplier deleteMany
   */
  export type ProjectSupplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectSuppliers to delete
     */
    where?: ProjectSupplierWhereInput
  }

  /**
   * ProjectSupplier.comments
   */
  export type ProjectSupplier$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * ProjectSupplier without action
   */
  export type ProjectSupplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    scope: string | null
    content: string | null
    createdAt: Date | null
    authorId: string | null
    projectId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    scope: string | null
    content: string | null
    createdAt: Date | null
    authorId: string | null
    projectId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    entityType: number
    entityId: number
    scope: number
    content: number
    createdAt: number
    authorId: number
    projectId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    scope?: true
    content?: true
    createdAt?: true
    authorId?: true
    projectId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    scope?: true
    content?: true
    createdAt?: true
    authorId?: true
    projectId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    scope?: true
    content?: true
    createdAt?: true
    authorId?: true
    projectId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    entityType: string
    entityId: string
    scope: string
    content: string
    createdAt: Date
    authorId: string
    projectId: string | null
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    scope?: boolean
    content?: boolean
    createdAt?: boolean
    authorId?: boolean
    projectId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    globalMaterial?: boolean | Comment$globalMaterialArgs<ExtArgs>
    projectMaterial?: boolean | Comment$projectMaterialArgs<ExtArgs>
    globalSupplier?: boolean | Comment$globalSupplierArgs<ExtArgs>
    projectSupplier?: boolean | Comment$projectSupplierArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    scope?: boolean
    content?: boolean
    createdAt?: boolean
    authorId?: boolean
    projectId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    globalMaterial?: boolean | Comment$globalMaterialArgs<ExtArgs>
    projectMaterial?: boolean | Comment$projectMaterialArgs<ExtArgs>
    globalSupplier?: boolean | Comment$globalSupplierArgs<ExtArgs>
    projectSupplier?: boolean | Comment$projectSupplierArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    scope?: boolean
    content?: boolean
    createdAt?: boolean
    authorId?: boolean
    projectId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    globalMaterial?: boolean | Comment$globalMaterialArgs<ExtArgs>
    projectMaterial?: boolean | Comment$projectMaterialArgs<ExtArgs>
    globalSupplier?: boolean | Comment$globalSupplierArgs<ExtArgs>
    projectSupplier?: boolean | Comment$projectSupplierArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    globalMaterial?: boolean | Comment$globalMaterialArgs<ExtArgs>
    projectMaterial?: boolean | Comment$projectMaterialArgs<ExtArgs>
    globalSupplier?: boolean | Comment$globalSupplierArgs<ExtArgs>
    projectSupplier?: boolean | Comment$projectSupplierArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs> | null
      globalMaterial: Prisma.$GlobalMaterialPayload<ExtArgs> | null
      projectMaterial: Prisma.$ProjectMaterialPayload<ExtArgs> | null
      globalSupplier: Prisma.$GlobalSupplierPayload<ExtArgs> | null
      projectSupplier: Prisma.$ProjectSupplierPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityType: string
      entityId: string
      scope: string
      content: string
      createdAt: Date
      authorId: string
      projectId: string | null
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends Comment$projectArgs<ExtArgs> = {}>(args?: Subset<T, Comment$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    globalMaterial<T extends Comment$globalMaterialArgs<ExtArgs> = {}>(args?: Subset<T, Comment$globalMaterialArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projectMaterial<T extends Comment$projectMaterialArgs<ExtArgs> = {}>(args?: Subset<T, Comment$projectMaterialArgs<ExtArgs>>): Prisma__ProjectMaterialClient<$Result.GetResult<Prisma.$ProjectMaterialPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    globalSupplier<T extends Comment$globalSupplierArgs<ExtArgs> = {}>(args?: Subset<T, Comment$globalSupplierArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projectSupplier<T extends Comment$projectSupplierArgs<ExtArgs> = {}>(args?: Subset<T, Comment$projectSupplierArgs<ExtArgs>>): Prisma__ProjectSupplierClient<$Result.GetResult<Prisma.$ProjectSupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly entityType: FieldRef<"Comment", 'String'>
    readonly entityId: FieldRef<"Comment", 'String'>
    readonly scope: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly authorId: FieldRef<"Comment", 'String'>
    readonly projectId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.project
   */
  export type Comment$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Comment.globalMaterial
   */
  export type Comment$globalMaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    where?: GlobalMaterialWhereInput
  }

  /**
   * Comment.projectMaterial
   */
  export type Comment$projectMaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMaterial
     */
    select?: ProjectMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMaterialInclude<ExtArgs> | null
    where?: ProjectMaterialWhereInput
  }

  /**
   * Comment.globalSupplier
   */
  export type Comment$globalSupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    where?: GlobalSupplierWhereInput
  }

  /**
   * Comment.projectSupplier
   */
  export type Comment$projectSupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectSupplier
     */
    select?: ProjectSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectSupplierInclude<ExtArgs> | null
    where?: ProjectSupplierWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model DiffNotification
   */

  export type AggregateDiffNotification = {
    _count: DiffNotificationCountAggregateOutputType | null
    _min: DiffNotificationMinAggregateOutputType | null
    _max: DiffNotificationMaxAggregateOutputType | null
  }

  export type DiffNotificationMinAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    changes: string | null
    status: string | null
    createdAt: Date | null
    projectId: string | null
    globalEntityId: string | null
  }

  export type DiffNotificationMaxAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    changes: string | null
    status: string | null
    createdAt: Date | null
    projectId: string | null
    globalEntityId: string | null
  }

  export type DiffNotificationCountAggregateOutputType = {
    id: number
    entityType: number
    entityId: number
    changes: number
    status: number
    createdAt: number
    projectId: number
    globalEntityId: number
    _all: number
  }


  export type DiffNotificationMinAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    changes?: true
    status?: true
    createdAt?: true
    projectId?: true
    globalEntityId?: true
  }

  export type DiffNotificationMaxAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    changes?: true
    status?: true
    createdAt?: true
    projectId?: true
    globalEntityId?: true
  }

  export type DiffNotificationCountAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    changes?: true
    status?: true
    createdAt?: true
    projectId?: true
    globalEntityId?: true
    _all?: true
  }

  export type DiffNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiffNotification to aggregate.
     */
    where?: DiffNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiffNotifications to fetch.
     */
    orderBy?: DiffNotificationOrderByWithRelationInput | DiffNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiffNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiffNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiffNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiffNotifications
    **/
    _count?: true | DiffNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiffNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiffNotificationMaxAggregateInputType
  }

  export type GetDiffNotificationAggregateType<T extends DiffNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateDiffNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiffNotification[P]>
      : GetScalarType<T[P], AggregateDiffNotification[P]>
  }




  export type DiffNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiffNotificationWhereInput
    orderBy?: DiffNotificationOrderByWithAggregationInput | DiffNotificationOrderByWithAggregationInput[]
    by: DiffNotificationScalarFieldEnum[] | DiffNotificationScalarFieldEnum
    having?: DiffNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiffNotificationCountAggregateInputType | true
    _min?: DiffNotificationMinAggregateInputType
    _max?: DiffNotificationMaxAggregateInputType
  }

  export type DiffNotificationGroupByOutputType = {
    id: string
    entityType: string
    entityId: string
    changes: string
    status: string
    createdAt: Date
    projectId: string
    globalEntityId: string
    _count: DiffNotificationCountAggregateOutputType | null
    _min: DiffNotificationMinAggregateOutputType | null
    _max: DiffNotificationMaxAggregateOutputType | null
  }

  type GetDiffNotificationGroupByPayload<T extends DiffNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiffNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiffNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiffNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], DiffNotificationGroupByOutputType[P]>
        }
      >
    >


  export type DiffNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changes?: boolean
    status?: boolean
    createdAt?: boolean
    projectId?: boolean
    globalEntityId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalMaterial?: boolean | DiffNotification$globalMaterialArgs<ExtArgs>
    globalSupplier?: boolean | DiffNotification$globalSupplierArgs<ExtArgs>
  }, ExtArgs["result"]["diffNotification"]>

  export type DiffNotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changes?: boolean
    status?: boolean
    createdAt?: boolean
    projectId?: boolean
    globalEntityId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalMaterial?: boolean | DiffNotification$globalMaterialArgs<ExtArgs>
    globalSupplier?: boolean | DiffNotification$globalSupplierArgs<ExtArgs>
  }, ExtArgs["result"]["diffNotification"]>

  export type DiffNotificationSelectScalar = {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changes?: boolean
    status?: boolean
    createdAt?: boolean
    projectId?: boolean
    globalEntityId?: boolean
  }

  export type DiffNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalMaterial?: boolean | DiffNotification$globalMaterialArgs<ExtArgs>
    globalSupplier?: boolean | DiffNotification$globalSupplierArgs<ExtArgs>
  }
  export type DiffNotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    globalMaterial?: boolean | DiffNotification$globalMaterialArgs<ExtArgs>
    globalSupplier?: boolean | DiffNotification$globalSupplierArgs<ExtArgs>
  }

  export type $DiffNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiffNotification"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      globalMaterial: Prisma.$GlobalMaterialPayload<ExtArgs> | null
      globalSupplier: Prisma.$GlobalSupplierPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityType: string
      entityId: string
      changes: string
      status: string
      createdAt: Date
      projectId: string
      globalEntityId: string
    }, ExtArgs["result"]["diffNotification"]>
    composites: {}
  }

  type DiffNotificationGetPayload<S extends boolean | null | undefined | DiffNotificationDefaultArgs> = $Result.GetResult<Prisma.$DiffNotificationPayload, S>

  type DiffNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DiffNotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiffNotificationCountAggregateInputType | true
    }

  export interface DiffNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiffNotification'], meta: { name: 'DiffNotification' } }
    /**
     * Find zero or one DiffNotification that matches the filter.
     * @param {DiffNotificationFindUniqueArgs} args - Arguments to find a DiffNotification
     * @example
     * // Get one DiffNotification
     * const diffNotification = await prisma.diffNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiffNotificationFindUniqueArgs>(args: SelectSubset<T, DiffNotificationFindUniqueArgs<ExtArgs>>): Prisma__DiffNotificationClient<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DiffNotification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DiffNotificationFindUniqueOrThrowArgs} args - Arguments to find a DiffNotification
     * @example
     * // Get one DiffNotification
     * const diffNotification = await prisma.diffNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiffNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, DiffNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiffNotificationClient<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DiffNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffNotificationFindFirstArgs} args - Arguments to find a DiffNotification
     * @example
     * // Get one DiffNotification
     * const diffNotification = await prisma.diffNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiffNotificationFindFirstArgs>(args?: SelectSubset<T, DiffNotificationFindFirstArgs<ExtArgs>>): Prisma__DiffNotificationClient<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DiffNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffNotificationFindFirstOrThrowArgs} args - Arguments to find a DiffNotification
     * @example
     * // Get one DiffNotification
     * const diffNotification = await prisma.diffNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiffNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, DiffNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiffNotificationClient<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DiffNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiffNotifications
     * const diffNotifications = await prisma.diffNotification.findMany()
     * 
     * // Get first 10 DiffNotifications
     * const diffNotifications = await prisma.diffNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const diffNotificationWithIdOnly = await prisma.diffNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiffNotificationFindManyArgs>(args?: SelectSubset<T, DiffNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DiffNotification.
     * @param {DiffNotificationCreateArgs} args - Arguments to create a DiffNotification.
     * @example
     * // Create one DiffNotification
     * const DiffNotification = await prisma.diffNotification.create({
     *   data: {
     *     // ... data to create a DiffNotification
     *   }
     * })
     * 
     */
    create<T extends DiffNotificationCreateArgs>(args: SelectSubset<T, DiffNotificationCreateArgs<ExtArgs>>): Prisma__DiffNotificationClient<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DiffNotifications.
     * @param {DiffNotificationCreateManyArgs} args - Arguments to create many DiffNotifications.
     * @example
     * // Create many DiffNotifications
     * const diffNotification = await prisma.diffNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiffNotificationCreateManyArgs>(args?: SelectSubset<T, DiffNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DiffNotifications and returns the data saved in the database.
     * @param {DiffNotificationCreateManyAndReturnArgs} args - Arguments to create many DiffNotifications.
     * @example
     * // Create many DiffNotifications
     * const diffNotification = await prisma.diffNotification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DiffNotifications and only return the `id`
     * const diffNotificationWithIdOnly = await prisma.diffNotification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiffNotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, DiffNotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DiffNotification.
     * @param {DiffNotificationDeleteArgs} args - Arguments to delete one DiffNotification.
     * @example
     * // Delete one DiffNotification
     * const DiffNotification = await prisma.diffNotification.delete({
     *   where: {
     *     // ... filter to delete one DiffNotification
     *   }
     * })
     * 
     */
    delete<T extends DiffNotificationDeleteArgs>(args: SelectSubset<T, DiffNotificationDeleteArgs<ExtArgs>>): Prisma__DiffNotificationClient<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DiffNotification.
     * @param {DiffNotificationUpdateArgs} args - Arguments to update one DiffNotification.
     * @example
     * // Update one DiffNotification
     * const diffNotification = await prisma.diffNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiffNotificationUpdateArgs>(args: SelectSubset<T, DiffNotificationUpdateArgs<ExtArgs>>): Prisma__DiffNotificationClient<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DiffNotifications.
     * @param {DiffNotificationDeleteManyArgs} args - Arguments to filter DiffNotifications to delete.
     * @example
     * // Delete a few DiffNotifications
     * const { count } = await prisma.diffNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiffNotificationDeleteManyArgs>(args?: SelectSubset<T, DiffNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiffNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiffNotifications
     * const diffNotification = await prisma.diffNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiffNotificationUpdateManyArgs>(args: SelectSubset<T, DiffNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DiffNotification.
     * @param {DiffNotificationUpsertArgs} args - Arguments to update or create a DiffNotification.
     * @example
     * // Update or create a DiffNotification
     * const diffNotification = await prisma.diffNotification.upsert({
     *   create: {
     *     // ... data to create a DiffNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiffNotification we want to update
     *   }
     * })
     */
    upsert<T extends DiffNotificationUpsertArgs>(args: SelectSubset<T, DiffNotificationUpsertArgs<ExtArgs>>): Prisma__DiffNotificationClient<$Result.GetResult<Prisma.$DiffNotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DiffNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffNotificationCountArgs} args - Arguments to filter DiffNotifications to count.
     * @example
     * // Count the number of DiffNotifications
     * const count = await prisma.diffNotification.count({
     *   where: {
     *     // ... the filter for the DiffNotifications we want to count
     *   }
     * })
    **/
    count<T extends DiffNotificationCountArgs>(
      args?: Subset<T, DiffNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiffNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiffNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiffNotificationAggregateArgs>(args: Subset<T, DiffNotificationAggregateArgs>): Prisma.PrismaPromise<GetDiffNotificationAggregateType<T>>

    /**
     * Group by DiffNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiffNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiffNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiffNotificationGroupByArgs['orderBy'] }
        : { orderBy?: DiffNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiffNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiffNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiffNotification model
   */
  readonly fields: DiffNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiffNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiffNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    globalMaterial<T extends DiffNotification$globalMaterialArgs<ExtArgs> = {}>(args?: Subset<T, DiffNotification$globalMaterialArgs<ExtArgs>>): Prisma__GlobalMaterialClient<$Result.GetResult<Prisma.$GlobalMaterialPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    globalSupplier<T extends DiffNotification$globalSupplierArgs<ExtArgs> = {}>(args?: Subset<T, DiffNotification$globalSupplierArgs<ExtArgs>>): Prisma__GlobalSupplierClient<$Result.GetResult<Prisma.$GlobalSupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiffNotification model
   */ 
  interface DiffNotificationFieldRefs {
    readonly id: FieldRef<"DiffNotification", 'String'>
    readonly entityType: FieldRef<"DiffNotification", 'String'>
    readonly entityId: FieldRef<"DiffNotification", 'String'>
    readonly changes: FieldRef<"DiffNotification", 'String'>
    readonly status: FieldRef<"DiffNotification", 'String'>
    readonly createdAt: FieldRef<"DiffNotification", 'DateTime'>
    readonly projectId: FieldRef<"DiffNotification", 'String'>
    readonly globalEntityId: FieldRef<"DiffNotification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DiffNotification findUnique
   */
  export type DiffNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    /**
     * Filter, which DiffNotification to fetch.
     */
    where: DiffNotificationWhereUniqueInput
  }

  /**
   * DiffNotification findUniqueOrThrow
   */
  export type DiffNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    /**
     * Filter, which DiffNotification to fetch.
     */
    where: DiffNotificationWhereUniqueInput
  }

  /**
   * DiffNotification findFirst
   */
  export type DiffNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    /**
     * Filter, which DiffNotification to fetch.
     */
    where?: DiffNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiffNotifications to fetch.
     */
    orderBy?: DiffNotificationOrderByWithRelationInput | DiffNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiffNotifications.
     */
    cursor?: DiffNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiffNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiffNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiffNotifications.
     */
    distinct?: DiffNotificationScalarFieldEnum | DiffNotificationScalarFieldEnum[]
  }

  /**
   * DiffNotification findFirstOrThrow
   */
  export type DiffNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    /**
     * Filter, which DiffNotification to fetch.
     */
    where?: DiffNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiffNotifications to fetch.
     */
    orderBy?: DiffNotificationOrderByWithRelationInput | DiffNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiffNotifications.
     */
    cursor?: DiffNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiffNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiffNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiffNotifications.
     */
    distinct?: DiffNotificationScalarFieldEnum | DiffNotificationScalarFieldEnum[]
  }

  /**
   * DiffNotification findMany
   */
  export type DiffNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    /**
     * Filter, which DiffNotifications to fetch.
     */
    where?: DiffNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiffNotifications to fetch.
     */
    orderBy?: DiffNotificationOrderByWithRelationInput | DiffNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiffNotifications.
     */
    cursor?: DiffNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiffNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiffNotifications.
     */
    skip?: number
    distinct?: DiffNotificationScalarFieldEnum | DiffNotificationScalarFieldEnum[]
  }

  /**
   * DiffNotification create
   */
  export type DiffNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a DiffNotification.
     */
    data: XOR<DiffNotificationCreateInput, DiffNotificationUncheckedCreateInput>
  }

  /**
   * DiffNotification createMany
   */
  export type DiffNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiffNotifications.
     */
    data: DiffNotificationCreateManyInput | DiffNotificationCreateManyInput[]
  }

  /**
   * DiffNotification createManyAndReturn
   */
  export type DiffNotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DiffNotifications.
     */
    data: DiffNotificationCreateManyInput | DiffNotificationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiffNotification update
   */
  export type DiffNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a DiffNotification.
     */
    data: XOR<DiffNotificationUpdateInput, DiffNotificationUncheckedUpdateInput>
    /**
     * Choose, which DiffNotification to update.
     */
    where: DiffNotificationWhereUniqueInput
  }

  /**
   * DiffNotification updateMany
   */
  export type DiffNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiffNotifications.
     */
    data: XOR<DiffNotificationUpdateManyMutationInput, DiffNotificationUncheckedUpdateManyInput>
    /**
     * Filter which DiffNotifications to update
     */
    where?: DiffNotificationWhereInput
  }

  /**
   * DiffNotification upsert
   */
  export type DiffNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the DiffNotification to update in case it exists.
     */
    where: DiffNotificationWhereUniqueInput
    /**
     * In case the DiffNotification found by the `where` argument doesn't exist, create a new DiffNotification with this data.
     */
    create: XOR<DiffNotificationCreateInput, DiffNotificationUncheckedCreateInput>
    /**
     * In case the DiffNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiffNotificationUpdateInput, DiffNotificationUncheckedUpdateInput>
  }

  /**
   * DiffNotification delete
   */
  export type DiffNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
    /**
     * Filter which DiffNotification to delete.
     */
    where: DiffNotificationWhereUniqueInput
  }

  /**
   * DiffNotification deleteMany
   */
  export type DiffNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiffNotifications to delete
     */
    where?: DiffNotificationWhereInput
  }

  /**
   * DiffNotification.globalMaterial
   */
  export type DiffNotification$globalMaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalMaterial
     */
    select?: GlobalMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalMaterialInclude<ExtArgs> | null
    where?: GlobalMaterialWhereInput
  }

  /**
   * DiffNotification.globalSupplier
   */
  export type DiffNotification$globalSupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalSupplier
     */
    select?: GlobalSupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlobalSupplierInclude<ExtArgs> | null
    where?: GlobalSupplierWhereInput
  }

  /**
   * DiffNotification without action
   */
  export type DiffNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiffNotification
     */
    select?: DiffNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiffNotificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    location: 'location',
    status: 'status',
    budget: 'budget',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    responsibleId: 'responsibleId'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ProjectMemberScalarFieldEnum: {
    id: 'id',
    role: 'role',
    createdAt: 'createdAt',
    userId: 'userId',
    projectId: 'projectId'
  };

  export type ProjectMemberScalarFieldEnum = (typeof ProjectMemberScalarFieldEnum)[keyof typeof ProjectMemberScalarFieldEnum]


  export const GlobalMaterialScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    unit: 'unit',
    specs: 'specs',
    portfolio: 'portfolio',
    standardLeadTime: 'standardLeadTime',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type GlobalMaterialScalarFieldEnum = (typeof GlobalMaterialScalarFieldEnum)[keyof typeof GlobalMaterialScalarFieldEnum]


  export const ProjectMaterialScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    phase: 'phase',
    location: 'location',
    deliveryTime: 'deliveryTime',
    pickupTime: 'pickupTime',
    needs: 'needs',
    specialPrice: 'specialPrice',
    notes: 'notes',
    hasOverride: 'hasOverride',
    overriddenFields: 'overriddenFields',
    lastSyncVersion: 'lastSyncVersion',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    globalMaterialId: 'globalMaterialId'
  };

  export type ProjectMaterialScalarFieldEnum = (typeof ProjectMaterialScalarFieldEnum)[keyof typeof ProjectMaterialScalarFieldEnum]


  export const GlobalSupplierScalarFieldEnum: {
    id: 'id',
    name: 'name',
    portfolio: 'portfolio',
    regions: 'regions',
    email: 'email',
    phone: 'phone',
    address: 'address',
    qualityScore: 'qualityScore',
    punctualityScore: 'punctualityScore',
    priceScore: 'priceScore',
    overallScore: 'overallScore',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GlobalSupplierScalarFieldEnum = (typeof GlobalSupplierScalarFieldEnum)[keyof typeof GlobalSupplierScalarFieldEnum]


  export const ProjectSupplierScalarFieldEnum: {
    id: 'id',
    arrivalTime: 'arrivalTime',
    setupTime: 'setupTime',
    operationTime: 'operationTime',
    teardownTime: 'teardownTime',
    needs: 'needs',
    personnel: 'personnel',
    vehicles: 'vehicles',
    onsiteContact: 'onsiteContact',
    briefingGenerated: 'briefingGenerated',
    hasOverride: 'hasOverride',
    overriddenFields: 'overriddenFields',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    globalSupplierId: 'globalSupplierId'
  };

  export type ProjectSupplierScalarFieldEnum = (typeof ProjectSupplierScalarFieldEnum)[keyof typeof ProjectSupplierScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    entityType: 'entityType',
    entityId: 'entityId',
    scope: 'scope',
    content: 'content',
    createdAt: 'createdAt',
    authorId: 'authorId',
    projectId: 'projectId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const DiffNotificationScalarFieldEnum: {
    id: 'id',
    entityType: 'entityType',
    entityId: 'entityId',
    changes: 'changes',
    status: 'status',
    createdAt: 'createdAt',
    projectId: 'projectId',
    globalEntityId: 'globalEntityId'
  };

  export type DiffNotificationScalarFieldEnum = (typeof DiffNotificationScalarFieldEnum)[keyof typeof DiffNotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    projects?: ProjectListRelationFilter
    comments?: CommentListRelationFilter
    projectMembers?: ProjectMemberListRelationFilter
    createdMaterials?: GlobalMaterialListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projects?: ProjectOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    projectMembers?: ProjectMemberOrderByRelationAggregateInput
    createdMaterials?: GlobalMaterialOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    projects?: ProjectListRelationFilter
    comments?: CommentListRelationFilter
    projectMembers?: ProjectMemberListRelationFilter
    createdMaterials?: GlobalMaterialListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    startDate?: DateTimeFilter<"Project"> | Date | string
    endDate?: DateTimeFilter<"Project"> | Date | string
    location?: StringFilter<"Project"> | string
    status?: StringFilter<"Project"> | string
    budget?: FloatNullableFilter<"Project"> | number | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    responsibleId?: StringFilter<"Project"> | string
    responsible?: XOR<UserRelationFilter, UserWhereInput>
    materials?: ProjectMaterialListRelationFilter
    suppliers?: ProjectSupplierListRelationFilter
    members?: ProjectMemberListRelationFilter
    comments?: CommentListRelationFilter
    diffNotifications?: DiffNotificationListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    status?: SortOrder
    budget?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    responsibleId?: SortOrder
    responsible?: UserOrderByWithRelationInput
    materials?: ProjectMaterialOrderByRelationAggregateInput
    suppliers?: ProjectSupplierOrderByRelationAggregateInput
    members?: ProjectMemberOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    diffNotifications?: DiffNotificationOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    startDate?: DateTimeFilter<"Project"> | Date | string
    endDate?: DateTimeFilter<"Project"> | Date | string
    location?: StringFilter<"Project"> | string
    status?: StringFilter<"Project"> | string
    budget?: FloatNullableFilter<"Project"> | number | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    responsibleId?: StringFilter<"Project"> | string
    responsible?: XOR<UserRelationFilter, UserWhereInput>
    materials?: ProjectMaterialListRelationFilter
    suppliers?: ProjectSupplierListRelationFilter
    members?: ProjectMemberListRelationFilter
    comments?: CommentListRelationFilter
    diffNotifications?: DiffNotificationListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    status?: SortOrder
    budget?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    responsibleId?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    location?: StringWithAggregatesFilter<"Project"> | string
    status?: StringWithAggregatesFilter<"Project"> | string
    budget?: FloatNullableWithAggregatesFilter<"Project"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    responsibleId?: StringWithAggregatesFilter<"Project"> | string
  }

  export type ProjectMemberWhereInput = {
    AND?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    OR?: ProjectMemberWhereInput[]
    NOT?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    id?: StringFilter<"ProjectMember"> | string
    role?: StringFilter<"ProjectMember"> | string
    createdAt?: DateTimeFilter<"ProjectMember"> | Date | string
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type ProjectMemberOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ProjectMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_projectId?: ProjectMemberUserIdProjectIdCompoundUniqueInput
    AND?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    OR?: ProjectMemberWhereInput[]
    NOT?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    role?: StringFilter<"ProjectMember"> | string
    createdAt?: DateTimeFilter<"ProjectMember"> | Date | string
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id" | "userId_projectId">

  export type ProjectMemberOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    _count?: ProjectMemberCountOrderByAggregateInput
    _max?: ProjectMemberMaxOrderByAggregateInput
    _min?: ProjectMemberMinOrderByAggregateInput
  }

  export type ProjectMemberScalarWhereWithAggregatesInput = {
    AND?: ProjectMemberScalarWhereWithAggregatesInput | ProjectMemberScalarWhereWithAggregatesInput[]
    OR?: ProjectMemberScalarWhereWithAggregatesInput[]
    NOT?: ProjectMemberScalarWhereWithAggregatesInput | ProjectMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectMember"> | string
    role?: StringWithAggregatesFilter<"ProjectMember"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProjectMember"> | Date | string
    userId?: StringWithAggregatesFilter<"ProjectMember"> | string
    projectId?: StringWithAggregatesFilter<"ProjectMember"> | string
  }

  export type GlobalMaterialWhereInput = {
    AND?: GlobalMaterialWhereInput | GlobalMaterialWhereInput[]
    OR?: GlobalMaterialWhereInput[]
    NOT?: GlobalMaterialWhereInput | GlobalMaterialWhereInput[]
    id?: StringFilter<"GlobalMaterial"> | string
    name?: StringFilter<"GlobalMaterial"> | string
    category?: StringFilter<"GlobalMaterial"> | string
    unit?: StringFilter<"GlobalMaterial"> | string
    specs?: StringNullableFilter<"GlobalMaterial"> | string | null
    portfolio?: StringNullableFilter<"GlobalMaterial"> | string | null
    standardLeadTime?: IntNullableFilter<"GlobalMaterial"> | number | null
    version?: IntFilter<"GlobalMaterial"> | number
    createdAt?: DateTimeFilter<"GlobalMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"GlobalMaterial"> | Date | string
    createdById?: StringFilter<"GlobalMaterial"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    projectMaterials?: ProjectMaterialListRelationFilter
    comments?: CommentListRelationFilter
    diffNotifications?: DiffNotificationListRelationFilter
  }

  export type GlobalMaterialOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    unit?: SortOrder
    specs?: SortOrderInput | SortOrder
    portfolio?: SortOrderInput | SortOrder
    standardLeadTime?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    projectMaterials?: ProjectMaterialOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    diffNotifications?: DiffNotificationOrderByRelationAggregateInput
  }

  export type GlobalMaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GlobalMaterialWhereInput | GlobalMaterialWhereInput[]
    OR?: GlobalMaterialWhereInput[]
    NOT?: GlobalMaterialWhereInput | GlobalMaterialWhereInput[]
    name?: StringFilter<"GlobalMaterial"> | string
    category?: StringFilter<"GlobalMaterial"> | string
    unit?: StringFilter<"GlobalMaterial"> | string
    specs?: StringNullableFilter<"GlobalMaterial"> | string | null
    portfolio?: StringNullableFilter<"GlobalMaterial"> | string | null
    standardLeadTime?: IntNullableFilter<"GlobalMaterial"> | number | null
    version?: IntFilter<"GlobalMaterial"> | number
    createdAt?: DateTimeFilter<"GlobalMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"GlobalMaterial"> | Date | string
    createdById?: StringFilter<"GlobalMaterial"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    projectMaterials?: ProjectMaterialListRelationFilter
    comments?: CommentListRelationFilter
    diffNotifications?: DiffNotificationListRelationFilter
  }, "id">

  export type GlobalMaterialOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    unit?: SortOrder
    specs?: SortOrderInput | SortOrder
    portfolio?: SortOrderInput | SortOrder
    standardLeadTime?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    _count?: GlobalMaterialCountOrderByAggregateInput
    _avg?: GlobalMaterialAvgOrderByAggregateInput
    _max?: GlobalMaterialMaxOrderByAggregateInput
    _min?: GlobalMaterialMinOrderByAggregateInput
    _sum?: GlobalMaterialSumOrderByAggregateInput
  }

  export type GlobalMaterialScalarWhereWithAggregatesInput = {
    AND?: GlobalMaterialScalarWhereWithAggregatesInput | GlobalMaterialScalarWhereWithAggregatesInput[]
    OR?: GlobalMaterialScalarWhereWithAggregatesInput[]
    NOT?: GlobalMaterialScalarWhereWithAggregatesInput | GlobalMaterialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GlobalMaterial"> | string
    name?: StringWithAggregatesFilter<"GlobalMaterial"> | string
    category?: StringWithAggregatesFilter<"GlobalMaterial"> | string
    unit?: StringWithAggregatesFilter<"GlobalMaterial"> | string
    specs?: StringNullableWithAggregatesFilter<"GlobalMaterial"> | string | null
    portfolio?: StringNullableWithAggregatesFilter<"GlobalMaterial"> | string | null
    standardLeadTime?: IntNullableWithAggregatesFilter<"GlobalMaterial"> | number | null
    version?: IntWithAggregatesFilter<"GlobalMaterial"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GlobalMaterial"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GlobalMaterial"> | Date | string
    createdById?: StringWithAggregatesFilter<"GlobalMaterial"> | string
  }

  export type ProjectMaterialWhereInput = {
    AND?: ProjectMaterialWhereInput | ProjectMaterialWhereInput[]
    OR?: ProjectMaterialWhereInput[]
    NOT?: ProjectMaterialWhereInput | ProjectMaterialWhereInput[]
    id?: StringFilter<"ProjectMaterial"> | string
    quantity?: IntFilter<"ProjectMaterial"> | number
    phase?: StringFilter<"ProjectMaterial"> | string
    location?: StringNullableFilter<"ProjectMaterial"> | string | null
    deliveryTime?: DateTimeNullableFilter<"ProjectMaterial"> | Date | string | null
    pickupTime?: DateTimeNullableFilter<"ProjectMaterial"> | Date | string | null
    needs?: StringNullableFilter<"ProjectMaterial"> | string | null
    specialPrice?: FloatNullableFilter<"ProjectMaterial"> | number | null
    notes?: StringNullableFilter<"ProjectMaterial"> | string | null
    hasOverride?: BoolFilter<"ProjectMaterial"> | boolean
    overriddenFields?: StringNullableFilter<"ProjectMaterial"> | string | null
    lastSyncVersion?: IntFilter<"ProjectMaterial"> | number
    createdAt?: DateTimeFilter<"ProjectMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectMaterial"> | Date | string
    projectId?: StringFilter<"ProjectMaterial"> | string
    globalMaterialId?: StringFilter<"ProjectMaterial"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    globalMaterial?: XOR<GlobalMaterialRelationFilter, GlobalMaterialWhereInput>
    comments?: CommentListRelationFilter
  }

  export type ProjectMaterialOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    phase?: SortOrder
    location?: SortOrderInput | SortOrder
    deliveryTime?: SortOrderInput | SortOrder
    pickupTime?: SortOrderInput | SortOrder
    needs?: SortOrderInput | SortOrder
    specialPrice?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrderInput | SortOrder
    lastSyncVersion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalMaterialId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    globalMaterial?: GlobalMaterialOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type ProjectMaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_globalMaterialId?: ProjectMaterialProjectIdGlobalMaterialIdCompoundUniqueInput
    AND?: ProjectMaterialWhereInput | ProjectMaterialWhereInput[]
    OR?: ProjectMaterialWhereInput[]
    NOT?: ProjectMaterialWhereInput | ProjectMaterialWhereInput[]
    quantity?: IntFilter<"ProjectMaterial"> | number
    phase?: StringFilter<"ProjectMaterial"> | string
    location?: StringNullableFilter<"ProjectMaterial"> | string | null
    deliveryTime?: DateTimeNullableFilter<"ProjectMaterial"> | Date | string | null
    pickupTime?: DateTimeNullableFilter<"ProjectMaterial"> | Date | string | null
    needs?: StringNullableFilter<"ProjectMaterial"> | string | null
    specialPrice?: FloatNullableFilter<"ProjectMaterial"> | number | null
    notes?: StringNullableFilter<"ProjectMaterial"> | string | null
    hasOverride?: BoolFilter<"ProjectMaterial"> | boolean
    overriddenFields?: StringNullableFilter<"ProjectMaterial"> | string | null
    lastSyncVersion?: IntFilter<"ProjectMaterial"> | number
    createdAt?: DateTimeFilter<"ProjectMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectMaterial"> | Date | string
    projectId?: StringFilter<"ProjectMaterial"> | string
    globalMaterialId?: StringFilter<"ProjectMaterial"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    globalMaterial?: XOR<GlobalMaterialRelationFilter, GlobalMaterialWhereInput>
    comments?: CommentListRelationFilter
  }, "id" | "projectId_globalMaterialId">

  export type ProjectMaterialOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    phase?: SortOrder
    location?: SortOrderInput | SortOrder
    deliveryTime?: SortOrderInput | SortOrder
    pickupTime?: SortOrderInput | SortOrder
    needs?: SortOrderInput | SortOrder
    specialPrice?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrderInput | SortOrder
    lastSyncVersion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalMaterialId?: SortOrder
    _count?: ProjectMaterialCountOrderByAggregateInput
    _avg?: ProjectMaterialAvgOrderByAggregateInput
    _max?: ProjectMaterialMaxOrderByAggregateInput
    _min?: ProjectMaterialMinOrderByAggregateInput
    _sum?: ProjectMaterialSumOrderByAggregateInput
  }

  export type ProjectMaterialScalarWhereWithAggregatesInput = {
    AND?: ProjectMaterialScalarWhereWithAggregatesInput | ProjectMaterialScalarWhereWithAggregatesInput[]
    OR?: ProjectMaterialScalarWhereWithAggregatesInput[]
    NOT?: ProjectMaterialScalarWhereWithAggregatesInput | ProjectMaterialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectMaterial"> | string
    quantity?: IntWithAggregatesFilter<"ProjectMaterial"> | number
    phase?: StringWithAggregatesFilter<"ProjectMaterial"> | string
    location?: StringNullableWithAggregatesFilter<"ProjectMaterial"> | string | null
    deliveryTime?: DateTimeNullableWithAggregatesFilter<"ProjectMaterial"> | Date | string | null
    pickupTime?: DateTimeNullableWithAggregatesFilter<"ProjectMaterial"> | Date | string | null
    needs?: StringNullableWithAggregatesFilter<"ProjectMaterial"> | string | null
    specialPrice?: FloatNullableWithAggregatesFilter<"ProjectMaterial"> | number | null
    notes?: StringNullableWithAggregatesFilter<"ProjectMaterial"> | string | null
    hasOverride?: BoolWithAggregatesFilter<"ProjectMaterial"> | boolean
    overriddenFields?: StringNullableWithAggregatesFilter<"ProjectMaterial"> | string | null
    lastSyncVersion?: IntWithAggregatesFilter<"ProjectMaterial"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ProjectMaterial"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProjectMaterial"> | Date | string
    projectId?: StringWithAggregatesFilter<"ProjectMaterial"> | string
    globalMaterialId?: StringWithAggregatesFilter<"ProjectMaterial"> | string
  }

  export type GlobalSupplierWhereInput = {
    AND?: GlobalSupplierWhereInput | GlobalSupplierWhereInput[]
    OR?: GlobalSupplierWhereInput[]
    NOT?: GlobalSupplierWhereInput | GlobalSupplierWhereInput[]
    id?: StringFilter<"GlobalSupplier"> | string
    name?: StringFilter<"GlobalSupplier"> | string
    portfolio?: StringNullableFilter<"GlobalSupplier"> | string | null
    regions?: StringNullableFilter<"GlobalSupplier"> | string | null
    email?: StringFilter<"GlobalSupplier"> | string
    phone?: StringFilter<"GlobalSupplier"> | string
    address?: StringFilter<"GlobalSupplier"> | string
    qualityScore?: FloatFilter<"GlobalSupplier"> | number
    punctualityScore?: FloatFilter<"GlobalSupplier"> | number
    priceScore?: FloatFilter<"GlobalSupplier"> | number
    overallScore?: FloatFilter<"GlobalSupplier"> | number
    version?: IntFilter<"GlobalSupplier"> | number
    createdAt?: DateTimeFilter<"GlobalSupplier"> | Date | string
    updatedAt?: DateTimeFilter<"GlobalSupplier"> | Date | string
    projectSuppliers?: ProjectSupplierListRelationFilter
    comments?: CommentListRelationFilter
    diffNotifications?: DiffNotificationListRelationFilter
  }

  export type GlobalSupplierOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    portfolio?: SortOrderInput | SortOrder
    regions?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    qualityScore?: SortOrder
    punctualityScore?: SortOrder
    priceScore?: SortOrder
    overallScore?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectSuppliers?: ProjectSupplierOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    diffNotifications?: DiffNotificationOrderByRelationAggregateInput
  }

  export type GlobalSupplierWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GlobalSupplierWhereInput | GlobalSupplierWhereInput[]
    OR?: GlobalSupplierWhereInput[]
    NOT?: GlobalSupplierWhereInput | GlobalSupplierWhereInput[]
    name?: StringFilter<"GlobalSupplier"> | string
    portfolio?: StringNullableFilter<"GlobalSupplier"> | string | null
    regions?: StringNullableFilter<"GlobalSupplier"> | string | null
    email?: StringFilter<"GlobalSupplier"> | string
    phone?: StringFilter<"GlobalSupplier"> | string
    address?: StringFilter<"GlobalSupplier"> | string
    qualityScore?: FloatFilter<"GlobalSupplier"> | number
    punctualityScore?: FloatFilter<"GlobalSupplier"> | number
    priceScore?: FloatFilter<"GlobalSupplier"> | number
    overallScore?: FloatFilter<"GlobalSupplier"> | number
    version?: IntFilter<"GlobalSupplier"> | number
    createdAt?: DateTimeFilter<"GlobalSupplier"> | Date | string
    updatedAt?: DateTimeFilter<"GlobalSupplier"> | Date | string
    projectSuppliers?: ProjectSupplierListRelationFilter
    comments?: CommentListRelationFilter
    diffNotifications?: DiffNotificationListRelationFilter
  }, "id">

  export type GlobalSupplierOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    portfolio?: SortOrderInput | SortOrder
    regions?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    qualityScore?: SortOrder
    punctualityScore?: SortOrder
    priceScore?: SortOrder
    overallScore?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GlobalSupplierCountOrderByAggregateInput
    _avg?: GlobalSupplierAvgOrderByAggregateInput
    _max?: GlobalSupplierMaxOrderByAggregateInput
    _min?: GlobalSupplierMinOrderByAggregateInput
    _sum?: GlobalSupplierSumOrderByAggregateInput
  }

  export type GlobalSupplierScalarWhereWithAggregatesInput = {
    AND?: GlobalSupplierScalarWhereWithAggregatesInput | GlobalSupplierScalarWhereWithAggregatesInput[]
    OR?: GlobalSupplierScalarWhereWithAggregatesInput[]
    NOT?: GlobalSupplierScalarWhereWithAggregatesInput | GlobalSupplierScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GlobalSupplier"> | string
    name?: StringWithAggregatesFilter<"GlobalSupplier"> | string
    portfolio?: StringNullableWithAggregatesFilter<"GlobalSupplier"> | string | null
    regions?: StringNullableWithAggregatesFilter<"GlobalSupplier"> | string | null
    email?: StringWithAggregatesFilter<"GlobalSupplier"> | string
    phone?: StringWithAggregatesFilter<"GlobalSupplier"> | string
    address?: StringWithAggregatesFilter<"GlobalSupplier"> | string
    qualityScore?: FloatWithAggregatesFilter<"GlobalSupplier"> | number
    punctualityScore?: FloatWithAggregatesFilter<"GlobalSupplier"> | number
    priceScore?: FloatWithAggregatesFilter<"GlobalSupplier"> | number
    overallScore?: FloatWithAggregatesFilter<"GlobalSupplier"> | number
    version?: IntWithAggregatesFilter<"GlobalSupplier"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GlobalSupplier"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GlobalSupplier"> | Date | string
  }

  export type ProjectSupplierWhereInput = {
    AND?: ProjectSupplierWhereInput | ProjectSupplierWhereInput[]
    OR?: ProjectSupplierWhereInput[]
    NOT?: ProjectSupplierWhereInput | ProjectSupplierWhereInput[]
    id?: StringFilter<"ProjectSupplier"> | string
    arrivalTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    setupTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    operationTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    teardownTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    needs?: StringNullableFilter<"ProjectSupplier"> | string | null
    personnel?: IntFilter<"ProjectSupplier"> | number
    vehicles?: StringNullableFilter<"ProjectSupplier"> | string | null
    onsiteContact?: StringNullableFilter<"ProjectSupplier"> | string | null
    briefingGenerated?: BoolFilter<"ProjectSupplier"> | boolean
    hasOverride?: BoolFilter<"ProjectSupplier"> | boolean
    overriddenFields?: StringNullableFilter<"ProjectSupplier"> | string | null
    createdAt?: DateTimeFilter<"ProjectSupplier"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectSupplier"> | Date | string
    projectId?: StringFilter<"ProjectSupplier"> | string
    globalSupplierId?: StringFilter<"ProjectSupplier"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    globalSupplier?: XOR<GlobalSupplierRelationFilter, GlobalSupplierWhereInput>
    comments?: CommentListRelationFilter
  }

  export type ProjectSupplierOrderByWithRelationInput = {
    id?: SortOrder
    arrivalTime?: SortOrderInput | SortOrder
    setupTime?: SortOrderInput | SortOrder
    operationTime?: SortOrderInput | SortOrder
    teardownTime?: SortOrderInput | SortOrder
    needs?: SortOrderInput | SortOrder
    personnel?: SortOrder
    vehicles?: SortOrderInput | SortOrder
    onsiteContact?: SortOrderInput | SortOrder
    briefingGenerated?: SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalSupplierId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    globalSupplier?: GlobalSupplierOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type ProjectSupplierWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_globalSupplierId?: ProjectSupplierProjectIdGlobalSupplierIdCompoundUniqueInput
    AND?: ProjectSupplierWhereInput | ProjectSupplierWhereInput[]
    OR?: ProjectSupplierWhereInput[]
    NOT?: ProjectSupplierWhereInput | ProjectSupplierWhereInput[]
    arrivalTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    setupTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    operationTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    teardownTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    needs?: StringNullableFilter<"ProjectSupplier"> | string | null
    personnel?: IntFilter<"ProjectSupplier"> | number
    vehicles?: StringNullableFilter<"ProjectSupplier"> | string | null
    onsiteContact?: StringNullableFilter<"ProjectSupplier"> | string | null
    briefingGenerated?: BoolFilter<"ProjectSupplier"> | boolean
    hasOverride?: BoolFilter<"ProjectSupplier"> | boolean
    overriddenFields?: StringNullableFilter<"ProjectSupplier"> | string | null
    createdAt?: DateTimeFilter<"ProjectSupplier"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectSupplier"> | Date | string
    projectId?: StringFilter<"ProjectSupplier"> | string
    globalSupplierId?: StringFilter<"ProjectSupplier"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    globalSupplier?: XOR<GlobalSupplierRelationFilter, GlobalSupplierWhereInput>
    comments?: CommentListRelationFilter
  }, "id" | "projectId_globalSupplierId">

  export type ProjectSupplierOrderByWithAggregationInput = {
    id?: SortOrder
    arrivalTime?: SortOrderInput | SortOrder
    setupTime?: SortOrderInput | SortOrder
    operationTime?: SortOrderInput | SortOrder
    teardownTime?: SortOrderInput | SortOrder
    needs?: SortOrderInput | SortOrder
    personnel?: SortOrder
    vehicles?: SortOrderInput | SortOrder
    onsiteContact?: SortOrderInput | SortOrder
    briefingGenerated?: SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalSupplierId?: SortOrder
    _count?: ProjectSupplierCountOrderByAggregateInput
    _avg?: ProjectSupplierAvgOrderByAggregateInput
    _max?: ProjectSupplierMaxOrderByAggregateInput
    _min?: ProjectSupplierMinOrderByAggregateInput
    _sum?: ProjectSupplierSumOrderByAggregateInput
  }

  export type ProjectSupplierScalarWhereWithAggregatesInput = {
    AND?: ProjectSupplierScalarWhereWithAggregatesInput | ProjectSupplierScalarWhereWithAggregatesInput[]
    OR?: ProjectSupplierScalarWhereWithAggregatesInput[]
    NOT?: ProjectSupplierScalarWhereWithAggregatesInput | ProjectSupplierScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectSupplier"> | string
    arrivalTime?: DateTimeNullableWithAggregatesFilter<"ProjectSupplier"> | Date | string | null
    setupTime?: DateTimeNullableWithAggregatesFilter<"ProjectSupplier"> | Date | string | null
    operationTime?: DateTimeNullableWithAggregatesFilter<"ProjectSupplier"> | Date | string | null
    teardownTime?: DateTimeNullableWithAggregatesFilter<"ProjectSupplier"> | Date | string | null
    needs?: StringNullableWithAggregatesFilter<"ProjectSupplier"> | string | null
    personnel?: IntWithAggregatesFilter<"ProjectSupplier"> | number
    vehicles?: StringNullableWithAggregatesFilter<"ProjectSupplier"> | string | null
    onsiteContact?: StringNullableWithAggregatesFilter<"ProjectSupplier"> | string | null
    briefingGenerated?: BoolWithAggregatesFilter<"ProjectSupplier"> | boolean
    hasOverride?: BoolWithAggregatesFilter<"ProjectSupplier"> | boolean
    overriddenFields?: StringNullableWithAggregatesFilter<"ProjectSupplier"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProjectSupplier"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProjectSupplier"> | Date | string
    projectId?: StringWithAggregatesFilter<"ProjectSupplier"> | string
    globalSupplierId?: StringWithAggregatesFilter<"ProjectSupplier"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    entityType?: StringFilter<"Comment"> | string
    entityId?: StringFilter<"Comment"> | string
    scope?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    globalMaterial?: XOR<GlobalMaterialNullableRelationFilter, GlobalMaterialWhereInput> | null
    projectMaterial?: XOR<ProjectMaterialNullableRelationFilter, ProjectMaterialWhereInput> | null
    globalSupplier?: XOR<GlobalSupplierNullableRelationFilter, GlobalSupplierWhereInput> | null
    projectSupplier?: XOR<ProjectSupplierNullableRelationFilter, ProjectSupplierWhereInput> | null
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    scope?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    globalMaterial?: GlobalMaterialOrderByWithRelationInput
    projectMaterial?: ProjectMaterialOrderByWithRelationInput
    globalSupplier?: GlobalSupplierOrderByWithRelationInput
    projectSupplier?: ProjectSupplierOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    entityType?: StringFilter<"Comment"> | string
    entityId?: StringFilter<"Comment"> | string
    scope?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    globalMaterial?: XOR<GlobalMaterialNullableRelationFilter, GlobalMaterialWhereInput> | null
    projectMaterial?: XOR<ProjectMaterialNullableRelationFilter, ProjectMaterialWhereInput> | null
    globalSupplier?: XOR<GlobalSupplierNullableRelationFilter, GlobalSupplierWhereInput> | null
    projectSupplier?: XOR<ProjectSupplierNullableRelationFilter, ProjectSupplierWhereInput> | null
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    scope?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    entityType?: StringWithAggregatesFilter<"Comment"> | string
    entityId?: StringWithAggregatesFilter<"Comment"> | string
    scope?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    authorId?: StringWithAggregatesFilter<"Comment"> | string
    projectId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
  }

  export type DiffNotificationWhereInput = {
    AND?: DiffNotificationWhereInput | DiffNotificationWhereInput[]
    OR?: DiffNotificationWhereInput[]
    NOT?: DiffNotificationWhereInput | DiffNotificationWhereInput[]
    id?: StringFilter<"DiffNotification"> | string
    entityType?: StringFilter<"DiffNotification"> | string
    entityId?: StringFilter<"DiffNotification"> | string
    changes?: StringFilter<"DiffNotification"> | string
    status?: StringFilter<"DiffNotification"> | string
    createdAt?: DateTimeFilter<"DiffNotification"> | Date | string
    projectId?: StringFilter<"DiffNotification"> | string
    globalEntityId?: StringFilter<"DiffNotification"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    globalMaterial?: XOR<GlobalMaterialNullableRelationFilter, GlobalMaterialWhereInput> | null
    globalSupplier?: XOR<GlobalSupplierNullableRelationFilter, GlobalSupplierWhereInput> | null
  }

  export type DiffNotificationOrderByWithRelationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    globalEntityId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    globalMaterial?: GlobalMaterialOrderByWithRelationInput
    globalSupplier?: GlobalSupplierOrderByWithRelationInput
  }

  export type DiffNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DiffNotificationWhereInput | DiffNotificationWhereInput[]
    OR?: DiffNotificationWhereInput[]
    NOT?: DiffNotificationWhereInput | DiffNotificationWhereInput[]
    entityType?: StringFilter<"DiffNotification"> | string
    entityId?: StringFilter<"DiffNotification"> | string
    changes?: StringFilter<"DiffNotification"> | string
    status?: StringFilter<"DiffNotification"> | string
    createdAt?: DateTimeFilter<"DiffNotification"> | Date | string
    projectId?: StringFilter<"DiffNotification"> | string
    globalEntityId?: StringFilter<"DiffNotification"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    globalMaterial?: XOR<GlobalMaterialNullableRelationFilter, GlobalMaterialWhereInput> | null
    globalSupplier?: XOR<GlobalSupplierNullableRelationFilter, GlobalSupplierWhereInput> | null
  }, "id">

  export type DiffNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    globalEntityId?: SortOrder
    _count?: DiffNotificationCountOrderByAggregateInput
    _max?: DiffNotificationMaxOrderByAggregateInput
    _min?: DiffNotificationMinOrderByAggregateInput
  }

  export type DiffNotificationScalarWhereWithAggregatesInput = {
    AND?: DiffNotificationScalarWhereWithAggregatesInput | DiffNotificationScalarWhereWithAggregatesInput[]
    OR?: DiffNotificationScalarWhereWithAggregatesInput[]
    NOT?: DiffNotificationScalarWhereWithAggregatesInput | DiffNotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DiffNotification"> | string
    entityType?: StringWithAggregatesFilter<"DiffNotification"> | string
    entityId?: StringWithAggregatesFilter<"DiffNotification"> | string
    changes?: StringWithAggregatesFilter<"DiffNotification"> | string
    status?: StringWithAggregatesFilter<"DiffNotification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DiffNotification"> | Date | string
    projectId?: StringWithAggregatesFilter<"DiffNotification"> | string
    globalEntityId?: StringWithAggregatesFilter<"DiffNotification"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutResponsibleInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    createdMaterials?: GlobalMaterialCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutResponsibleInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdMaterials?: GlobalMaterialUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutResponsibleNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdMaterials?: GlobalMaterialUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutResponsibleNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdMaterials?: GlobalMaterialUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsible: UserCreateNestedOneWithoutProjectsInput
    materials?: ProjectMaterialCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsibleId: string
    materials?: ProjectMaterialUncheckedCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsible?: UserUpdateOneRequiredWithoutProjectsNestedInput
    materials?: ProjectMaterialUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsibleId?: StringFieldUpdateOperationsInput | string
    materials?: ProjectMaterialUncheckedUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsibleId: string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsibleId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberCreateInput = {
    id?: string
    role?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutProjectMembersInput
    project: ProjectCreateNestedOneWithoutMembersInput
  }

  export type ProjectMemberUncheckedCreateInput = {
    id?: string
    role?: string
    createdAt?: Date | string
    userId: string
    projectId: string
  }

  export type ProjectMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectMembersNestedInput
    project?: ProjectUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberCreateManyInput = {
    id?: string
    role?: string
    createdAt?: Date | string
    userId: string
    projectId: string
  }

  export type ProjectMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type GlobalMaterialCreateInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedMaterialsInput
    projectMaterials?: ProjectMaterialCreateNestedManyWithoutGlobalMaterialInput
    comments?: CommentCreateNestedManyWithoutGlobalMaterialInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialUncheckedCreateInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    projectMaterials?: ProjectMaterialUncheckedCreateNestedManyWithoutGlobalMaterialInput
    comments?: CommentUncheckedCreateNestedManyWithoutGlobalMaterialInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedMaterialsNestedInput
    projectMaterials?: ProjectMaterialUpdateManyWithoutGlobalMaterialNestedInput
    comments?: CommentUpdateManyWithoutGlobalMaterialNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type GlobalMaterialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    projectMaterials?: ProjectMaterialUncheckedUpdateManyWithoutGlobalMaterialNestedInput
    comments?: CommentUncheckedUpdateManyWithoutGlobalMaterialNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type GlobalMaterialCreateManyInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type GlobalMaterialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GlobalMaterialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMaterialCreateInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutMaterialsInput
    globalMaterial: GlobalMaterialCreateNestedOneWithoutProjectMaterialsInput
    comments?: CommentCreateNestedManyWithoutProjectMaterialInput
  }

  export type ProjectMaterialUncheckedCreateInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    globalMaterialId: string
    comments?: CommentUncheckedCreateNestedManyWithoutProjectMaterialInput
  }

  export type ProjectMaterialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutMaterialsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneRequiredWithoutProjectMaterialsNestedInput
    comments?: CommentUpdateManyWithoutProjectMaterialNestedInput
  }

  export type ProjectMaterialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    globalMaterialId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutProjectMaterialNestedInput
  }

  export type ProjectMaterialCreateManyInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    globalMaterialId: string
  }

  export type ProjectMaterialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectMaterialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    globalMaterialId?: StringFieldUpdateOperationsInput | string
  }

  export type GlobalSupplierCreateInput = {
    id?: string
    name: string
    portfolio?: string | null
    regions?: string | null
    email: string
    phone: string
    address: string
    qualityScore?: number
    punctualityScore?: number
    priceScore?: number
    overallScore?: number
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectSuppliers?: ProjectSupplierCreateNestedManyWithoutGlobalSupplierInput
    comments?: CommentCreateNestedManyWithoutGlobalSupplierInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutGlobalSupplierInput
  }

  export type GlobalSupplierUncheckedCreateInput = {
    id?: string
    name: string
    portfolio?: string | null
    regions?: string | null
    email: string
    phone: string
    address: string
    qualityScore?: number
    punctualityScore?: number
    priceScore?: number
    overallScore?: number
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectSuppliers?: ProjectSupplierUncheckedCreateNestedManyWithoutGlobalSupplierInput
    comments?: CommentUncheckedCreateNestedManyWithoutGlobalSupplierInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutGlobalSupplierInput
  }

  export type GlobalSupplierUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectSuppliers?: ProjectSupplierUpdateManyWithoutGlobalSupplierNestedInput
    comments?: CommentUpdateManyWithoutGlobalSupplierNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutGlobalSupplierNestedInput
  }

  export type GlobalSupplierUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectSuppliers?: ProjectSupplierUncheckedUpdateManyWithoutGlobalSupplierNestedInput
    comments?: CommentUncheckedUpdateManyWithoutGlobalSupplierNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutGlobalSupplierNestedInput
  }

  export type GlobalSupplierCreateManyInput = {
    id?: string
    name: string
    portfolio?: string | null
    regions?: string | null
    email: string
    phone: string
    address: string
    qualityScore?: number
    punctualityScore?: number
    priceScore?: number
    overallScore?: number
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GlobalSupplierUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GlobalSupplierUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectSupplierCreateInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSuppliersInput
    globalSupplier: GlobalSupplierCreateNestedOneWithoutProjectSuppliersInput
    comments?: CommentCreateNestedManyWithoutProjectSupplierInput
  }

  export type ProjectSupplierUncheckedCreateInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    globalSupplierId: string
    comments?: CommentUncheckedCreateNestedManyWithoutProjectSupplierInput
  }

  export type ProjectSupplierUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSuppliersNestedInput
    globalSupplier?: GlobalSupplierUpdateOneRequiredWithoutProjectSuppliersNestedInput
    comments?: CommentUpdateManyWithoutProjectSupplierNestedInput
  }

  export type ProjectSupplierUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    globalSupplierId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutProjectSupplierNestedInput
  }

  export type ProjectSupplierCreateManyInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    globalSupplierId: string
  }

  export type ProjectSupplierUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectSupplierUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    globalSupplierId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    globalMaterial?: GlobalMaterialCreateNestedOneWithoutCommentsInput
    projectMaterial?: ProjectMaterialCreateNestedOneWithoutCommentsInput
    globalSupplier?: GlobalSupplierCreateNestedOneWithoutCommentsInput
    projectSupplier?: ProjectSupplierCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    entityType: string
    entityId: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneWithoutCommentsNestedInput
    projectMaterial?: ProjectMaterialUpdateOneWithoutCommentsNestedInput
    globalSupplier?: GlobalSupplierUpdateOneWithoutCommentsNestedInput
    projectSupplier?: ProjectSupplierUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyInput = {
    id?: string
    entityType: string
    entityId: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiffNotificationCreateInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutDiffNotificationsInput
    globalMaterial?: GlobalMaterialCreateNestedOneWithoutDiffNotificationsInput
    globalSupplier?: GlobalSupplierCreateNestedOneWithoutDiffNotificationsInput
  }

  export type DiffNotificationUncheckedCreateInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    projectId: string
    globalEntityId: string
  }

  export type DiffNotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutDiffNotificationsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneWithoutDiffNotificationsNestedInput
    globalSupplier?: GlobalSupplierUpdateOneWithoutDiffNotificationsNestedInput
  }

  export type DiffNotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    globalEntityId?: StringFieldUpdateOperationsInput | string
  }

  export type DiffNotificationCreateManyInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    projectId: string
    globalEntityId: string
  }

  export type DiffNotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiffNotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    globalEntityId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type ProjectMemberListRelationFilter = {
    every?: ProjectMemberWhereInput
    some?: ProjectMemberWhereInput
    none?: ProjectMemberWhereInput
  }

  export type GlobalMaterialListRelationFilter = {
    every?: GlobalMaterialWhereInput
    some?: GlobalMaterialWhereInput
    none?: GlobalMaterialWhereInput
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GlobalMaterialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProjectMaterialListRelationFilter = {
    every?: ProjectMaterialWhereInput
    some?: ProjectMaterialWhereInput
    none?: ProjectMaterialWhereInput
  }

  export type ProjectSupplierListRelationFilter = {
    every?: ProjectSupplierWhereInput
    some?: ProjectSupplierWhereInput
    none?: ProjectSupplierWhereInput
  }

  export type DiffNotificationListRelationFilter = {
    every?: DiffNotificationWhereInput
    some?: DiffNotificationWhereInput
    none?: DiffNotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProjectMaterialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectSupplierOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiffNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    status?: SortOrder
    budget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    responsibleId?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    budget?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    status?: SortOrder
    budget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    responsibleId?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    location?: SortOrder
    status?: SortOrder
    budget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    responsibleId?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    budget?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type ProjectMemberUserIdProjectIdCompoundUniqueInput = {
    userId: string
    projectId: string
  }

  export type ProjectMemberCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectMemberMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type GlobalMaterialCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    unit?: SortOrder
    specs?: SortOrder
    portfolio?: SortOrder
    standardLeadTime?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type GlobalMaterialAvgOrderByAggregateInput = {
    standardLeadTime?: SortOrder
    version?: SortOrder
  }

  export type GlobalMaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    unit?: SortOrder
    specs?: SortOrder
    portfolio?: SortOrder
    standardLeadTime?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type GlobalMaterialMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    unit?: SortOrder
    specs?: SortOrder
    portfolio?: SortOrder
    standardLeadTime?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type GlobalMaterialSumOrderByAggregateInput = {
    standardLeadTime?: SortOrder
    version?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type GlobalMaterialRelationFilter = {
    is?: GlobalMaterialWhereInput
    isNot?: GlobalMaterialWhereInput
  }

  export type ProjectMaterialProjectIdGlobalMaterialIdCompoundUniqueInput = {
    projectId: string
    globalMaterialId: string
  }

  export type ProjectMaterialCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    phase?: SortOrder
    location?: SortOrder
    deliveryTime?: SortOrder
    pickupTime?: SortOrder
    needs?: SortOrder
    specialPrice?: SortOrder
    notes?: SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrder
    lastSyncVersion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalMaterialId?: SortOrder
  }

  export type ProjectMaterialAvgOrderByAggregateInput = {
    quantity?: SortOrder
    specialPrice?: SortOrder
    lastSyncVersion?: SortOrder
  }

  export type ProjectMaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    phase?: SortOrder
    location?: SortOrder
    deliveryTime?: SortOrder
    pickupTime?: SortOrder
    needs?: SortOrder
    specialPrice?: SortOrder
    notes?: SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrder
    lastSyncVersion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalMaterialId?: SortOrder
  }

  export type ProjectMaterialMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    phase?: SortOrder
    location?: SortOrder
    deliveryTime?: SortOrder
    pickupTime?: SortOrder
    needs?: SortOrder
    specialPrice?: SortOrder
    notes?: SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrder
    lastSyncVersion?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalMaterialId?: SortOrder
  }

  export type ProjectMaterialSumOrderByAggregateInput = {
    quantity?: SortOrder
    specialPrice?: SortOrder
    lastSyncVersion?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type GlobalSupplierCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    portfolio?: SortOrder
    regions?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    qualityScore?: SortOrder
    punctualityScore?: SortOrder
    priceScore?: SortOrder
    overallScore?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GlobalSupplierAvgOrderByAggregateInput = {
    qualityScore?: SortOrder
    punctualityScore?: SortOrder
    priceScore?: SortOrder
    overallScore?: SortOrder
    version?: SortOrder
  }

  export type GlobalSupplierMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    portfolio?: SortOrder
    regions?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    qualityScore?: SortOrder
    punctualityScore?: SortOrder
    priceScore?: SortOrder
    overallScore?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GlobalSupplierMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    portfolio?: SortOrder
    regions?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    qualityScore?: SortOrder
    punctualityScore?: SortOrder
    priceScore?: SortOrder
    overallScore?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GlobalSupplierSumOrderByAggregateInput = {
    qualityScore?: SortOrder
    punctualityScore?: SortOrder
    priceScore?: SortOrder
    overallScore?: SortOrder
    version?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type GlobalSupplierRelationFilter = {
    is?: GlobalSupplierWhereInput
    isNot?: GlobalSupplierWhereInput
  }

  export type ProjectSupplierProjectIdGlobalSupplierIdCompoundUniqueInput = {
    projectId: string
    globalSupplierId: string
  }

  export type ProjectSupplierCountOrderByAggregateInput = {
    id?: SortOrder
    arrivalTime?: SortOrder
    setupTime?: SortOrder
    operationTime?: SortOrder
    teardownTime?: SortOrder
    needs?: SortOrder
    personnel?: SortOrder
    vehicles?: SortOrder
    onsiteContact?: SortOrder
    briefingGenerated?: SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalSupplierId?: SortOrder
  }

  export type ProjectSupplierAvgOrderByAggregateInput = {
    personnel?: SortOrder
  }

  export type ProjectSupplierMaxOrderByAggregateInput = {
    id?: SortOrder
    arrivalTime?: SortOrder
    setupTime?: SortOrder
    operationTime?: SortOrder
    teardownTime?: SortOrder
    needs?: SortOrder
    personnel?: SortOrder
    vehicles?: SortOrder
    onsiteContact?: SortOrder
    briefingGenerated?: SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalSupplierId?: SortOrder
  }

  export type ProjectSupplierMinOrderByAggregateInput = {
    id?: SortOrder
    arrivalTime?: SortOrder
    setupTime?: SortOrder
    operationTime?: SortOrder
    teardownTime?: SortOrder
    needs?: SortOrder
    personnel?: SortOrder
    vehicles?: SortOrder
    onsiteContact?: SortOrder
    briefingGenerated?: SortOrder
    hasOverride?: SortOrder
    overriddenFields?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    globalSupplierId?: SortOrder
  }

  export type ProjectSupplierSumOrderByAggregateInput = {
    personnel?: SortOrder
  }

  export type ProjectNullableRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type GlobalMaterialNullableRelationFilter = {
    is?: GlobalMaterialWhereInput | null
    isNot?: GlobalMaterialWhereInput | null
  }

  export type ProjectMaterialNullableRelationFilter = {
    is?: ProjectMaterialWhereInput | null
    isNot?: ProjectMaterialWhereInput | null
  }

  export type GlobalSupplierNullableRelationFilter = {
    is?: GlobalSupplierWhereInput | null
    isNot?: GlobalSupplierWhereInput | null
  }

  export type ProjectSupplierNullableRelationFilter = {
    is?: ProjectSupplierWhereInput | null
    isNot?: ProjectSupplierWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    scope?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    scope?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    scope?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
  }

  export type DiffNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    globalEntityId?: SortOrder
  }

  export type DiffNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    globalEntityId?: SortOrder
  }

  export type DiffNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    globalEntityId?: SortOrder
  }

  export type ProjectCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<ProjectCreateWithoutResponsibleInput, ProjectUncheckedCreateWithoutResponsibleInput> | ProjectCreateWithoutResponsibleInput[] | ProjectUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutResponsibleInput | ProjectCreateOrConnectWithoutResponsibleInput[]
    createMany?: ProjectCreateManyResponsibleInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type GlobalMaterialCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<GlobalMaterialCreateWithoutCreatedByInput, GlobalMaterialUncheckedCreateWithoutCreatedByInput> | GlobalMaterialCreateWithoutCreatedByInput[] | GlobalMaterialUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutCreatedByInput | GlobalMaterialCreateOrConnectWithoutCreatedByInput[]
    createMany?: GlobalMaterialCreateManyCreatedByInputEnvelope
    connect?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutResponsibleInput = {
    create?: XOR<ProjectCreateWithoutResponsibleInput, ProjectUncheckedCreateWithoutResponsibleInput> | ProjectCreateWithoutResponsibleInput[] | ProjectUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutResponsibleInput | ProjectCreateOrConnectWithoutResponsibleInput[]
    createMany?: ProjectCreateManyResponsibleInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type GlobalMaterialUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<GlobalMaterialCreateWithoutCreatedByInput, GlobalMaterialUncheckedCreateWithoutCreatedByInput> | GlobalMaterialCreateWithoutCreatedByInput[] | GlobalMaterialUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutCreatedByInput | GlobalMaterialCreateOrConnectWithoutCreatedByInput[]
    createMany?: GlobalMaterialCreateManyCreatedByInputEnvelope
    connect?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProjectUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<ProjectCreateWithoutResponsibleInput, ProjectUncheckedCreateWithoutResponsibleInput> | ProjectCreateWithoutResponsibleInput[] | ProjectUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutResponsibleInput | ProjectCreateOrConnectWithoutResponsibleInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutResponsibleInput | ProjectUpsertWithWhereUniqueWithoutResponsibleInput[]
    createMany?: ProjectCreateManyResponsibleInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutResponsibleInput | ProjectUpdateWithWhereUniqueWithoutResponsibleInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutResponsibleInput | ProjectUpdateManyWithWhereWithoutResponsibleInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutUserInput | ProjectMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutUserInput | ProjectMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutUserInput | ProjectMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type GlobalMaterialUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<GlobalMaterialCreateWithoutCreatedByInput, GlobalMaterialUncheckedCreateWithoutCreatedByInput> | GlobalMaterialCreateWithoutCreatedByInput[] | GlobalMaterialUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutCreatedByInput | GlobalMaterialCreateOrConnectWithoutCreatedByInput[]
    upsert?: GlobalMaterialUpsertWithWhereUniqueWithoutCreatedByInput | GlobalMaterialUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: GlobalMaterialCreateManyCreatedByInputEnvelope
    set?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
    disconnect?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
    delete?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
    connect?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
    update?: GlobalMaterialUpdateWithWhereUniqueWithoutCreatedByInput | GlobalMaterialUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: GlobalMaterialUpdateManyWithWhereWithoutCreatedByInput | GlobalMaterialUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: GlobalMaterialScalarWhereInput | GlobalMaterialScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutResponsibleNestedInput = {
    create?: XOR<ProjectCreateWithoutResponsibleInput, ProjectUncheckedCreateWithoutResponsibleInput> | ProjectCreateWithoutResponsibleInput[] | ProjectUncheckedCreateWithoutResponsibleInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutResponsibleInput | ProjectCreateOrConnectWithoutResponsibleInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutResponsibleInput | ProjectUpsertWithWhereUniqueWithoutResponsibleInput[]
    createMany?: ProjectCreateManyResponsibleInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutResponsibleInput | ProjectUpdateWithWhereUniqueWithoutResponsibleInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutResponsibleInput | ProjectUpdateManyWithWhereWithoutResponsibleInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutUserInput | ProjectMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutUserInput | ProjectMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutUserInput | ProjectMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type GlobalMaterialUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<GlobalMaterialCreateWithoutCreatedByInput, GlobalMaterialUncheckedCreateWithoutCreatedByInput> | GlobalMaterialCreateWithoutCreatedByInput[] | GlobalMaterialUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutCreatedByInput | GlobalMaterialCreateOrConnectWithoutCreatedByInput[]
    upsert?: GlobalMaterialUpsertWithWhereUniqueWithoutCreatedByInput | GlobalMaterialUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: GlobalMaterialCreateManyCreatedByInputEnvelope
    set?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
    disconnect?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
    delete?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
    connect?: GlobalMaterialWhereUniqueInput | GlobalMaterialWhereUniqueInput[]
    update?: GlobalMaterialUpdateWithWhereUniqueWithoutCreatedByInput | GlobalMaterialUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: GlobalMaterialUpdateManyWithWhereWithoutCreatedByInput | GlobalMaterialUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: GlobalMaterialScalarWhereInput | GlobalMaterialScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectMaterialCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMaterialCreateWithoutProjectInput, ProjectMaterialUncheckedCreateWithoutProjectInput> | ProjectMaterialCreateWithoutProjectInput[] | ProjectMaterialUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutProjectInput | ProjectMaterialCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMaterialCreateManyProjectInputEnvelope
    connect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
  }

  export type ProjectSupplierCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectSupplierCreateWithoutProjectInput, ProjectSupplierUncheckedCreateWithoutProjectInput> | ProjectSupplierCreateWithoutProjectInput[] | ProjectSupplierUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutProjectInput | ProjectSupplierCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectSupplierCreateManyProjectInputEnvelope
    connect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
  }

  export type ProjectMemberCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DiffNotificationCreateNestedManyWithoutProjectInput = {
    create?: XOR<DiffNotificationCreateWithoutProjectInput, DiffNotificationUncheckedCreateWithoutProjectInput> | DiffNotificationCreateWithoutProjectInput[] | DiffNotificationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutProjectInput | DiffNotificationCreateOrConnectWithoutProjectInput[]
    createMany?: DiffNotificationCreateManyProjectInputEnvelope
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
  }

  export type ProjectMaterialUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMaterialCreateWithoutProjectInput, ProjectMaterialUncheckedCreateWithoutProjectInput> | ProjectMaterialCreateWithoutProjectInput[] | ProjectMaterialUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutProjectInput | ProjectMaterialCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMaterialCreateManyProjectInputEnvelope
    connect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
  }

  export type ProjectSupplierUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectSupplierCreateWithoutProjectInput, ProjectSupplierUncheckedCreateWithoutProjectInput> | ProjectSupplierCreateWithoutProjectInput[] | ProjectSupplierUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutProjectInput | ProjectSupplierCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectSupplierCreateManyProjectInputEnvelope
    connect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
  }

  export type ProjectMemberUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DiffNotificationUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<DiffNotificationCreateWithoutProjectInput, DiffNotificationUncheckedCreateWithoutProjectInput> | DiffNotificationCreateWithoutProjectInput[] | DiffNotificationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutProjectInput | DiffNotificationCreateOrConnectWithoutProjectInput[]
    createMany?: DiffNotificationCreateManyProjectInputEnvelope
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsInput, UserUpdateWithoutProjectsInput>, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type ProjectMaterialUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMaterialCreateWithoutProjectInput, ProjectMaterialUncheckedCreateWithoutProjectInput> | ProjectMaterialCreateWithoutProjectInput[] | ProjectMaterialUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutProjectInput | ProjectMaterialCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMaterialUpsertWithWhereUniqueWithoutProjectInput | ProjectMaterialUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMaterialCreateManyProjectInputEnvelope
    set?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    disconnect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    delete?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    connect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    update?: ProjectMaterialUpdateWithWhereUniqueWithoutProjectInput | ProjectMaterialUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMaterialUpdateManyWithWhereWithoutProjectInput | ProjectMaterialUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMaterialScalarWhereInput | ProjectMaterialScalarWhereInput[]
  }

  export type ProjectSupplierUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectSupplierCreateWithoutProjectInput, ProjectSupplierUncheckedCreateWithoutProjectInput> | ProjectSupplierCreateWithoutProjectInput[] | ProjectSupplierUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutProjectInput | ProjectSupplierCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectSupplierUpsertWithWhereUniqueWithoutProjectInput | ProjectSupplierUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectSupplierCreateManyProjectInputEnvelope
    set?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    disconnect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    delete?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    connect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    update?: ProjectSupplierUpdateWithWhereUniqueWithoutProjectInput | ProjectSupplierUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectSupplierUpdateManyWithWhereWithoutProjectInput | ProjectSupplierUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectSupplierScalarWhereInput | ProjectSupplierScalarWhereInput[]
  }

  export type ProjectMemberUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutProjectInput | ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutProjectInput | ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutProjectInput | ProjectMemberUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DiffNotificationUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DiffNotificationCreateWithoutProjectInput, DiffNotificationUncheckedCreateWithoutProjectInput> | DiffNotificationCreateWithoutProjectInput[] | DiffNotificationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutProjectInput | DiffNotificationCreateOrConnectWithoutProjectInput[]
    upsert?: DiffNotificationUpsertWithWhereUniqueWithoutProjectInput | DiffNotificationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DiffNotificationCreateManyProjectInputEnvelope
    set?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    disconnect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    delete?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    update?: DiffNotificationUpdateWithWhereUniqueWithoutProjectInput | DiffNotificationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DiffNotificationUpdateManyWithWhereWithoutProjectInput | DiffNotificationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DiffNotificationScalarWhereInput | DiffNotificationScalarWhereInput[]
  }

  export type ProjectMaterialUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMaterialCreateWithoutProjectInput, ProjectMaterialUncheckedCreateWithoutProjectInput> | ProjectMaterialCreateWithoutProjectInput[] | ProjectMaterialUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutProjectInput | ProjectMaterialCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMaterialUpsertWithWhereUniqueWithoutProjectInput | ProjectMaterialUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMaterialCreateManyProjectInputEnvelope
    set?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    disconnect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    delete?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    connect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    update?: ProjectMaterialUpdateWithWhereUniqueWithoutProjectInput | ProjectMaterialUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMaterialUpdateManyWithWhereWithoutProjectInput | ProjectMaterialUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMaterialScalarWhereInput | ProjectMaterialScalarWhereInput[]
  }

  export type ProjectSupplierUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectSupplierCreateWithoutProjectInput, ProjectSupplierUncheckedCreateWithoutProjectInput> | ProjectSupplierCreateWithoutProjectInput[] | ProjectSupplierUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutProjectInput | ProjectSupplierCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectSupplierUpsertWithWhereUniqueWithoutProjectInput | ProjectSupplierUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectSupplierCreateManyProjectInputEnvelope
    set?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    disconnect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    delete?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    connect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    update?: ProjectSupplierUpdateWithWhereUniqueWithoutProjectInput | ProjectSupplierUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectSupplierUpdateManyWithWhereWithoutProjectInput | ProjectSupplierUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectSupplierScalarWhereInput | ProjectSupplierScalarWhereInput[]
  }

  export type ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutProjectInput | ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutProjectInput | ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutProjectInput | ProjectMemberUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DiffNotificationUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DiffNotificationCreateWithoutProjectInput, DiffNotificationUncheckedCreateWithoutProjectInput> | DiffNotificationCreateWithoutProjectInput[] | DiffNotificationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutProjectInput | DiffNotificationCreateOrConnectWithoutProjectInput[]
    upsert?: DiffNotificationUpsertWithWhereUniqueWithoutProjectInput | DiffNotificationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DiffNotificationCreateManyProjectInputEnvelope
    set?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    disconnect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    delete?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    update?: DiffNotificationUpdateWithWhereUniqueWithoutProjectInput | DiffNotificationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DiffNotificationUpdateManyWithWhereWithoutProjectInput | DiffNotificationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DiffNotificationScalarWhereInput | DiffNotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectMembersInput = {
    create?: XOR<UserCreateWithoutProjectMembersInput, UserUncheckedCreateWithoutProjectMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectMembersInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutMembersInput = {
    create?: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMembersInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProjectMembersNestedInput = {
    create?: XOR<UserCreateWithoutProjectMembersInput, UserUncheckedCreateWithoutProjectMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectMembersInput
    upsert?: UserUpsertWithoutProjectMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectMembersInput, UserUpdateWithoutProjectMembersInput>, UserUncheckedUpdateWithoutProjectMembersInput>
  }

  export type ProjectUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMembersInput
    upsert?: ProjectUpsertWithoutMembersInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutMembersInput, ProjectUpdateWithoutMembersInput>, ProjectUncheckedUpdateWithoutMembersInput>
  }

  export type UserCreateNestedOneWithoutCreatedMaterialsInput = {
    create?: XOR<UserCreateWithoutCreatedMaterialsInput, UserUncheckedCreateWithoutCreatedMaterialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMaterialsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectMaterialCreateNestedManyWithoutGlobalMaterialInput = {
    create?: XOR<ProjectMaterialCreateWithoutGlobalMaterialInput, ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput> | ProjectMaterialCreateWithoutGlobalMaterialInput[] | ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutGlobalMaterialInput | ProjectMaterialCreateOrConnectWithoutGlobalMaterialInput[]
    createMany?: ProjectMaterialCreateManyGlobalMaterialInputEnvelope
    connect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutGlobalMaterialInput = {
    create?: XOR<CommentCreateWithoutGlobalMaterialInput, CommentUncheckedCreateWithoutGlobalMaterialInput> | CommentCreateWithoutGlobalMaterialInput[] | CommentUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutGlobalMaterialInput | CommentCreateOrConnectWithoutGlobalMaterialInput[]
    createMany?: CommentCreateManyGlobalMaterialInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DiffNotificationCreateNestedManyWithoutGlobalMaterialInput = {
    create?: XOR<DiffNotificationCreateWithoutGlobalMaterialInput, DiffNotificationUncheckedCreateWithoutGlobalMaterialInput> | DiffNotificationCreateWithoutGlobalMaterialInput[] | DiffNotificationUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutGlobalMaterialInput | DiffNotificationCreateOrConnectWithoutGlobalMaterialInput[]
    createMany?: DiffNotificationCreateManyGlobalMaterialInputEnvelope
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
  }

  export type ProjectMaterialUncheckedCreateNestedManyWithoutGlobalMaterialInput = {
    create?: XOR<ProjectMaterialCreateWithoutGlobalMaterialInput, ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput> | ProjectMaterialCreateWithoutGlobalMaterialInput[] | ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutGlobalMaterialInput | ProjectMaterialCreateOrConnectWithoutGlobalMaterialInput[]
    createMany?: ProjectMaterialCreateManyGlobalMaterialInputEnvelope
    connect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutGlobalMaterialInput = {
    create?: XOR<CommentCreateWithoutGlobalMaterialInput, CommentUncheckedCreateWithoutGlobalMaterialInput> | CommentCreateWithoutGlobalMaterialInput[] | CommentUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutGlobalMaterialInput | CommentCreateOrConnectWithoutGlobalMaterialInput[]
    createMany?: CommentCreateManyGlobalMaterialInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DiffNotificationUncheckedCreateNestedManyWithoutGlobalMaterialInput = {
    create?: XOR<DiffNotificationCreateWithoutGlobalMaterialInput, DiffNotificationUncheckedCreateWithoutGlobalMaterialInput> | DiffNotificationCreateWithoutGlobalMaterialInput[] | DiffNotificationUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutGlobalMaterialInput | DiffNotificationCreateOrConnectWithoutGlobalMaterialInput[]
    createMany?: DiffNotificationCreateManyGlobalMaterialInputEnvelope
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCreatedMaterialsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedMaterialsInput, UserUncheckedCreateWithoutCreatedMaterialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMaterialsInput
    upsert?: UserUpsertWithoutCreatedMaterialsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedMaterialsInput, UserUpdateWithoutCreatedMaterialsInput>, UserUncheckedUpdateWithoutCreatedMaterialsInput>
  }

  export type ProjectMaterialUpdateManyWithoutGlobalMaterialNestedInput = {
    create?: XOR<ProjectMaterialCreateWithoutGlobalMaterialInput, ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput> | ProjectMaterialCreateWithoutGlobalMaterialInput[] | ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutGlobalMaterialInput | ProjectMaterialCreateOrConnectWithoutGlobalMaterialInput[]
    upsert?: ProjectMaterialUpsertWithWhereUniqueWithoutGlobalMaterialInput | ProjectMaterialUpsertWithWhereUniqueWithoutGlobalMaterialInput[]
    createMany?: ProjectMaterialCreateManyGlobalMaterialInputEnvelope
    set?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    disconnect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    delete?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    connect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    update?: ProjectMaterialUpdateWithWhereUniqueWithoutGlobalMaterialInput | ProjectMaterialUpdateWithWhereUniqueWithoutGlobalMaterialInput[]
    updateMany?: ProjectMaterialUpdateManyWithWhereWithoutGlobalMaterialInput | ProjectMaterialUpdateManyWithWhereWithoutGlobalMaterialInput[]
    deleteMany?: ProjectMaterialScalarWhereInput | ProjectMaterialScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutGlobalMaterialNestedInput = {
    create?: XOR<CommentCreateWithoutGlobalMaterialInput, CommentUncheckedCreateWithoutGlobalMaterialInput> | CommentCreateWithoutGlobalMaterialInput[] | CommentUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutGlobalMaterialInput | CommentCreateOrConnectWithoutGlobalMaterialInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutGlobalMaterialInput | CommentUpsertWithWhereUniqueWithoutGlobalMaterialInput[]
    createMany?: CommentCreateManyGlobalMaterialInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutGlobalMaterialInput | CommentUpdateWithWhereUniqueWithoutGlobalMaterialInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutGlobalMaterialInput | CommentUpdateManyWithWhereWithoutGlobalMaterialInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DiffNotificationUpdateManyWithoutGlobalMaterialNestedInput = {
    create?: XOR<DiffNotificationCreateWithoutGlobalMaterialInput, DiffNotificationUncheckedCreateWithoutGlobalMaterialInput> | DiffNotificationCreateWithoutGlobalMaterialInput[] | DiffNotificationUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutGlobalMaterialInput | DiffNotificationCreateOrConnectWithoutGlobalMaterialInput[]
    upsert?: DiffNotificationUpsertWithWhereUniqueWithoutGlobalMaterialInput | DiffNotificationUpsertWithWhereUniqueWithoutGlobalMaterialInput[]
    createMany?: DiffNotificationCreateManyGlobalMaterialInputEnvelope
    set?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    disconnect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    delete?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    update?: DiffNotificationUpdateWithWhereUniqueWithoutGlobalMaterialInput | DiffNotificationUpdateWithWhereUniqueWithoutGlobalMaterialInput[]
    updateMany?: DiffNotificationUpdateManyWithWhereWithoutGlobalMaterialInput | DiffNotificationUpdateManyWithWhereWithoutGlobalMaterialInput[]
    deleteMany?: DiffNotificationScalarWhereInput | DiffNotificationScalarWhereInput[]
  }

  export type ProjectMaterialUncheckedUpdateManyWithoutGlobalMaterialNestedInput = {
    create?: XOR<ProjectMaterialCreateWithoutGlobalMaterialInput, ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput> | ProjectMaterialCreateWithoutGlobalMaterialInput[] | ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutGlobalMaterialInput | ProjectMaterialCreateOrConnectWithoutGlobalMaterialInput[]
    upsert?: ProjectMaterialUpsertWithWhereUniqueWithoutGlobalMaterialInput | ProjectMaterialUpsertWithWhereUniqueWithoutGlobalMaterialInput[]
    createMany?: ProjectMaterialCreateManyGlobalMaterialInputEnvelope
    set?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    disconnect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    delete?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    connect?: ProjectMaterialWhereUniqueInput | ProjectMaterialWhereUniqueInput[]
    update?: ProjectMaterialUpdateWithWhereUniqueWithoutGlobalMaterialInput | ProjectMaterialUpdateWithWhereUniqueWithoutGlobalMaterialInput[]
    updateMany?: ProjectMaterialUpdateManyWithWhereWithoutGlobalMaterialInput | ProjectMaterialUpdateManyWithWhereWithoutGlobalMaterialInput[]
    deleteMany?: ProjectMaterialScalarWhereInput | ProjectMaterialScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutGlobalMaterialNestedInput = {
    create?: XOR<CommentCreateWithoutGlobalMaterialInput, CommentUncheckedCreateWithoutGlobalMaterialInput> | CommentCreateWithoutGlobalMaterialInput[] | CommentUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutGlobalMaterialInput | CommentCreateOrConnectWithoutGlobalMaterialInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutGlobalMaterialInput | CommentUpsertWithWhereUniqueWithoutGlobalMaterialInput[]
    createMany?: CommentCreateManyGlobalMaterialInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutGlobalMaterialInput | CommentUpdateWithWhereUniqueWithoutGlobalMaterialInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutGlobalMaterialInput | CommentUpdateManyWithWhereWithoutGlobalMaterialInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DiffNotificationUncheckedUpdateManyWithoutGlobalMaterialNestedInput = {
    create?: XOR<DiffNotificationCreateWithoutGlobalMaterialInput, DiffNotificationUncheckedCreateWithoutGlobalMaterialInput> | DiffNotificationCreateWithoutGlobalMaterialInput[] | DiffNotificationUncheckedCreateWithoutGlobalMaterialInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutGlobalMaterialInput | DiffNotificationCreateOrConnectWithoutGlobalMaterialInput[]
    upsert?: DiffNotificationUpsertWithWhereUniqueWithoutGlobalMaterialInput | DiffNotificationUpsertWithWhereUniqueWithoutGlobalMaterialInput[]
    createMany?: DiffNotificationCreateManyGlobalMaterialInputEnvelope
    set?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    disconnect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    delete?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    update?: DiffNotificationUpdateWithWhereUniqueWithoutGlobalMaterialInput | DiffNotificationUpdateWithWhereUniqueWithoutGlobalMaterialInput[]
    updateMany?: DiffNotificationUpdateManyWithWhereWithoutGlobalMaterialInput | DiffNotificationUpdateManyWithWhereWithoutGlobalMaterialInput[]
    deleteMany?: DiffNotificationScalarWhereInput | DiffNotificationScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutMaterialsInput = {
    create?: XOR<ProjectCreateWithoutMaterialsInput, ProjectUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMaterialsInput
    connect?: ProjectWhereUniqueInput
  }

  export type GlobalMaterialCreateNestedOneWithoutProjectMaterialsInput = {
    create?: XOR<GlobalMaterialCreateWithoutProjectMaterialsInput, GlobalMaterialUncheckedCreateWithoutProjectMaterialsInput>
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutProjectMaterialsInput
    connect?: GlobalMaterialWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutProjectMaterialInput = {
    create?: XOR<CommentCreateWithoutProjectMaterialInput, CommentUncheckedCreateWithoutProjectMaterialInput> | CommentCreateWithoutProjectMaterialInput[] | CommentUncheckedCreateWithoutProjectMaterialInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectMaterialInput | CommentCreateOrConnectWithoutProjectMaterialInput[]
    createMany?: CommentCreateManyProjectMaterialInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutProjectMaterialInput = {
    create?: XOR<CommentCreateWithoutProjectMaterialInput, CommentUncheckedCreateWithoutProjectMaterialInput> | CommentCreateWithoutProjectMaterialInput[] | CommentUncheckedCreateWithoutProjectMaterialInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectMaterialInput | CommentCreateOrConnectWithoutProjectMaterialInput[]
    createMany?: CommentCreateManyProjectMaterialInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProjectUpdateOneRequiredWithoutMaterialsNestedInput = {
    create?: XOR<ProjectCreateWithoutMaterialsInput, ProjectUncheckedCreateWithoutMaterialsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMaterialsInput
    upsert?: ProjectUpsertWithoutMaterialsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutMaterialsInput, ProjectUpdateWithoutMaterialsInput>, ProjectUncheckedUpdateWithoutMaterialsInput>
  }

  export type GlobalMaterialUpdateOneRequiredWithoutProjectMaterialsNestedInput = {
    create?: XOR<GlobalMaterialCreateWithoutProjectMaterialsInput, GlobalMaterialUncheckedCreateWithoutProjectMaterialsInput>
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutProjectMaterialsInput
    upsert?: GlobalMaterialUpsertWithoutProjectMaterialsInput
    connect?: GlobalMaterialWhereUniqueInput
    update?: XOR<XOR<GlobalMaterialUpdateToOneWithWhereWithoutProjectMaterialsInput, GlobalMaterialUpdateWithoutProjectMaterialsInput>, GlobalMaterialUncheckedUpdateWithoutProjectMaterialsInput>
  }

  export type CommentUpdateManyWithoutProjectMaterialNestedInput = {
    create?: XOR<CommentCreateWithoutProjectMaterialInput, CommentUncheckedCreateWithoutProjectMaterialInput> | CommentCreateWithoutProjectMaterialInput[] | CommentUncheckedCreateWithoutProjectMaterialInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectMaterialInput | CommentCreateOrConnectWithoutProjectMaterialInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectMaterialInput | CommentUpsertWithWhereUniqueWithoutProjectMaterialInput[]
    createMany?: CommentCreateManyProjectMaterialInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectMaterialInput | CommentUpdateWithWhereUniqueWithoutProjectMaterialInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectMaterialInput | CommentUpdateManyWithWhereWithoutProjectMaterialInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutProjectMaterialNestedInput = {
    create?: XOR<CommentCreateWithoutProjectMaterialInput, CommentUncheckedCreateWithoutProjectMaterialInput> | CommentCreateWithoutProjectMaterialInput[] | CommentUncheckedCreateWithoutProjectMaterialInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectMaterialInput | CommentCreateOrConnectWithoutProjectMaterialInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectMaterialInput | CommentUpsertWithWhereUniqueWithoutProjectMaterialInput[]
    createMany?: CommentCreateManyProjectMaterialInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectMaterialInput | CommentUpdateWithWhereUniqueWithoutProjectMaterialInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectMaterialInput | CommentUpdateManyWithWhereWithoutProjectMaterialInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectSupplierCreateNestedManyWithoutGlobalSupplierInput = {
    create?: XOR<ProjectSupplierCreateWithoutGlobalSupplierInput, ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput> | ProjectSupplierCreateWithoutGlobalSupplierInput[] | ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutGlobalSupplierInput | ProjectSupplierCreateOrConnectWithoutGlobalSupplierInput[]
    createMany?: ProjectSupplierCreateManyGlobalSupplierInputEnvelope
    connect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutGlobalSupplierInput = {
    create?: XOR<CommentCreateWithoutGlobalSupplierInput, CommentUncheckedCreateWithoutGlobalSupplierInput> | CommentCreateWithoutGlobalSupplierInput[] | CommentUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutGlobalSupplierInput | CommentCreateOrConnectWithoutGlobalSupplierInput[]
    createMany?: CommentCreateManyGlobalSupplierInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DiffNotificationCreateNestedManyWithoutGlobalSupplierInput = {
    create?: XOR<DiffNotificationCreateWithoutGlobalSupplierInput, DiffNotificationUncheckedCreateWithoutGlobalSupplierInput> | DiffNotificationCreateWithoutGlobalSupplierInput[] | DiffNotificationUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutGlobalSupplierInput | DiffNotificationCreateOrConnectWithoutGlobalSupplierInput[]
    createMany?: DiffNotificationCreateManyGlobalSupplierInputEnvelope
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
  }

  export type ProjectSupplierUncheckedCreateNestedManyWithoutGlobalSupplierInput = {
    create?: XOR<ProjectSupplierCreateWithoutGlobalSupplierInput, ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput> | ProjectSupplierCreateWithoutGlobalSupplierInput[] | ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutGlobalSupplierInput | ProjectSupplierCreateOrConnectWithoutGlobalSupplierInput[]
    createMany?: ProjectSupplierCreateManyGlobalSupplierInputEnvelope
    connect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutGlobalSupplierInput = {
    create?: XOR<CommentCreateWithoutGlobalSupplierInput, CommentUncheckedCreateWithoutGlobalSupplierInput> | CommentCreateWithoutGlobalSupplierInput[] | CommentUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutGlobalSupplierInput | CommentCreateOrConnectWithoutGlobalSupplierInput[]
    createMany?: CommentCreateManyGlobalSupplierInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DiffNotificationUncheckedCreateNestedManyWithoutGlobalSupplierInput = {
    create?: XOR<DiffNotificationCreateWithoutGlobalSupplierInput, DiffNotificationUncheckedCreateWithoutGlobalSupplierInput> | DiffNotificationCreateWithoutGlobalSupplierInput[] | DiffNotificationUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutGlobalSupplierInput | DiffNotificationCreateOrConnectWithoutGlobalSupplierInput[]
    createMany?: DiffNotificationCreateManyGlobalSupplierInputEnvelope
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectSupplierUpdateManyWithoutGlobalSupplierNestedInput = {
    create?: XOR<ProjectSupplierCreateWithoutGlobalSupplierInput, ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput> | ProjectSupplierCreateWithoutGlobalSupplierInput[] | ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutGlobalSupplierInput | ProjectSupplierCreateOrConnectWithoutGlobalSupplierInput[]
    upsert?: ProjectSupplierUpsertWithWhereUniqueWithoutGlobalSupplierInput | ProjectSupplierUpsertWithWhereUniqueWithoutGlobalSupplierInput[]
    createMany?: ProjectSupplierCreateManyGlobalSupplierInputEnvelope
    set?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    disconnect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    delete?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    connect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    update?: ProjectSupplierUpdateWithWhereUniqueWithoutGlobalSupplierInput | ProjectSupplierUpdateWithWhereUniqueWithoutGlobalSupplierInput[]
    updateMany?: ProjectSupplierUpdateManyWithWhereWithoutGlobalSupplierInput | ProjectSupplierUpdateManyWithWhereWithoutGlobalSupplierInput[]
    deleteMany?: ProjectSupplierScalarWhereInput | ProjectSupplierScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutGlobalSupplierNestedInput = {
    create?: XOR<CommentCreateWithoutGlobalSupplierInput, CommentUncheckedCreateWithoutGlobalSupplierInput> | CommentCreateWithoutGlobalSupplierInput[] | CommentUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutGlobalSupplierInput | CommentCreateOrConnectWithoutGlobalSupplierInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutGlobalSupplierInput | CommentUpsertWithWhereUniqueWithoutGlobalSupplierInput[]
    createMany?: CommentCreateManyGlobalSupplierInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutGlobalSupplierInput | CommentUpdateWithWhereUniqueWithoutGlobalSupplierInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutGlobalSupplierInput | CommentUpdateManyWithWhereWithoutGlobalSupplierInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DiffNotificationUpdateManyWithoutGlobalSupplierNestedInput = {
    create?: XOR<DiffNotificationCreateWithoutGlobalSupplierInput, DiffNotificationUncheckedCreateWithoutGlobalSupplierInput> | DiffNotificationCreateWithoutGlobalSupplierInput[] | DiffNotificationUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutGlobalSupplierInput | DiffNotificationCreateOrConnectWithoutGlobalSupplierInput[]
    upsert?: DiffNotificationUpsertWithWhereUniqueWithoutGlobalSupplierInput | DiffNotificationUpsertWithWhereUniqueWithoutGlobalSupplierInput[]
    createMany?: DiffNotificationCreateManyGlobalSupplierInputEnvelope
    set?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    disconnect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    delete?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    update?: DiffNotificationUpdateWithWhereUniqueWithoutGlobalSupplierInput | DiffNotificationUpdateWithWhereUniqueWithoutGlobalSupplierInput[]
    updateMany?: DiffNotificationUpdateManyWithWhereWithoutGlobalSupplierInput | DiffNotificationUpdateManyWithWhereWithoutGlobalSupplierInput[]
    deleteMany?: DiffNotificationScalarWhereInput | DiffNotificationScalarWhereInput[]
  }

  export type ProjectSupplierUncheckedUpdateManyWithoutGlobalSupplierNestedInput = {
    create?: XOR<ProjectSupplierCreateWithoutGlobalSupplierInput, ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput> | ProjectSupplierCreateWithoutGlobalSupplierInput[] | ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutGlobalSupplierInput | ProjectSupplierCreateOrConnectWithoutGlobalSupplierInput[]
    upsert?: ProjectSupplierUpsertWithWhereUniqueWithoutGlobalSupplierInput | ProjectSupplierUpsertWithWhereUniqueWithoutGlobalSupplierInput[]
    createMany?: ProjectSupplierCreateManyGlobalSupplierInputEnvelope
    set?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    disconnect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    delete?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    connect?: ProjectSupplierWhereUniqueInput | ProjectSupplierWhereUniqueInput[]
    update?: ProjectSupplierUpdateWithWhereUniqueWithoutGlobalSupplierInput | ProjectSupplierUpdateWithWhereUniqueWithoutGlobalSupplierInput[]
    updateMany?: ProjectSupplierUpdateManyWithWhereWithoutGlobalSupplierInput | ProjectSupplierUpdateManyWithWhereWithoutGlobalSupplierInput[]
    deleteMany?: ProjectSupplierScalarWhereInput | ProjectSupplierScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutGlobalSupplierNestedInput = {
    create?: XOR<CommentCreateWithoutGlobalSupplierInput, CommentUncheckedCreateWithoutGlobalSupplierInput> | CommentCreateWithoutGlobalSupplierInput[] | CommentUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutGlobalSupplierInput | CommentCreateOrConnectWithoutGlobalSupplierInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutGlobalSupplierInput | CommentUpsertWithWhereUniqueWithoutGlobalSupplierInput[]
    createMany?: CommentCreateManyGlobalSupplierInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutGlobalSupplierInput | CommentUpdateWithWhereUniqueWithoutGlobalSupplierInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutGlobalSupplierInput | CommentUpdateManyWithWhereWithoutGlobalSupplierInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DiffNotificationUncheckedUpdateManyWithoutGlobalSupplierNestedInput = {
    create?: XOR<DiffNotificationCreateWithoutGlobalSupplierInput, DiffNotificationUncheckedCreateWithoutGlobalSupplierInput> | DiffNotificationCreateWithoutGlobalSupplierInput[] | DiffNotificationUncheckedCreateWithoutGlobalSupplierInput[]
    connectOrCreate?: DiffNotificationCreateOrConnectWithoutGlobalSupplierInput | DiffNotificationCreateOrConnectWithoutGlobalSupplierInput[]
    upsert?: DiffNotificationUpsertWithWhereUniqueWithoutGlobalSupplierInput | DiffNotificationUpsertWithWhereUniqueWithoutGlobalSupplierInput[]
    createMany?: DiffNotificationCreateManyGlobalSupplierInputEnvelope
    set?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    disconnect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    delete?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    connect?: DiffNotificationWhereUniqueInput | DiffNotificationWhereUniqueInput[]
    update?: DiffNotificationUpdateWithWhereUniqueWithoutGlobalSupplierInput | DiffNotificationUpdateWithWhereUniqueWithoutGlobalSupplierInput[]
    updateMany?: DiffNotificationUpdateManyWithWhereWithoutGlobalSupplierInput | DiffNotificationUpdateManyWithWhereWithoutGlobalSupplierInput[]
    deleteMany?: DiffNotificationScalarWhereInput | DiffNotificationScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutSuppliersInput = {
    create?: XOR<ProjectCreateWithoutSuppliersInput, ProjectUncheckedCreateWithoutSuppliersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSuppliersInput
    connect?: ProjectWhereUniqueInput
  }

  export type GlobalSupplierCreateNestedOneWithoutProjectSuppliersInput = {
    create?: XOR<GlobalSupplierCreateWithoutProjectSuppliersInput, GlobalSupplierUncheckedCreateWithoutProjectSuppliersInput>
    connectOrCreate?: GlobalSupplierCreateOrConnectWithoutProjectSuppliersInput
    connect?: GlobalSupplierWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutProjectSupplierInput = {
    create?: XOR<CommentCreateWithoutProjectSupplierInput, CommentUncheckedCreateWithoutProjectSupplierInput> | CommentCreateWithoutProjectSupplierInput[] | CommentUncheckedCreateWithoutProjectSupplierInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectSupplierInput | CommentCreateOrConnectWithoutProjectSupplierInput[]
    createMany?: CommentCreateManyProjectSupplierInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutProjectSupplierInput = {
    create?: XOR<CommentCreateWithoutProjectSupplierInput, CommentUncheckedCreateWithoutProjectSupplierInput> | CommentCreateWithoutProjectSupplierInput[] | CommentUncheckedCreateWithoutProjectSupplierInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectSupplierInput | CommentCreateOrConnectWithoutProjectSupplierInput[]
    createMany?: CommentCreateManyProjectSupplierInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutSuppliersNestedInput = {
    create?: XOR<ProjectCreateWithoutSuppliersInput, ProjectUncheckedCreateWithoutSuppliersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSuppliersInput
    upsert?: ProjectUpsertWithoutSuppliersInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutSuppliersInput, ProjectUpdateWithoutSuppliersInput>, ProjectUncheckedUpdateWithoutSuppliersInput>
  }

  export type GlobalSupplierUpdateOneRequiredWithoutProjectSuppliersNestedInput = {
    create?: XOR<GlobalSupplierCreateWithoutProjectSuppliersInput, GlobalSupplierUncheckedCreateWithoutProjectSuppliersInput>
    connectOrCreate?: GlobalSupplierCreateOrConnectWithoutProjectSuppliersInput
    upsert?: GlobalSupplierUpsertWithoutProjectSuppliersInput
    connect?: GlobalSupplierWhereUniqueInput
    update?: XOR<XOR<GlobalSupplierUpdateToOneWithWhereWithoutProjectSuppliersInput, GlobalSupplierUpdateWithoutProjectSuppliersInput>, GlobalSupplierUncheckedUpdateWithoutProjectSuppliersInput>
  }

  export type CommentUpdateManyWithoutProjectSupplierNestedInput = {
    create?: XOR<CommentCreateWithoutProjectSupplierInput, CommentUncheckedCreateWithoutProjectSupplierInput> | CommentCreateWithoutProjectSupplierInput[] | CommentUncheckedCreateWithoutProjectSupplierInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectSupplierInput | CommentCreateOrConnectWithoutProjectSupplierInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectSupplierInput | CommentUpsertWithWhereUniqueWithoutProjectSupplierInput[]
    createMany?: CommentCreateManyProjectSupplierInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectSupplierInput | CommentUpdateWithWhereUniqueWithoutProjectSupplierInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectSupplierInput | CommentUpdateManyWithWhereWithoutProjectSupplierInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutProjectSupplierNestedInput = {
    create?: XOR<CommentCreateWithoutProjectSupplierInput, CommentUncheckedCreateWithoutProjectSupplierInput> | CommentCreateWithoutProjectSupplierInput[] | CommentUncheckedCreateWithoutProjectSupplierInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectSupplierInput | CommentCreateOrConnectWithoutProjectSupplierInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectSupplierInput | CommentUpsertWithWhereUniqueWithoutProjectSupplierInput[]
    createMany?: CommentCreateManyProjectSupplierInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectSupplierInput | CommentUpdateWithWhereUniqueWithoutProjectSupplierInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectSupplierInput | CommentUpdateManyWithWhereWithoutProjectSupplierInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type GlobalMaterialCreateNestedOneWithoutCommentsInput = {
    create?: XOR<GlobalMaterialCreateWithoutCommentsInput, GlobalMaterialUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutCommentsInput
    connect?: GlobalMaterialWhereUniqueInput
  }

  export type ProjectMaterialCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ProjectMaterialCreateWithoutCommentsInput, ProjectMaterialUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutCommentsInput
    connect?: ProjectMaterialWhereUniqueInput
  }

  export type GlobalSupplierCreateNestedOneWithoutCommentsInput = {
    create?: XOR<GlobalSupplierCreateWithoutCommentsInput, GlobalSupplierUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: GlobalSupplierCreateOrConnectWithoutCommentsInput
    connect?: GlobalSupplierWhereUniqueInput
  }

  export type ProjectSupplierCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ProjectSupplierCreateWithoutCommentsInput, ProjectSupplierUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutCommentsInput
    connect?: ProjectSupplierWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    upsert?: ProjectUpsertWithoutCommentsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutCommentsInput, ProjectUpdateWithoutCommentsInput>, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type GlobalMaterialUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<GlobalMaterialCreateWithoutCommentsInput, GlobalMaterialUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutCommentsInput
    upsert?: GlobalMaterialUpsertWithoutCommentsInput
    disconnect?: GlobalMaterialWhereInput | boolean
    delete?: GlobalMaterialWhereInput | boolean
    connect?: GlobalMaterialWhereUniqueInput
    update?: XOR<XOR<GlobalMaterialUpdateToOneWithWhereWithoutCommentsInput, GlobalMaterialUpdateWithoutCommentsInput>, GlobalMaterialUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectMaterialUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<ProjectMaterialCreateWithoutCommentsInput, ProjectMaterialUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectMaterialCreateOrConnectWithoutCommentsInput
    upsert?: ProjectMaterialUpsertWithoutCommentsInput
    disconnect?: ProjectMaterialWhereInput | boolean
    delete?: ProjectMaterialWhereInput | boolean
    connect?: ProjectMaterialWhereUniqueInput
    update?: XOR<XOR<ProjectMaterialUpdateToOneWithWhereWithoutCommentsInput, ProjectMaterialUpdateWithoutCommentsInput>, ProjectMaterialUncheckedUpdateWithoutCommentsInput>
  }

  export type GlobalSupplierUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<GlobalSupplierCreateWithoutCommentsInput, GlobalSupplierUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: GlobalSupplierCreateOrConnectWithoutCommentsInput
    upsert?: GlobalSupplierUpsertWithoutCommentsInput
    disconnect?: GlobalSupplierWhereInput | boolean
    delete?: GlobalSupplierWhereInput | boolean
    connect?: GlobalSupplierWhereUniqueInput
    update?: XOR<XOR<GlobalSupplierUpdateToOneWithWhereWithoutCommentsInput, GlobalSupplierUpdateWithoutCommentsInput>, GlobalSupplierUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectSupplierUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<ProjectSupplierCreateWithoutCommentsInput, ProjectSupplierUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectSupplierCreateOrConnectWithoutCommentsInput
    upsert?: ProjectSupplierUpsertWithoutCommentsInput
    disconnect?: ProjectSupplierWhereInput | boolean
    delete?: ProjectSupplierWhereInput | boolean
    connect?: ProjectSupplierWhereUniqueInput
    update?: XOR<XOR<ProjectSupplierUpdateToOneWithWhereWithoutCommentsInput, ProjectSupplierUpdateWithoutCommentsInput>, ProjectSupplierUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectCreateNestedOneWithoutDiffNotificationsInput = {
    create?: XOR<ProjectCreateWithoutDiffNotificationsInput, ProjectUncheckedCreateWithoutDiffNotificationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDiffNotificationsInput
    connect?: ProjectWhereUniqueInput
  }

  export type GlobalMaterialCreateNestedOneWithoutDiffNotificationsInput = {
    create?: XOR<GlobalMaterialCreateWithoutDiffNotificationsInput, GlobalMaterialUncheckedCreateWithoutDiffNotificationsInput>
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutDiffNotificationsInput
    connect?: GlobalMaterialWhereUniqueInput
  }

  export type GlobalSupplierCreateNestedOneWithoutDiffNotificationsInput = {
    create?: XOR<GlobalSupplierCreateWithoutDiffNotificationsInput, GlobalSupplierUncheckedCreateWithoutDiffNotificationsInput>
    connectOrCreate?: GlobalSupplierCreateOrConnectWithoutDiffNotificationsInput
    connect?: GlobalSupplierWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutDiffNotificationsNestedInput = {
    create?: XOR<ProjectCreateWithoutDiffNotificationsInput, ProjectUncheckedCreateWithoutDiffNotificationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDiffNotificationsInput
    upsert?: ProjectUpsertWithoutDiffNotificationsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDiffNotificationsInput, ProjectUpdateWithoutDiffNotificationsInput>, ProjectUncheckedUpdateWithoutDiffNotificationsInput>
  }

  export type GlobalMaterialUpdateOneWithoutDiffNotificationsNestedInput = {
    create?: XOR<GlobalMaterialCreateWithoutDiffNotificationsInput, GlobalMaterialUncheckedCreateWithoutDiffNotificationsInput>
    connectOrCreate?: GlobalMaterialCreateOrConnectWithoutDiffNotificationsInput
    upsert?: GlobalMaterialUpsertWithoutDiffNotificationsInput
    disconnect?: GlobalMaterialWhereInput | boolean
    delete?: GlobalMaterialWhereInput | boolean
    connect?: GlobalMaterialWhereUniqueInput
    update?: XOR<XOR<GlobalMaterialUpdateToOneWithWhereWithoutDiffNotificationsInput, GlobalMaterialUpdateWithoutDiffNotificationsInput>, GlobalMaterialUncheckedUpdateWithoutDiffNotificationsInput>
  }

  export type GlobalSupplierUpdateOneWithoutDiffNotificationsNestedInput = {
    create?: XOR<GlobalSupplierCreateWithoutDiffNotificationsInput, GlobalSupplierUncheckedCreateWithoutDiffNotificationsInput>
    connectOrCreate?: GlobalSupplierCreateOrConnectWithoutDiffNotificationsInput
    upsert?: GlobalSupplierUpsertWithoutDiffNotificationsInput
    disconnect?: GlobalSupplierWhereInput | boolean
    delete?: GlobalSupplierWhereInput | boolean
    connect?: GlobalSupplierWhereUniqueInput
    update?: XOR<XOR<GlobalSupplierUpdateToOneWithWhereWithoutDiffNotificationsInput, GlobalSupplierUpdateWithoutDiffNotificationsInput>, GlobalSupplierUncheckedUpdateWithoutDiffNotificationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProjectCreateWithoutResponsibleInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    materials?: ProjectMaterialCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutResponsibleInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    materials?: ProjectMaterialUncheckedCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutResponsibleInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutResponsibleInput, ProjectUncheckedCreateWithoutResponsibleInput>
  }

  export type ProjectCreateManyResponsibleInputEnvelope = {
    data: ProjectCreateManyResponsibleInput | ProjectCreateManyResponsibleInput[]
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    project?: ProjectCreateNestedOneWithoutCommentsInput
    globalMaterial?: GlobalMaterialCreateNestedOneWithoutCommentsInput
    projectMaterial?: ProjectMaterialCreateNestedOneWithoutCommentsInput
    globalSupplier?: GlobalSupplierCreateNestedOneWithoutCommentsInput
    projectSupplier?: ProjectSupplierCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    entityType: string
    entityId: string
    scope: string
    content: string
    createdAt?: Date | string
    projectId?: string | null
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
  }

  export type ProjectMemberCreateWithoutUserInput = {
    id?: string
    role?: string
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutMembersInput
  }

  export type ProjectMemberUncheckedCreateWithoutUserInput = {
    id?: string
    role?: string
    createdAt?: Date | string
    projectId: string
  }

  export type ProjectMemberCreateOrConnectWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    create: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput>
  }

  export type ProjectMemberCreateManyUserInputEnvelope = {
    data: ProjectMemberCreateManyUserInput | ProjectMemberCreateManyUserInput[]
  }

  export type GlobalMaterialCreateWithoutCreatedByInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectMaterials?: ProjectMaterialCreateNestedManyWithoutGlobalMaterialInput
    comments?: CommentCreateNestedManyWithoutGlobalMaterialInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectMaterials?: ProjectMaterialUncheckedCreateNestedManyWithoutGlobalMaterialInput
    comments?: CommentUncheckedCreateNestedManyWithoutGlobalMaterialInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialCreateOrConnectWithoutCreatedByInput = {
    where: GlobalMaterialWhereUniqueInput
    create: XOR<GlobalMaterialCreateWithoutCreatedByInput, GlobalMaterialUncheckedCreateWithoutCreatedByInput>
  }

  export type GlobalMaterialCreateManyCreatedByInputEnvelope = {
    data: GlobalMaterialCreateManyCreatedByInput | GlobalMaterialCreateManyCreatedByInput[]
  }

  export type ProjectUpsertWithWhereUniqueWithoutResponsibleInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutResponsibleInput, ProjectUncheckedUpdateWithoutResponsibleInput>
    create: XOR<ProjectCreateWithoutResponsibleInput, ProjectUncheckedCreateWithoutResponsibleInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutResponsibleInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutResponsibleInput, ProjectUncheckedUpdateWithoutResponsibleInput>
  }

  export type ProjectUpdateManyWithWhereWithoutResponsibleInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutResponsibleInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    startDate?: DateTimeFilter<"Project"> | Date | string
    endDate?: DateTimeFilter<"Project"> | Date | string
    location?: StringFilter<"Project"> | string
    status?: StringFilter<"Project"> | string
    budget?: FloatNullableFilter<"Project"> | number | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    responsibleId?: StringFilter<"Project"> | string
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    entityType?: StringFilter<"Comment"> | string
    entityId?: StringFilter<"Comment"> | string
    scope?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
  }

  export type ProjectMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    update: XOR<ProjectMemberUpdateWithoutUserInput, ProjectMemberUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput>
  }

  export type ProjectMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    data: XOR<ProjectMemberUpdateWithoutUserInput, ProjectMemberUncheckedUpdateWithoutUserInput>
  }

  export type ProjectMemberUpdateManyWithWhereWithoutUserInput = {
    where: ProjectMemberScalarWhereInput
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectMemberScalarWhereInput = {
    AND?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
    OR?: ProjectMemberScalarWhereInput[]
    NOT?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
    id?: StringFilter<"ProjectMember"> | string
    role?: StringFilter<"ProjectMember"> | string
    createdAt?: DateTimeFilter<"ProjectMember"> | Date | string
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
  }

  export type GlobalMaterialUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: GlobalMaterialWhereUniqueInput
    update: XOR<GlobalMaterialUpdateWithoutCreatedByInput, GlobalMaterialUncheckedUpdateWithoutCreatedByInput>
    create: XOR<GlobalMaterialCreateWithoutCreatedByInput, GlobalMaterialUncheckedCreateWithoutCreatedByInput>
  }

  export type GlobalMaterialUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: GlobalMaterialWhereUniqueInput
    data: XOR<GlobalMaterialUpdateWithoutCreatedByInput, GlobalMaterialUncheckedUpdateWithoutCreatedByInput>
  }

  export type GlobalMaterialUpdateManyWithWhereWithoutCreatedByInput = {
    where: GlobalMaterialScalarWhereInput
    data: XOR<GlobalMaterialUpdateManyMutationInput, GlobalMaterialUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type GlobalMaterialScalarWhereInput = {
    AND?: GlobalMaterialScalarWhereInput | GlobalMaterialScalarWhereInput[]
    OR?: GlobalMaterialScalarWhereInput[]
    NOT?: GlobalMaterialScalarWhereInput | GlobalMaterialScalarWhereInput[]
    id?: StringFilter<"GlobalMaterial"> | string
    name?: StringFilter<"GlobalMaterial"> | string
    category?: StringFilter<"GlobalMaterial"> | string
    unit?: StringFilter<"GlobalMaterial"> | string
    specs?: StringNullableFilter<"GlobalMaterial"> | string | null
    portfolio?: StringNullableFilter<"GlobalMaterial"> | string | null
    standardLeadTime?: IntNullableFilter<"GlobalMaterial"> | number | null
    version?: IntFilter<"GlobalMaterial"> | number
    createdAt?: DateTimeFilter<"GlobalMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"GlobalMaterial"> | Date | string
    createdById?: StringFilter<"GlobalMaterial"> | string
  }

  export type UserCreateWithoutProjectsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutAuthorInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    createdMaterials?: GlobalMaterialCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdMaterials?: GlobalMaterialUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type ProjectMaterialCreateWithoutProjectInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    globalMaterial: GlobalMaterialCreateNestedOneWithoutProjectMaterialsInput
    comments?: CommentCreateNestedManyWithoutProjectMaterialInput
  }

  export type ProjectMaterialUncheckedCreateWithoutProjectInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    globalMaterialId: string
    comments?: CommentUncheckedCreateNestedManyWithoutProjectMaterialInput
  }

  export type ProjectMaterialCreateOrConnectWithoutProjectInput = {
    where: ProjectMaterialWhereUniqueInput
    create: XOR<ProjectMaterialCreateWithoutProjectInput, ProjectMaterialUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMaterialCreateManyProjectInputEnvelope = {
    data: ProjectMaterialCreateManyProjectInput | ProjectMaterialCreateManyProjectInput[]
  }

  export type ProjectSupplierCreateWithoutProjectInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    globalSupplier: GlobalSupplierCreateNestedOneWithoutProjectSuppliersInput
    comments?: CommentCreateNestedManyWithoutProjectSupplierInput
  }

  export type ProjectSupplierUncheckedCreateWithoutProjectInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    globalSupplierId: string
    comments?: CommentUncheckedCreateNestedManyWithoutProjectSupplierInput
  }

  export type ProjectSupplierCreateOrConnectWithoutProjectInput = {
    where: ProjectSupplierWhereUniqueInput
    create: XOR<ProjectSupplierCreateWithoutProjectInput, ProjectSupplierUncheckedCreateWithoutProjectInput>
  }

  export type ProjectSupplierCreateManyProjectInputEnvelope = {
    data: ProjectSupplierCreateManyProjectInput | ProjectSupplierCreateManyProjectInput[]
  }

  export type ProjectMemberCreateWithoutProjectInput = {
    id?: string
    role?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutProjectMembersInput
  }

  export type ProjectMemberUncheckedCreateWithoutProjectInput = {
    id?: string
    role?: string
    createdAt?: Date | string
    userId: string
  }

  export type ProjectMemberCreateOrConnectWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    create: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMemberCreateManyProjectInputEnvelope = {
    data: ProjectMemberCreateManyProjectInput | ProjectMemberCreateManyProjectInput[]
  }

  export type CommentCreateWithoutProjectInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    globalMaterial?: GlobalMaterialCreateNestedOneWithoutCommentsInput
    projectMaterial?: ProjectMaterialCreateNestedOneWithoutCommentsInput
    globalSupplier?: GlobalSupplierCreateNestedOneWithoutCommentsInput
    projectSupplier?: ProjectSupplierCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutProjectInput = {
    id?: string
    entityType: string
    entityId: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
  }

  export type CommentCreateOrConnectWithoutProjectInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentCreateManyProjectInputEnvelope = {
    data: CommentCreateManyProjectInput | CommentCreateManyProjectInput[]
  }

  export type DiffNotificationCreateWithoutProjectInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    globalMaterial?: GlobalMaterialCreateNestedOneWithoutDiffNotificationsInput
    globalSupplier?: GlobalSupplierCreateNestedOneWithoutDiffNotificationsInput
  }

  export type DiffNotificationUncheckedCreateWithoutProjectInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    globalEntityId: string
  }

  export type DiffNotificationCreateOrConnectWithoutProjectInput = {
    where: DiffNotificationWhereUniqueInput
    create: XOR<DiffNotificationCreateWithoutProjectInput, DiffNotificationUncheckedCreateWithoutProjectInput>
  }

  export type DiffNotificationCreateManyProjectInputEnvelope = {
    data: DiffNotificationCreateManyProjectInput | DiffNotificationCreateManyProjectInput[]
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdMaterials?: GlobalMaterialUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdMaterials?: GlobalMaterialUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ProjectMaterialUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectMaterialWhereUniqueInput
    update: XOR<ProjectMaterialUpdateWithoutProjectInput, ProjectMaterialUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectMaterialCreateWithoutProjectInput, ProjectMaterialUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMaterialUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectMaterialWhereUniqueInput
    data: XOR<ProjectMaterialUpdateWithoutProjectInput, ProjectMaterialUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectMaterialUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectMaterialScalarWhereInput
    data: XOR<ProjectMaterialUpdateManyMutationInput, ProjectMaterialUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectMaterialScalarWhereInput = {
    AND?: ProjectMaterialScalarWhereInput | ProjectMaterialScalarWhereInput[]
    OR?: ProjectMaterialScalarWhereInput[]
    NOT?: ProjectMaterialScalarWhereInput | ProjectMaterialScalarWhereInput[]
    id?: StringFilter<"ProjectMaterial"> | string
    quantity?: IntFilter<"ProjectMaterial"> | number
    phase?: StringFilter<"ProjectMaterial"> | string
    location?: StringNullableFilter<"ProjectMaterial"> | string | null
    deliveryTime?: DateTimeNullableFilter<"ProjectMaterial"> | Date | string | null
    pickupTime?: DateTimeNullableFilter<"ProjectMaterial"> | Date | string | null
    needs?: StringNullableFilter<"ProjectMaterial"> | string | null
    specialPrice?: FloatNullableFilter<"ProjectMaterial"> | number | null
    notes?: StringNullableFilter<"ProjectMaterial"> | string | null
    hasOverride?: BoolFilter<"ProjectMaterial"> | boolean
    overriddenFields?: StringNullableFilter<"ProjectMaterial"> | string | null
    lastSyncVersion?: IntFilter<"ProjectMaterial"> | number
    createdAt?: DateTimeFilter<"ProjectMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectMaterial"> | Date | string
    projectId?: StringFilter<"ProjectMaterial"> | string
    globalMaterialId?: StringFilter<"ProjectMaterial"> | string
  }

  export type ProjectSupplierUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectSupplierWhereUniqueInput
    update: XOR<ProjectSupplierUpdateWithoutProjectInput, ProjectSupplierUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectSupplierCreateWithoutProjectInput, ProjectSupplierUncheckedCreateWithoutProjectInput>
  }

  export type ProjectSupplierUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectSupplierWhereUniqueInput
    data: XOR<ProjectSupplierUpdateWithoutProjectInput, ProjectSupplierUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectSupplierUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectSupplierScalarWhereInput
    data: XOR<ProjectSupplierUpdateManyMutationInput, ProjectSupplierUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectSupplierScalarWhereInput = {
    AND?: ProjectSupplierScalarWhereInput | ProjectSupplierScalarWhereInput[]
    OR?: ProjectSupplierScalarWhereInput[]
    NOT?: ProjectSupplierScalarWhereInput | ProjectSupplierScalarWhereInput[]
    id?: StringFilter<"ProjectSupplier"> | string
    arrivalTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    setupTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    operationTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    teardownTime?: DateTimeNullableFilter<"ProjectSupplier"> | Date | string | null
    needs?: StringNullableFilter<"ProjectSupplier"> | string | null
    personnel?: IntFilter<"ProjectSupplier"> | number
    vehicles?: StringNullableFilter<"ProjectSupplier"> | string | null
    onsiteContact?: StringNullableFilter<"ProjectSupplier"> | string | null
    briefingGenerated?: BoolFilter<"ProjectSupplier"> | boolean
    hasOverride?: BoolFilter<"ProjectSupplier"> | boolean
    overriddenFields?: StringNullableFilter<"ProjectSupplier"> | string | null
    createdAt?: DateTimeFilter<"ProjectSupplier"> | Date | string
    updatedAt?: DateTimeFilter<"ProjectSupplier"> | Date | string
    projectId?: StringFilter<"ProjectSupplier"> | string
    globalSupplierId?: StringFilter<"ProjectSupplier"> | string
  }

  export type ProjectMemberUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    update: XOR<ProjectMemberUpdateWithoutProjectInput, ProjectMemberUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMemberUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    data: XOR<ProjectMemberUpdateWithoutProjectInput, ProjectMemberUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectMemberUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectMemberScalarWhereInput
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyWithoutProjectInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
  }

  export type CommentUpdateManyWithWhereWithoutProjectInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutProjectInput>
  }

  export type DiffNotificationUpsertWithWhereUniqueWithoutProjectInput = {
    where: DiffNotificationWhereUniqueInput
    update: XOR<DiffNotificationUpdateWithoutProjectInput, DiffNotificationUncheckedUpdateWithoutProjectInput>
    create: XOR<DiffNotificationCreateWithoutProjectInput, DiffNotificationUncheckedCreateWithoutProjectInput>
  }

  export type DiffNotificationUpdateWithWhereUniqueWithoutProjectInput = {
    where: DiffNotificationWhereUniqueInput
    data: XOR<DiffNotificationUpdateWithoutProjectInput, DiffNotificationUncheckedUpdateWithoutProjectInput>
  }

  export type DiffNotificationUpdateManyWithWhereWithoutProjectInput = {
    where: DiffNotificationScalarWhereInput
    data: XOR<DiffNotificationUpdateManyMutationInput, DiffNotificationUncheckedUpdateManyWithoutProjectInput>
  }

  export type DiffNotificationScalarWhereInput = {
    AND?: DiffNotificationScalarWhereInput | DiffNotificationScalarWhereInput[]
    OR?: DiffNotificationScalarWhereInput[]
    NOT?: DiffNotificationScalarWhereInput | DiffNotificationScalarWhereInput[]
    id?: StringFilter<"DiffNotification"> | string
    entityType?: StringFilter<"DiffNotification"> | string
    entityId?: StringFilter<"DiffNotification"> | string
    changes?: StringFilter<"DiffNotification"> | string
    status?: StringFilter<"DiffNotification"> | string
    createdAt?: DateTimeFilter<"DiffNotification"> | Date | string
    projectId?: StringFilter<"DiffNotification"> | string
    globalEntityId?: StringFilter<"DiffNotification"> | string
  }

  export type UserCreateWithoutProjectMembersInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutResponsibleInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    createdMaterials?: GlobalMaterialCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutProjectMembersInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutResponsibleInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    createdMaterials?: GlobalMaterialUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutProjectMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectMembersInput, UserUncheckedCreateWithoutProjectMembersInput>
  }

  export type ProjectCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsible: UserCreateNestedOneWithoutProjectsInput
    materials?: ProjectMaterialCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsibleId: string
    materials?: ProjectMaterialUncheckedCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutMembersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutProjectMembersInput = {
    update: XOR<UserUpdateWithoutProjectMembersInput, UserUncheckedUpdateWithoutProjectMembersInput>
    create: XOR<UserCreateWithoutProjectMembersInput, UserUncheckedCreateWithoutProjectMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectMembersInput, UserUncheckedUpdateWithoutProjectMembersInput>
  }

  export type UserUpdateWithoutProjectMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutResponsibleNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    createdMaterials?: GlobalMaterialUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutResponsibleNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    createdMaterials?: GlobalMaterialUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ProjectUpsertWithoutMembersInput = {
    update: XOR<ProjectUpdateWithoutMembersInput, ProjectUncheckedUpdateWithoutMembersInput>
    create: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutMembersInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutMembersInput, ProjectUncheckedUpdateWithoutMembersInput>
  }

  export type ProjectUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsible?: UserUpdateOneRequiredWithoutProjectsNestedInput
    materials?: ProjectMaterialUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsibleId?: StringFieldUpdateOperationsInput | string
    materials?: ProjectMaterialUncheckedUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserCreateWithoutCreatedMaterialsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutResponsibleInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedMaterialsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutResponsibleInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedMaterialsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedMaterialsInput, UserUncheckedCreateWithoutCreatedMaterialsInput>
  }

  export type ProjectMaterialCreateWithoutGlobalMaterialInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutMaterialsInput
    comments?: CommentCreateNestedManyWithoutProjectMaterialInput
  }

  export type ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    comments?: CommentUncheckedCreateNestedManyWithoutProjectMaterialInput
  }

  export type ProjectMaterialCreateOrConnectWithoutGlobalMaterialInput = {
    where: ProjectMaterialWhereUniqueInput
    create: XOR<ProjectMaterialCreateWithoutGlobalMaterialInput, ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput>
  }

  export type ProjectMaterialCreateManyGlobalMaterialInputEnvelope = {
    data: ProjectMaterialCreateManyGlobalMaterialInput | ProjectMaterialCreateManyGlobalMaterialInput[]
  }

  export type CommentCreateWithoutGlobalMaterialInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    projectMaterial?: ProjectMaterialCreateNestedOneWithoutCommentsInput
    globalSupplier?: GlobalSupplierCreateNestedOneWithoutCommentsInput
    projectSupplier?: ProjectSupplierCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutGlobalMaterialInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type CommentCreateOrConnectWithoutGlobalMaterialInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutGlobalMaterialInput, CommentUncheckedCreateWithoutGlobalMaterialInput>
  }

  export type CommentCreateManyGlobalMaterialInputEnvelope = {
    data: CommentCreateManyGlobalMaterialInput | CommentCreateManyGlobalMaterialInput[]
  }

  export type DiffNotificationCreateWithoutGlobalMaterialInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutDiffNotificationsInput
    globalSupplier?: GlobalSupplierCreateNestedOneWithoutDiffNotificationsInput
  }

  export type DiffNotificationUncheckedCreateWithoutGlobalMaterialInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    projectId: string
  }

  export type DiffNotificationCreateOrConnectWithoutGlobalMaterialInput = {
    where: DiffNotificationWhereUniqueInput
    create: XOR<DiffNotificationCreateWithoutGlobalMaterialInput, DiffNotificationUncheckedCreateWithoutGlobalMaterialInput>
  }

  export type DiffNotificationCreateManyGlobalMaterialInputEnvelope = {
    data: DiffNotificationCreateManyGlobalMaterialInput | DiffNotificationCreateManyGlobalMaterialInput[]
  }

  export type UserUpsertWithoutCreatedMaterialsInput = {
    update: XOR<UserUpdateWithoutCreatedMaterialsInput, UserUncheckedUpdateWithoutCreatedMaterialsInput>
    create: XOR<UserCreateWithoutCreatedMaterialsInput, UserUncheckedCreateWithoutCreatedMaterialsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedMaterialsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedMaterialsInput, UserUncheckedUpdateWithoutCreatedMaterialsInput>
  }

  export type UserUpdateWithoutCreatedMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutResponsibleNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutResponsibleNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectMaterialUpsertWithWhereUniqueWithoutGlobalMaterialInput = {
    where: ProjectMaterialWhereUniqueInput
    update: XOR<ProjectMaterialUpdateWithoutGlobalMaterialInput, ProjectMaterialUncheckedUpdateWithoutGlobalMaterialInput>
    create: XOR<ProjectMaterialCreateWithoutGlobalMaterialInput, ProjectMaterialUncheckedCreateWithoutGlobalMaterialInput>
  }

  export type ProjectMaterialUpdateWithWhereUniqueWithoutGlobalMaterialInput = {
    where: ProjectMaterialWhereUniqueInput
    data: XOR<ProjectMaterialUpdateWithoutGlobalMaterialInput, ProjectMaterialUncheckedUpdateWithoutGlobalMaterialInput>
  }

  export type ProjectMaterialUpdateManyWithWhereWithoutGlobalMaterialInput = {
    where: ProjectMaterialScalarWhereInput
    data: XOR<ProjectMaterialUpdateManyMutationInput, ProjectMaterialUncheckedUpdateManyWithoutGlobalMaterialInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutGlobalMaterialInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutGlobalMaterialInput, CommentUncheckedUpdateWithoutGlobalMaterialInput>
    create: XOR<CommentCreateWithoutGlobalMaterialInput, CommentUncheckedCreateWithoutGlobalMaterialInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutGlobalMaterialInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutGlobalMaterialInput, CommentUncheckedUpdateWithoutGlobalMaterialInput>
  }

  export type CommentUpdateManyWithWhereWithoutGlobalMaterialInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutGlobalMaterialInput>
  }

  export type DiffNotificationUpsertWithWhereUniqueWithoutGlobalMaterialInput = {
    where: DiffNotificationWhereUniqueInput
    update: XOR<DiffNotificationUpdateWithoutGlobalMaterialInput, DiffNotificationUncheckedUpdateWithoutGlobalMaterialInput>
    create: XOR<DiffNotificationCreateWithoutGlobalMaterialInput, DiffNotificationUncheckedCreateWithoutGlobalMaterialInput>
  }

  export type DiffNotificationUpdateWithWhereUniqueWithoutGlobalMaterialInput = {
    where: DiffNotificationWhereUniqueInput
    data: XOR<DiffNotificationUpdateWithoutGlobalMaterialInput, DiffNotificationUncheckedUpdateWithoutGlobalMaterialInput>
  }

  export type DiffNotificationUpdateManyWithWhereWithoutGlobalMaterialInput = {
    where: DiffNotificationScalarWhereInput
    data: XOR<DiffNotificationUpdateManyMutationInput, DiffNotificationUncheckedUpdateManyWithoutGlobalMaterialInput>
  }

  export type ProjectCreateWithoutMaterialsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsible: UserCreateNestedOneWithoutProjectsInput
    suppliers?: ProjectSupplierCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutMaterialsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsibleId: string
    suppliers?: ProjectSupplierUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutMaterialsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutMaterialsInput, ProjectUncheckedCreateWithoutMaterialsInput>
  }

  export type GlobalMaterialCreateWithoutProjectMaterialsInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedMaterialsInput
    comments?: CommentCreateNestedManyWithoutGlobalMaterialInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialUncheckedCreateWithoutProjectMaterialsInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    comments?: CommentUncheckedCreateNestedManyWithoutGlobalMaterialInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialCreateOrConnectWithoutProjectMaterialsInput = {
    where: GlobalMaterialWhereUniqueInput
    create: XOR<GlobalMaterialCreateWithoutProjectMaterialsInput, GlobalMaterialUncheckedCreateWithoutProjectMaterialsInput>
  }

  export type CommentCreateWithoutProjectMaterialInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    globalMaterial?: GlobalMaterialCreateNestedOneWithoutCommentsInput
    globalSupplier?: GlobalSupplierCreateNestedOneWithoutCommentsInput
    projectSupplier?: ProjectSupplierCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutProjectMaterialInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type CommentCreateOrConnectWithoutProjectMaterialInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutProjectMaterialInput, CommentUncheckedCreateWithoutProjectMaterialInput>
  }

  export type CommentCreateManyProjectMaterialInputEnvelope = {
    data: CommentCreateManyProjectMaterialInput | CommentCreateManyProjectMaterialInput[]
  }

  export type ProjectUpsertWithoutMaterialsInput = {
    update: XOR<ProjectUpdateWithoutMaterialsInput, ProjectUncheckedUpdateWithoutMaterialsInput>
    create: XOR<ProjectCreateWithoutMaterialsInput, ProjectUncheckedCreateWithoutMaterialsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutMaterialsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutMaterialsInput, ProjectUncheckedUpdateWithoutMaterialsInput>
  }

  export type ProjectUpdateWithoutMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsible?: UserUpdateOneRequiredWithoutProjectsNestedInput
    suppliers?: ProjectSupplierUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsibleId?: StringFieldUpdateOperationsInput | string
    suppliers?: ProjectSupplierUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type GlobalMaterialUpsertWithoutProjectMaterialsInput = {
    update: XOR<GlobalMaterialUpdateWithoutProjectMaterialsInput, GlobalMaterialUncheckedUpdateWithoutProjectMaterialsInput>
    create: XOR<GlobalMaterialCreateWithoutProjectMaterialsInput, GlobalMaterialUncheckedCreateWithoutProjectMaterialsInput>
    where?: GlobalMaterialWhereInput
  }

  export type GlobalMaterialUpdateToOneWithWhereWithoutProjectMaterialsInput = {
    where?: GlobalMaterialWhereInput
    data: XOR<GlobalMaterialUpdateWithoutProjectMaterialsInput, GlobalMaterialUncheckedUpdateWithoutProjectMaterialsInput>
  }

  export type GlobalMaterialUpdateWithoutProjectMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedMaterialsNestedInput
    comments?: CommentUpdateManyWithoutGlobalMaterialNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type GlobalMaterialUncheckedUpdateWithoutProjectMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutGlobalMaterialNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutProjectMaterialInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutProjectMaterialInput, CommentUncheckedUpdateWithoutProjectMaterialInput>
    create: XOR<CommentCreateWithoutProjectMaterialInput, CommentUncheckedCreateWithoutProjectMaterialInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutProjectMaterialInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutProjectMaterialInput, CommentUncheckedUpdateWithoutProjectMaterialInput>
  }

  export type CommentUpdateManyWithWhereWithoutProjectMaterialInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutProjectMaterialInput>
  }

  export type ProjectSupplierCreateWithoutGlobalSupplierInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSuppliersInput
    comments?: CommentCreateNestedManyWithoutProjectSupplierInput
  }

  export type ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    comments?: CommentUncheckedCreateNestedManyWithoutProjectSupplierInput
  }

  export type ProjectSupplierCreateOrConnectWithoutGlobalSupplierInput = {
    where: ProjectSupplierWhereUniqueInput
    create: XOR<ProjectSupplierCreateWithoutGlobalSupplierInput, ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput>
  }

  export type ProjectSupplierCreateManyGlobalSupplierInputEnvelope = {
    data: ProjectSupplierCreateManyGlobalSupplierInput | ProjectSupplierCreateManyGlobalSupplierInput[]
  }

  export type CommentCreateWithoutGlobalSupplierInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    globalMaterial?: GlobalMaterialCreateNestedOneWithoutCommentsInput
    projectMaterial?: ProjectMaterialCreateNestedOneWithoutCommentsInput
    projectSupplier?: ProjectSupplierCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutGlobalSupplierInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type CommentCreateOrConnectWithoutGlobalSupplierInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutGlobalSupplierInput, CommentUncheckedCreateWithoutGlobalSupplierInput>
  }

  export type CommentCreateManyGlobalSupplierInputEnvelope = {
    data: CommentCreateManyGlobalSupplierInput | CommentCreateManyGlobalSupplierInput[]
  }

  export type DiffNotificationCreateWithoutGlobalSupplierInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutDiffNotificationsInput
    globalMaterial?: GlobalMaterialCreateNestedOneWithoutDiffNotificationsInput
  }

  export type DiffNotificationUncheckedCreateWithoutGlobalSupplierInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    projectId: string
  }

  export type DiffNotificationCreateOrConnectWithoutGlobalSupplierInput = {
    where: DiffNotificationWhereUniqueInput
    create: XOR<DiffNotificationCreateWithoutGlobalSupplierInput, DiffNotificationUncheckedCreateWithoutGlobalSupplierInput>
  }

  export type DiffNotificationCreateManyGlobalSupplierInputEnvelope = {
    data: DiffNotificationCreateManyGlobalSupplierInput | DiffNotificationCreateManyGlobalSupplierInput[]
  }

  export type ProjectSupplierUpsertWithWhereUniqueWithoutGlobalSupplierInput = {
    where: ProjectSupplierWhereUniqueInput
    update: XOR<ProjectSupplierUpdateWithoutGlobalSupplierInput, ProjectSupplierUncheckedUpdateWithoutGlobalSupplierInput>
    create: XOR<ProjectSupplierCreateWithoutGlobalSupplierInput, ProjectSupplierUncheckedCreateWithoutGlobalSupplierInput>
  }

  export type ProjectSupplierUpdateWithWhereUniqueWithoutGlobalSupplierInput = {
    where: ProjectSupplierWhereUniqueInput
    data: XOR<ProjectSupplierUpdateWithoutGlobalSupplierInput, ProjectSupplierUncheckedUpdateWithoutGlobalSupplierInput>
  }

  export type ProjectSupplierUpdateManyWithWhereWithoutGlobalSupplierInput = {
    where: ProjectSupplierScalarWhereInput
    data: XOR<ProjectSupplierUpdateManyMutationInput, ProjectSupplierUncheckedUpdateManyWithoutGlobalSupplierInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutGlobalSupplierInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutGlobalSupplierInput, CommentUncheckedUpdateWithoutGlobalSupplierInput>
    create: XOR<CommentCreateWithoutGlobalSupplierInput, CommentUncheckedCreateWithoutGlobalSupplierInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutGlobalSupplierInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutGlobalSupplierInput, CommentUncheckedUpdateWithoutGlobalSupplierInput>
  }

  export type CommentUpdateManyWithWhereWithoutGlobalSupplierInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutGlobalSupplierInput>
  }

  export type DiffNotificationUpsertWithWhereUniqueWithoutGlobalSupplierInput = {
    where: DiffNotificationWhereUniqueInput
    update: XOR<DiffNotificationUpdateWithoutGlobalSupplierInput, DiffNotificationUncheckedUpdateWithoutGlobalSupplierInput>
    create: XOR<DiffNotificationCreateWithoutGlobalSupplierInput, DiffNotificationUncheckedCreateWithoutGlobalSupplierInput>
  }

  export type DiffNotificationUpdateWithWhereUniqueWithoutGlobalSupplierInput = {
    where: DiffNotificationWhereUniqueInput
    data: XOR<DiffNotificationUpdateWithoutGlobalSupplierInput, DiffNotificationUncheckedUpdateWithoutGlobalSupplierInput>
  }

  export type DiffNotificationUpdateManyWithWhereWithoutGlobalSupplierInput = {
    where: DiffNotificationScalarWhereInput
    data: XOR<DiffNotificationUpdateManyMutationInput, DiffNotificationUncheckedUpdateManyWithoutGlobalSupplierInput>
  }

  export type ProjectCreateWithoutSuppliersInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsible: UserCreateNestedOneWithoutProjectsInput
    materials?: ProjectMaterialCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutSuppliersInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsibleId: string
    materials?: ProjectMaterialUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutSuppliersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSuppliersInput, ProjectUncheckedCreateWithoutSuppliersInput>
  }

  export type GlobalSupplierCreateWithoutProjectSuppliersInput = {
    id?: string
    name: string
    portfolio?: string | null
    regions?: string | null
    email: string
    phone: string
    address: string
    qualityScore?: number
    punctualityScore?: number
    priceScore?: number
    overallScore?: number
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutGlobalSupplierInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutGlobalSupplierInput
  }

  export type GlobalSupplierUncheckedCreateWithoutProjectSuppliersInput = {
    id?: string
    name: string
    portfolio?: string | null
    regions?: string | null
    email: string
    phone: string
    address: string
    qualityScore?: number
    punctualityScore?: number
    priceScore?: number
    overallScore?: number
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutGlobalSupplierInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutGlobalSupplierInput
  }

  export type GlobalSupplierCreateOrConnectWithoutProjectSuppliersInput = {
    where: GlobalSupplierWhereUniqueInput
    create: XOR<GlobalSupplierCreateWithoutProjectSuppliersInput, GlobalSupplierUncheckedCreateWithoutProjectSuppliersInput>
  }

  export type CommentCreateWithoutProjectSupplierInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    globalMaterial?: GlobalMaterialCreateNestedOneWithoutCommentsInput
    projectMaterial?: ProjectMaterialCreateNestedOneWithoutCommentsInput
    globalSupplier?: GlobalSupplierCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutProjectSupplierInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type CommentCreateOrConnectWithoutProjectSupplierInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutProjectSupplierInput, CommentUncheckedCreateWithoutProjectSupplierInput>
  }

  export type CommentCreateManyProjectSupplierInputEnvelope = {
    data: CommentCreateManyProjectSupplierInput | CommentCreateManyProjectSupplierInput[]
  }

  export type ProjectUpsertWithoutSuppliersInput = {
    update: XOR<ProjectUpdateWithoutSuppliersInput, ProjectUncheckedUpdateWithoutSuppliersInput>
    create: XOR<ProjectCreateWithoutSuppliersInput, ProjectUncheckedCreateWithoutSuppliersInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutSuppliersInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutSuppliersInput, ProjectUncheckedUpdateWithoutSuppliersInput>
  }

  export type ProjectUpdateWithoutSuppliersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsible?: UserUpdateOneRequiredWithoutProjectsNestedInput
    materials?: ProjectMaterialUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutSuppliersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsibleId?: StringFieldUpdateOperationsInput | string
    materials?: ProjectMaterialUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type GlobalSupplierUpsertWithoutProjectSuppliersInput = {
    update: XOR<GlobalSupplierUpdateWithoutProjectSuppliersInput, GlobalSupplierUncheckedUpdateWithoutProjectSuppliersInput>
    create: XOR<GlobalSupplierCreateWithoutProjectSuppliersInput, GlobalSupplierUncheckedCreateWithoutProjectSuppliersInput>
    where?: GlobalSupplierWhereInput
  }

  export type GlobalSupplierUpdateToOneWithWhereWithoutProjectSuppliersInput = {
    where?: GlobalSupplierWhereInput
    data: XOR<GlobalSupplierUpdateWithoutProjectSuppliersInput, GlobalSupplierUncheckedUpdateWithoutProjectSuppliersInput>
  }

  export type GlobalSupplierUpdateWithoutProjectSuppliersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutGlobalSupplierNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutGlobalSupplierNestedInput
  }

  export type GlobalSupplierUncheckedUpdateWithoutProjectSuppliersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutGlobalSupplierNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutGlobalSupplierNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutProjectSupplierInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutProjectSupplierInput, CommentUncheckedUpdateWithoutProjectSupplierInput>
    create: XOR<CommentCreateWithoutProjectSupplierInput, CommentUncheckedCreateWithoutProjectSupplierInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutProjectSupplierInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutProjectSupplierInput, CommentUncheckedUpdateWithoutProjectSupplierInput>
  }

  export type CommentUpdateManyWithWhereWithoutProjectSupplierInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutProjectSupplierInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutResponsibleInput
    projectMembers?: ProjectMemberCreateNestedManyWithoutUserInput
    createdMaterials?: GlobalMaterialCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutResponsibleInput
    projectMembers?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdMaterials?: GlobalMaterialUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type ProjectCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsible: UserCreateNestedOneWithoutProjectsInput
    materials?: ProjectMaterialCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsibleId: string
    materials?: ProjectMaterialUncheckedCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCommentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
  }

  export type GlobalMaterialCreateWithoutCommentsInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedMaterialsInput
    projectMaterials?: ProjectMaterialCreateNestedManyWithoutGlobalMaterialInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    projectMaterials?: ProjectMaterialUncheckedCreateNestedManyWithoutGlobalMaterialInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialCreateOrConnectWithoutCommentsInput = {
    where: GlobalMaterialWhereUniqueInput
    create: XOR<GlobalMaterialCreateWithoutCommentsInput, GlobalMaterialUncheckedCreateWithoutCommentsInput>
  }

  export type ProjectMaterialCreateWithoutCommentsInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutMaterialsInput
    globalMaterial: GlobalMaterialCreateNestedOneWithoutProjectMaterialsInput
  }

  export type ProjectMaterialUncheckedCreateWithoutCommentsInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    globalMaterialId: string
  }

  export type ProjectMaterialCreateOrConnectWithoutCommentsInput = {
    where: ProjectMaterialWhereUniqueInput
    create: XOR<ProjectMaterialCreateWithoutCommentsInput, ProjectMaterialUncheckedCreateWithoutCommentsInput>
  }

  export type GlobalSupplierCreateWithoutCommentsInput = {
    id?: string
    name: string
    portfolio?: string | null
    regions?: string | null
    email: string
    phone: string
    address: string
    qualityScore?: number
    punctualityScore?: number
    priceScore?: number
    overallScore?: number
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectSuppliers?: ProjectSupplierCreateNestedManyWithoutGlobalSupplierInput
    diffNotifications?: DiffNotificationCreateNestedManyWithoutGlobalSupplierInput
  }

  export type GlobalSupplierUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    portfolio?: string | null
    regions?: string | null
    email: string
    phone: string
    address: string
    qualityScore?: number
    punctualityScore?: number
    priceScore?: number
    overallScore?: number
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectSuppliers?: ProjectSupplierUncheckedCreateNestedManyWithoutGlobalSupplierInput
    diffNotifications?: DiffNotificationUncheckedCreateNestedManyWithoutGlobalSupplierInput
  }

  export type GlobalSupplierCreateOrConnectWithoutCommentsInput = {
    where: GlobalSupplierWhereUniqueInput
    create: XOR<GlobalSupplierCreateWithoutCommentsInput, GlobalSupplierUncheckedCreateWithoutCommentsInput>
  }

  export type ProjectSupplierCreateWithoutCommentsInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutSuppliersInput
    globalSupplier: GlobalSupplierCreateNestedOneWithoutProjectSuppliersInput
  }

  export type ProjectSupplierUncheckedCreateWithoutCommentsInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    globalSupplierId: string
  }

  export type ProjectSupplierCreateOrConnectWithoutCommentsInput = {
    where: ProjectSupplierWhereUniqueInput
    create: XOR<ProjectSupplierCreateWithoutCommentsInput, ProjectSupplierUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutResponsibleNestedInput
    projectMembers?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdMaterials?: GlobalMaterialUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutResponsibleNestedInput
    projectMembers?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdMaterials?: GlobalMaterialUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ProjectUpsertWithoutCommentsInput = {
    update: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsible?: UserUpdateOneRequiredWithoutProjectsNestedInput
    materials?: ProjectMaterialUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsibleId?: StringFieldUpdateOperationsInput | string
    materials?: ProjectMaterialUncheckedUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type GlobalMaterialUpsertWithoutCommentsInput = {
    update: XOR<GlobalMaterialUpdateWithoutCommentsInput, GlobalMaterialUncheckedUpdateWithoutCommentsInput>
    create: XOR<GlobalMaterialCreateWithoutCommentsInput, GlobalMaterialUncheckedCreateWithoutCommentsInput>
    where?: GlobalMaterialWhereInput
  }

  export type GlobalMaterialUpdateToOneWithWhereWithoutCommentsInput = {
    where?: GlobalMaterialWhereInput
    data: XOR<GlobalMaterialUpdateWithoutCommentsInput, GlobalMaterialUncheckedUpdateWithoutCommentsInput>
  }

  export type GlobalMaterialUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedMaterialsNestedInput
    projectMaterials?: ProjectMaterialUpdateManyWithoutGlobalMaterialNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type GlobalMaterialUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    projectMaterials?: ProjectMaterialUncheckedUpdateManyWithoutGlobalMaterialNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type ProjectMaterialUpsertWithoutCommentsInput = {
    update: XOR<ProjectMaterialUpdateWithoutCommentsInput, ProjectMaterialUncheckedUpdateWithoutCommentsInput>
    create: XOR<ProjectMaterialCreateWithoutCommentsInput, ProjectMaterialUncheckedCreateWithoutCommentsInput>
    where?: ProjectMaterialWhereInput
  }

  export type ProjectMaterialUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ProjectMaterialWhereInput
    data: XOR<ProjectMaterialUpdateWithoutCommentsInput, ProjectMaterialUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectMaterialUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutMaterialsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneRequiredWithoutProjectMaterialsNestedInput
  }

  export type ProjectMaterialUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    globalMaterialId?: StringFieldUpdateOperationsInput | string
  }

  export type GlobalSupplierUpsertWithoutCommentsInput = {
    update: XOR<GlobalSupplierUpdateWithoutCommentsInput, GlobalSupplierUncheckedUpdateWithoutCommentsInput>
    create: XOR<GlobalSupplierCreateWithoutCommentsInput, GlobalSupplierUncheckedCreateWithoutCommentsInput>
    where?: GlobalSupplierWhereInput
  }

  export type GlobalSupplierUpdateToOneWithWhereWithoutCommentsInput = {
    where?: GlobalSupplierWhereInput
    data: XOR<GlobalSupplierUpdateWithoutCommentsInput, GlobalSupplierUncheckedUpdateWithoutCommentsInput>
  }

  export type GlobalSupplierUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectSuppliers?: ProjectSupplierUpdateManyWithoutGlobalSupplierNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutGlobalSupplierNestedInput
  }

  export type GlobalSupplierUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectSuppliers?: ProjectSupplierUncheckedUpdateManyWithoutGlobalSupplierNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutGlobalSupplierNestedInput
  }

  export type ProjectSupplierUpsertWithoutCommentsInput = {
    update: XOR<ProjectSupplierUpdateWithoutCommentsInput, ProjectSupplierUncheckedUpdateWithoutCommentsInput>
    create: XOR<ProjectSupplierCreateWithoutCommentsInput, ProjectSupplierUncheckedCreateWithoutCommentsInput>
    where?: ProjectSupplierWhereInput
  }

  export type ProjectSupplierUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ProjectSupplierWhereInput
    data: XOR<ProjectSupplierUpdateWithoutCommentsInput, ProjectSupplierUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectSupplierUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSuppliersNestedInput
    globalSupplier?: GlobalSupplierUpdateOneRequiredWithoutProjectSuppliersNestedInput
  }

  export type ProjectSupplierUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    globalSupplierId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateWithoutDiffNotificationsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsible: UserCreateNestedOneWithoutProjectsInput
    materials?: ProjectMaterialCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierCreateNestedManyWithoutProjectInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDiffNotificationsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsibleId: string
    materials?: ProjectMaterialUncheckedCreateNestedManyWithoutProjectInput
    suppliers?: ProjectSupplierUncheckedCreateNestedManyWithoutProjectInput
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDiffNotificationsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDiffNotificationsInput, ProjectUncheckedCreateWithoutDiffNotificationsInput>
  }

  export type GlobalMaterialCreateWithoutDiffNotificationsInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedMaterialsInput
    projectMaterials?: ProjectMaterialCreateNestedManyWithoutGlobalMaterialInput
    comments?: CommentCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialUncheckedCreateWithoutDiffNotificationsInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    projectMaterials?: ProjectMaterialUncheckedCreateNestedManyWithoutGlobalMaterialInput
    comments?: CommentUncheckedCreateNestedManyWithoutGlobalMaterialInput
  }

  export type GlobalMaterialCreateOrConnectWithoutDiffNotificationsInput = {
    where: GlobalMaterialWhereUniqueInput
    create: XOR<GlobalMaterialCreateWithoutDiffNotificationsInput, GlobalMaterialUncheckedCreateWithoutDiffNotificationsInput>
  }

  export type GlobalSupplierCreateWithoutDiffNotificationsInput = {
    id?: string
    name: string
    portfolio?: string | null
    regions?: string | null
    email: string
    phone: string
    address: string
    qualityScore?: number
    punctualityScore?: number
    priceScore?: number
    overallScore?: number
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectSuppliers?: ProjectSupplierCreateNestedManyWithoutGlobalSupplierInput
    comments?: CommentCreateNestedManyWithoutGlobalSupplierInput
  }

  export type GlobalSupplierUncheckedCreateWithoutDiffNotificationsInput = {
    id?: string
    name: string
    portfolio?: string | null
    regions?: string | null
    email: string
    phone: string
    address: string
    qualityScore?: number
    punctualityScore?: number
    priceScore?: number
    overallScore?: number
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectSuppliers?: ProjectSupplierUncheckedCreateNestedManyWithoutGlobalSupplierInput
    comments?: CommentUncheckedCreateNestedManyWithoutGlobalSupplierInput
  }

  export type GlobalSupplierCreateOrConnectWithoutDiffNotificationsInput = {
    where: GlobalSupplierWhereUniqueInput
    create: XOR<GlobalSupplierCreateWithoutDiffNotificationsInput, GlobalSupplierUncheckedCreateWithoutDiffNotificationsInput>
  }

  export type ProjectUpsertWithoutDiffNotificationsInput = {
    update: XOR<ProjectUpdateWithoutDiffNotificationsInput, ProjectUncheckedUpdateWithoutDiffNotificationsInput>
    create: XOR<ProjectCreateWithoutDiffNotificationsInput, ProjectUncheckedCreateWithoutDiffNotificationsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDiffNotificationsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDiffNotificationsInput, ProjectUncheckedUpdateWithoutDiffNotificationsInput>
  }

  export type ProjectUpdateWithoutDiffNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsible?: UserUpdateOneRequiredWithoutProjectsNestedInput
    materials?: ProjectMaterialUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDiffNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsibleId?: StringFieldUpdateOperationsInput | string
    materials?: ProjectMaterialUncheckedUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type GlobalMaterialUpsertWithoutDiffNotificationsInput = {
    update: XOR<GlobalMaterialUpdateWithoutDiffNotificationsInput, GlobalMaterialUncheckedUpdateWithoutDiffNotificationsInput>
    create: XOR<GlobalMaterialCreateWithoutDiffNotificationsInput, GlobalMaterialUncheckedCreateWithoutDiffNotificationsInput>
    where?: GlobalMaterialWhereInput
  }

  export type GlobalMaterialUpdateToOneWithWhereWithoutDiffNotificationsInput = {
    where?: GlobalMaterialWhereInput
    data: XOR<GlobalMaterialUpdateWithoutDiffNotificationsInput, GlobalMaterialUncheckedUpdateWithoutDiffNotificationsInput>
  }

  export type GlobalMaterialUpdateWithoutDiffNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedMaterialsNestedInput
    projectMaterials?: ProjectMaterialUpdateManyWithoutGlobalMaterialNestedInput
    comments?: CommentUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type GlobalMaterialUncheckedUpdateWithoutDiffNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    projectMaterials?: ProjectMaterialUncheckedUpdateManyWithoutGlobalMaterialNestedInput
    comments?: CommentUncheckedUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type GlobalSupplierUpsertWithoutDiffNotificationsInput = {
    update: XOR<GlobalSupplierUpdateWithoutDiffNotificationsInput, GlobalSupplierUncheckedUpdateWithoutDiffNotificationsInput>
    create: XOR<GlobalSupplierCreateWithoutDiffNotificationsInput, GlobalSupplierUncheckedCreateWithoutDiffNotificationsInput>
    where?: GlobalSupplierWhereInput
  }

  export type GlobalSupplierUpdateToOneWithWhereWithoutDiffNotificationsInput = {
    where?: GlobalSupplierWhereInput
    data: XOR<GlobalSupplierUpdateWithoutDiffNotificationsInput, GlobalSupplierUncheckedUpdateWithoutDiffNotificationsInput>
  }

  export type GlobalSupplierUpdateWithoutDiffNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectSuppliers?: ProjectSupplierUpdateManyWithoutGlobalSupplierNestedInput
    comments?: CommentUpdateManyWithoutGlobalSupplierNestedInput
  }

  export type GlobalSupplierUncheckedUpdateWithoutDiffNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    regions?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    qualityScore?: FloatFieldUpdateOperationsInput | number
    punctualityScore?: FloatFieldUpdateOperationsInput | number
    priceScore?: FloatFieldUpdateOperationsInput | number
    overallScore?: FloatFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectSuppliers?: ProjectSupplierUncheckedUpdateManyWithoutGlobalSupplierNestedInput
    comments?: CommentUncheckedUpdateManyWithoutGlobalSupplierNestedInput
  }

  export type ProjectCreateManyResponsibleInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    location: string
    status?: string
    budget?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    entityType: string
    entityId: string
    scope: string
    content: string
    createdAt?: Date | string
    projectId?: string | null
  }

  export type ProjectMemberCreateManyUserInput = {
    id?: string
    role?: string
    createdAt?: Date | string
    projectId: string
  }

  export type GlobalMaterialCreateManyCreatedByInput = {
    id?: string
    name: string
    category: string
    unit: string
    specs?: string | null
    portfolio?: string | null
    standardLeadTime?: number | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateWithoutResponsibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    materials?: ProjectMaterialUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutResponsibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    materials?: ProjectMaterialUncheckedUpdateManyWithoutProjectNestedInput
    suppliers?: ProjectSupplierUncheckedUpdateManyWithoutProjectNestedInput
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutResponsibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneWithoutCommentsNestedInput
    projectMaterial?: ProjectMaterialUpdateOneWithoutCommentsNestedInput
    globalSupplier?: GlobalSupplierUpdateOneWithoutCommentsNestedInput
    projectSupplier?: ProjectSupplierUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type GlobalMaterialUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectMaterials?: ProjectMaterialUpdateManyWithoutGlobalMaterialNestedInput
    comments?: CommentUpdateManyWithoutGlobalMaterialNestedInput
    diffNotifications?: DiffNotificationUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type GlobalMaterialUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectMaterials?: ProjectMaterialUncheckedUpdateManyWithoutGlobalMaterialNestedInput
    comments?: CommentUncheckedUpdateManyWithoutGlobalMaterialNestedInput
    diffNotifications?: DiffNotificationUncheckedUpdateManyWithoutGlobalMaterialNestedInput
  }

  export type GlobalMaterialUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    specs?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    standardLeadTime?: NullableIntFieldUpdateOperationsInput | number | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectMaterialCreateManyProjectInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    globalMaterialId: string
  }

  export type ProjectSupplierCreateManyProjectInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    globalSupplierId: string
  }

  export type ProjectMemberCreateManyProjectInput = {
    id?: string
    role?: string
    createdAt?: Date | string
    userId: string
  }

  export type CommentCreateManyProjectInput = {
    id?: string
    entityType: string
    entityId: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
  }

  export type DiffNotificationCreateManyProjectInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    globalEntityId: string
  }

  export type ProjectMaterialUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    globalMaterial?: GlobalMaterialUpdateOneRequiredWithoutProjectMaterialsNestedInput
    comments?: CommentUpdateManyWithoutProjectMaterialNestedInput
  }

  export type ProjectMaterialUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    globalMaterialId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutProjectMaterialNestedInput
  }

  export type ProjectMaterialUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    globalMaterialId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectSupplierUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    globalSupplier?: GlobalSupplierUpdateOneRequiredWithoutProjectSuppliersNestedInput
    comments?: CommentUpdateManyWithoutProjectSupplierNestedInput
  }

  export type ProjectSupplierUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    globalSupplierId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutProjectSupplierNestedInput
  }

  export type ProjectSupplierUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    globalSupplierId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneWithoutCommentsNestedInput
    projectMaterial?: ProjectMaterialUpdateOneWithoutCommentsNestedInput
    globalSupplier?: GlobalSupplierUpdateOneWithoutCommentsNestedInput
    projectSupplier?: ProjectSupplierUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
  }

  export type DiffNotificationUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    globalMaterial?: GlobalMaterialUpdateOneWithoutDiffNotificationsNestedInput
    globalSupplier?: GlobalSupplierUpdateOneWithoutDiffNotificationsNestedInput
  }

  export type DiffNotificationUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    globalEntityId?: StringFieldUpdateOperationsInput | string
  }

  export type DiffNotificationUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    globalEntityId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMaterialCreateManyGlobalMaterialInput = {
    id?: string
    quantity: number
    phase?: string
    location?: string | null
    deliveryTime?: Date | string | null
    pickupTime?: Date | string | null
    needs?: string | null
    specialPrice?: number | null
    notes?: string | null
    hasOverride?: boolean
    overriddenFields?: string | null
    lastSyncVersion?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type CommentCreateManyGlobalMaterialInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type DiffNotificationCreateManyGlobalMaterialInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    projectId: string
  }

  export type ProjectMaterialUpdateWithoutGlobalMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutMaterialsNestedInput
    comments?: CommentUpdateManyWithoutProjectMaterialNestedInput
  }

  export type ProjectMaterialUncheckedUpdateWithoutGlobalMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutProjectMaterialNestedInput
  }

  export type ProjectMaterialUncheckedUpdateManyWithoutGlobalMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    phase?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    specialPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncVersion?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutGlobalMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    projectMaterial?: ProjectMaterialUpdateOneWithoutCommentsNestedInput
    globalSupplier?: GlobalSupplierUpdateOneWithoutCommentsNestedInput
    projectSupplier?: ProjectSupplierUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutGlobalMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutGlobalMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiffNotificationUpdateWithoutGlobalMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutDiffNotificationsNestedInput
    globalSupplier?: GlobalSupplierUpdateOneWithoutDiffNotificationsNestedInput
  }

  export type DiffNotificationUncheckedUpdateWithoutGlobalMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type DiffNotificationUncheckedUpdateManyWithoutGlobalMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyProjectMaterialInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type CommentUpdateWithoutProjectMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneWithoutCommentsNestedInput
    globalSupplier?: GlobalSupplierUpdateOneWithoutCommentsNestedInput
    projectSupplier?: ProjectSupplierUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutProjectMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutProjectMaterialInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectSupplierCreateManyGlobalSupplierInput = {
    id?: string
    arrivalTime?: Date | string | null
    setupTime?: Date | string | null
    operationTime?: Date | string | null
    teardownTime?: Date | string | null
    needs?: string | null
    personnel?: number
    vehicles?: string | null
    onsiteContact?: string | null
    briefingGenerated?: boolean
    hasOverride?: boolean
    overriddenFields?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type CommentCreateManyGlobalSupplierInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type DiffNotificationCreateManyGlobalSupplierInput = {
    id?: string
    entityType: string
    entityId: string
    changes: string
    status?: string
    createdAt?: Date | string
    projectId: string
  }

  export type ProjectSupplierUpdateWithoutGlobalSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSuppliersNestedInput
    comments?: CommentUpdateManyWithoutProjectSupplierNestedInput
  }

  export type ProjectSupplierUncheckedUpdateWithoutGlobalSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutProjectSupplierNestedInput
  }

  export type ProjectSupplierUncheckedUpdateManyWithoutGlobalSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    operationTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teardownTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    needs?: NullableStringFieldUpdateOperationsInput | string | null
    personnel?: IntFieldUpdateOperationsInput | number
    vehicles?: NullableStringFieldUpdateOperationsInput | string | null
    onsiteContact?: NullableStringFieldUpdateOperationsInput | string | null
    briefingGenerated?: BoolFieldUpdateOperationsInput | boolean
    hasOverride?: BoolFieldUpdateOperationsInput | boolean
    overriddenFields?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutGlobalSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneWithoutCommentsNestedInput
    projectMaterial?: ProjectMaterialUpdateOneWithoutCommentsNestedInput
    projectSupplier?: ProjectSupplierUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutGlobalSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutGlobalSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiffNotificationUpdateWithoutGlobalSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutDiffNotificationsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneWithoutDiffNotificationsNestedInput
  }

  export type DiffNotificationUncheckedUpdateWithoutGlobalSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type DiffNotificationUncheckedUpdateManyWithoutGlobalSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changes?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyProjectSupplierInput = {
    id?: string
    entityType: string
    scope: string
    content: string
    createdAt?: Date | string
    authorId: string
    projectId?: string | null
  }

  export type CommentUpdateWithoutProjectSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    globalMaterial?: GlobalMaterialUpdateOneWithoutCommentsNestedInput
    projectMaterial?: ProjectMaterialUpdateOneWithoutCommentsNestedInput
    globalSupplier?: GlobalSupplierUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutProjectSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutProjectSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GlobalMaterialCountOutputTypeDefaultArgs instead
     */
    export type GlobalMaterialCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GlobalMaterialCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectMaterialCountOutputTypeDefaultArgs instead
     */
    export type ProjectMaterialCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectMaterialCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GlobalSupplierCountOutputTypeDefaultArgs instead
     */
    export type GlobalSupplierCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GlobalSupplierCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectSupplierCountOutputTypeDefaultArgs instead
     */
    export type ProjectSupplierCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectSupplierCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectMemberDefaultArgs instead
     */
    export type ProjectMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GlobalMaterialDefaultArgs instead
     */
    export type GlobalMaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GlobalMaterialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectMaterialDefaultArgs instead
     */
    export type ProjectMaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectMaterialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GlobalSupplierDefaultArgs instead
     */
    export type GlobalSupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GlobalSupplierDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectSupplierDefaultArgs instead
     */
    export type ProjectSupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectSupplierDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiffNotificationDefaultArgs instead
     */
    export type DiffNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiffNotificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}